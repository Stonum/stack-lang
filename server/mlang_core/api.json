{
  "freeFunctions": [
    {
      "name": "Пауза",
      "internalName": "Stop",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3200
      },
      "briefDescription": "Функция Пауза( mSec )",
      "detailedDescription": {
        "text": "Останавливает главный поток программы на mSec милисекунд",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЧислоЗаписей",
      "internalName": "NumberRecords",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 975
      },
      "briefDescription": "Функция ЧислоЗаписей(объект)",
      "detailedDescription": {
        "text": "Возвращает число записей в таблице (полезно для таблиц Paradox и dBASE) Если в объекте нет записи, вернет 0;",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныйКореньКлассификаторов",
      "internalName": "GetAccessClassRoot",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 511
      },
      "briefDescription": "Функция ДоступныйКореньКлассификаторов( имя_выборки, тип_корневой_папки )",
      "detailedDescription": {
        "text": "Получает номер доступного для записи корня классификаторов в указанной выборке Если нет никаких ограничений, то возвращается номер папки самого верхнего уровня с указанным типом корневой папки (все документы данной выборки находятся в этой папке или вложенных в нее). Если такая папка недоступна, то возвращается номер записи папки с минимальным уровнем вложенности. Если же доступных для записи (редактирования) папок нет в принципе, то возвращается -1.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьФункцию",
      "internalName": "ExecFunction",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2217
      },
      "briefDescription": "Функция ВыполнитьФункцию( имя_функции )",
      "detailedDescription": {
        "text": "Выполняет функцию с указанным именем (имя обязательно должно содержать скобки, между ними допустимы параметры через запятую, в т.ч. переменные и выражения) Возвращает значение, которое вернула запускаемая функция",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьИДВерсии",
      "internalName": "GetVersionID",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 53
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БлокироватьЗапись",
      "internalName": "LockRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 552
      },
      "briefDescription": "Функция БлокироватьЗапись( имя ресурса )",
      "detailedDescription": {
        "text": "Выставляет на указанный ресурс Exclusive блокировку При успехе вернет 1, при невозможности немедленно выставить блокировку вернет 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьОкноСостояния",
      "internalName": "CreateStatWindow",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3027
      },
      "briefDescription": "Функция СоздатьОкноСостояния( имя_окна, поле1, значение, поле2, значение... )",
      "detailedDescription": {
        "text": "Загружает и сразу производит присвоение полям начальных значений (текстовым - сообщения, Progress - общее число шагов) Если в ресурсе для Progress задать стиль \"Неопределенный\", то можно не указывать значения, он будет показывать анимацию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогОтчетов",
      "internalName": "GetReportDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1006
      },
      "briefDescription": "Функция КаталогОтчетов()",
      "detailedDescription": {
        "text": "Возвращает полный путь к отчетам В конце гарантированно стоит слеш",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Напечатать",
      "internalName": "PrintSection",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1078
      },
      "briefDescription": "Функция Напечатать( имя раздела )",
      "detailedDescription": {
        "text": "Если имя раздела не содержит точек - поиск производится только в текущем отчете Если имя раздела содержит точку - производится поиск раздела с именем после точки в любом отчете (печатается первый найденный)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходГрупповогоСчетчикаДетально",
      "internalName": "DetailValuesGroupCounters",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 710
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция РасходГрупповогоСчетчикаДетально( [список услуг или групп] ) Загружает данные о расходе по групповым счетчикам, без расхода по индивидуальным счетчикам, за месяц расчета Критерием загрузки служит поле Дата в таблице Показания счетчиковЧитает показания групповых счетчиков за месяц, соответствующий расчетному периоду Возвращает массив с индексами 1, 2, 3... Каждый элемент массива соответствует одной записи показаний групповых счетчиков Внутри каждого подобъекта переменные:\nПозицияПоказания (row_id показания в таблице Показания счетчиков);ГрупповойСчетчик (row_id документа);ПозицияСчетчика (row_id счетчика в таблице Список объектов);НомерУслуги;НомерТарифа;Дата (дата показания);РасчМесяц (месяц, в котором выполняется начисление по данному счетчику);Месяцев;ТипВвода;Тарифность (общее число тарифов по данному счетчику);Показание;Расход0 (это поле Расход);Расход (это поле Итоговый расход);ДополнительныйРасход;ЗаводскойНомер (счетчика);ДатНач, ДатКнц - даты действия счетчикаДатаПоверки - дата очередной поверки счетчика\nЕсли не опущен список услуг или групп (это числовые переменные или объект), данные выводятся только для указанных услуг или групп услуг",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьТекущийИдСессии",
      "internalName": "LoadCurrentSID",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3456
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЗаголовок",
      "internalName": "SetTitleAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 130
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьЗаголовок. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьИтоговуюЗапись",
      "internalName": "SetItogData",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2787
      },
      "briefDescription": "Функция УстановитьИтоговуюЗапись( имя_окна_или_диалога, имя_выборки, объект )",
      "detailedDescription": {
        "text": "Устанавливает запись указанного объекта в качестве итоговой в указанном броузере (поиск по имени выборки/коллекции) указанного окна Если передать объект без записи, итоговые данные будут удалены",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьСписокПользователей",
      "internalName": "UpdateListMembers",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 880
      },
      "briefDescription": "Функция ОбновитьСписокПользователей()",
      "detailedDescription": {
        "text": "Перечитывает список пользователей в память (нужно вызывать после создания пользователя)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛогическаяПеременная",
      "internalName": "CreateBooleanToken",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1809
      },
      "briefDescription": "Функция ЛогическаяПеременная( 0 или 1 )",
      "detailedDescription": {
        "text": "Создает переменную, которая будет передаваться в COM-объект как логическая",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьНачалоСертификата",
      "internalName": "GetStartSertif",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1336
      },
      "briefDescription": "Функция ПолучитьНачалоСертификата( файл )",
      "detailedDescription": {
        "text": "возвращает дату начало действия сертификата",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытьСобытие",
      "internalName": "OpenEventObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 642
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СпроситьКонстанты",
      "internalName": "BuildAskCnstDialog",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 422
      },
      "briefDescription": "Функция СпроситьКонстанты( строка [,Дата] )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяЗадачи",
      "internalName": "CurTaskDisplayName",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 709
      },
      "briefDescription": "Функция ИмяЗадачи()",
      "detailedDescription": {
        "text": "Возвращает имя текущей задачи для отображения в главном окне программы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КодЗадачи",
      "internalName": "CurTaskCode",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 717
      },
      "briefDescription": "Функция КодЗадачи()",
      "detailedDescription": {
        "text": "Возвращает код текущей задачи",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СообщитьСостояние",
      "internalName": "ShowStatus",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1180
      },
      "briefDescription": "Функция СообщитьСостояние( строка_сообщения )",
      "detailedDescription": {
        "text": "В строке состояния вместо пути к базе данных пишет указанное сообщение",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Мин",
      "internalName": "Min64",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 620
      },
      "briefDescription": "Функция Мин( БольшоеЧисло, БольшоеЧисло )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "XmlElement",
      "internalName": "CreateXmlElement",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 573
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходСчетчикаДетально",
      "internalName": "DetailValuesCounters",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1270
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция РасходСчетчикаДетально( [Режим][список услуг или групп] ) Загружает платежи по услугам и данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Устанавливает переменную ЕстьДетальныйРасход \u003d 1; Читает показания счетчиков и оплату услуг за месяц, соответствующий расчетному периоду Возвращает массив с индексами 1, 2, 3... Каждый элемент массива соответствует одной записи показаний счетчиков или оплаты по видам Внутри каждого подобъекта переменные:\nПозицияПоказания (row_id показания в таблице Показания счетчиков);Платеж (row_id платежа в Списке оплаты, с которым связано данное показание счетчика или оплата по услуге);Ведомость (row_id ведомости в таблице Документ, с которой связан данный счетчик или платеж);ПозицияСчетчика (row_id счетчика в таблице Список объектов);НомерУслуги;НомерТарифа;Дата (дата счетчика или платежной ведомости);РасчМесяц (месяц, в котором выполняется начисление по данному счетчику);Месяцев;ТипВвода;Тарифность (общее число тарифов по данному счетчику);Показание;Расход0 (это поле Расход);Расход (это поле Итоговый расход);ДополнительныйРасход;ЗаводскойНомер (счетчика);СуммаДатНач, ДатКнц - даты действия счетчикаДатаПоверки - дата очередной поверки счетчика\nУ записей показаний счетчиков отлична от -1 ПозицияПоказания и Сумма\u003d0, у записей оплаты по видам ПозицияПоказания \u003d\u003d -1, нулевые поля, относящиеся к счетчику (НомерТарифа, Тарифность, Показание, Расход, Расход0, Месяцев, ДополнительныйРасход), ПозицияСчетчика \u003d -1, ЗаводскойНомер \u003d \"\"Если не опущен режим, это строковая переменная, в которой ищутся только символы \"Ч\" - вывести показания счетчиков и \"П\" - вывести оплату. Если режим опущен, выводятся те и другие записи. Если не опущен список услуг или групп (это числовые переменные или объект), данные выводятся только для указанных услуг или групп услуг",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УпаковатьДвоичноеПоле",
      "internalName": "CompressBinaryField",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 827
      },
      "briefDescription": "Функция УпаковатьДвоичноеПоле( Объект, ИмяПоля )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьСФайл",
      "internalName": "ReadObjFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 231
      },
      "briefDescription": "Функция ПрочитатьСФайл( объект_файл[, макс_длина_строки] )",
      "detailedDescription": {
        "text": "Читает из файла строку до обнаружения символа \"\\n\" Если указана макс_длина_строки, читает не более этого количества символов Возвращает длинную строку При достижении конца файла или если файл не открыт, возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыйтиИзРежимаОтобранныхЗаписей",
      "internalName": "ExitFromSelectedRecords",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1734
      },
      "briefDescription": "Функция ВыйтиИзРежимаОтобранныхЗаписей( имя окна, имя выборки )",
      "detailedDescription": {
        "text": "Выводит указанный броузер в указанном окне из режима отображения отобранных записей (например, после поиска) - это аналог Ctrl-F + Gray- Если окно/броузер не найдены или броузер не в режиме отображения отобранных записей - не делает ничего",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьЭлемент",
      "internalName": "DisableControlName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 282
      },
      "briefDescription": "Функция ЗапретитьЭлемент( имя окна, имя элемента)",
      "detailedDescription": {
        "text": "Запрещает элемент у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "DBF2SQLMove",
      "internalName": "DBF2SQLMove",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 285
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция DBF2SQLMove( имя таблицы, имя файла с путем[, \"Мемо: \u003cописание\u003e\"][, \"Кодировка: {866 | 1251}\"][, \"Удаленные: {0 | 1}\"] ) Создает указанную таблицу, предварительно удаляя ранее имевшуюся, если форматы новой и старой отличаются. Имя таблицы должно быть написано в ~~, если таблица в текущей базе, в противном случае должны быть указаны имя базы и схемы После создания таблицы переносит в нее все содержимоеИменованный параметр:\n\"Мемо:\" - если строка размера Memo-полей опущена, они не создаются и не переносятся Иначе они создаются как varchar, эта строка должна задавать их размер:\n\nлибо в виде \"Поле,Размер,Поле2,Размер...\" - размер задан для всех полей, если какие-то поля пропущены, они не будут созданылибо в виде \"Размер_по_умолчанию,Поле,Размер,Поле2,Размер...\" - размер задан для части полей, а для остальных применяется размер по умолчанию\n\n\"Кодировка:\" - кодировка строк - это число 866 или 1251, указывающее, в какой кодировке записаны строки (по умолчанию 866)\"Удаленные:\" - удаленные записи - число, по умолчанию 1 (не игнорировать).",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВОборот",
      "internalName": "CAccOborot",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 471
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяБазы",
      "internalName": "BaseName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1330
      },
      "briefDescription": "Функция ИмяБазы( имя_таблицы )",
      "detailedDescription": {
        "text": "Возвращает имя базы, где лежит таблица. Если \"\", то возвращает имя главной БД",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИзвлечьПуть",
      "internalName": "ExtractPath",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1381
      },
      "briefDescription": "Функция ИзвлечьПуть( полное_имя_файла | путь )",
      "detailedDescription": {
        "text": "Возвращает путь без замыкающей части Примеры: C:\\Work\\File\\test.txt -\u003e C:\\Work\\File C:\\Work\\File\\ -\u003e C:\\Work C:\\Work\\File -\u003e C:\\Work",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоставщикПользователь",
      "internalName": "ReadARMProvider",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 50
      },
      "briefDescription": "Функция ПоставщикПользователь()",
      "detailedDescription": {
        "text": "В задачах АРМ поставщика и АРМ юриста поставщика возвращает запись поставщика-пользователя этого АРМ ИНН организации должен быть указан в строке Раздел права на вход в задачу (права на ресурс соответственно Поставщик и ЮрПоставщика) В других задачах возвращает пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПоляОкнаСостояния",
      "internalName": "SetFieldsStatWindow",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3056
      },
      "briefDescription": "Функция УстановитьПоляОкнаСостояния( поле1, значение, поле2, значение... )",
      "detailedDescription": {
        "text": "Присвоение полям новых значений (текстовым - сообщения, Progress: отрицательное число - общее число шагов, положительное \u003e1 - текущее положение, 1 - смещение на 1 шаг)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьСлова",
      "internalName": "GetWords",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 176
      },
      "briefDescription": "Функция ПрочитатьСлова( [режим,]длинная_строка, символ_разделитель, символ_ограничитель_слов, [начальная_позиция(константа или выражение, но не просто имя переменной, допустимо имя+0)",
      "detailedDescription": {
        "text": ",] [список переменных] ) Если список переменных пуст, вернет число слов, которое содержится в строке, начиная с указанной позиции (счет от 0, не указана - 0) (под словом понимается последовательность символов, окруженная необязательным символом-ограничителем слов, после оганичителя стоить обязательный символ- разделитель. Допустимые форматы: 1,2,3 \"1\",\"2\",\"3\" В первом случае есть символ-ограничитель(кавычки), во втором-нет. Если нет символа-ограничителя, для включения символа-разделителя в состав слова перед ним нужно поставить знак \\ Если есть символ-ограничитель, между ними могут быть свободно включены символы-разделители. Допустимо в слове поставить два подряд символа-ограничителя, но они при этом попадут и в результат разбора. Если указано наличие символа-ограничителя, при чтении каждого слова игнорируются символы до начального ограничителя, если отсутствует конечный ограничитель, весь конец строки считается единым словом) Если список переменных не пуст, инициализирует эти переменные значениями. Переменная Режим (строковая) игонорируетсяФрагменты строки сохраняются в переменные с указанными именами, как обычные строки, если их длина меньше 255 символов, иначе - как длинные строки Список переменных может содержать единственное имя, являющееся массивом, в этом случае фрагменты строки сохраняются как его элементы с именами 1,2,3...Возвращает -1, если разобрана вся строка-хватило переменных или был передан массив, или позицию, с которой продолжать разбор строки - не хватило переменных Устанавливает также переменную ПрочитаноСлов - сколько переменных инициализировано",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РаспаковатьДанные",
      "internalName": "DecompressDataFunc",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2424
      },
      "briefDescription": "Функция РаспаковатьДанные( данные )",
      "detailedDescription": {
        "text": "распаковывает данные с помощью zlib и возвращает результат в виде длинной строки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьОчередьСобытий",
      "internalName": "ClearEventQueue",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3251
      },
      "briefDescription": "Функция ОчиститьОчередьСобытий()",
      "detailedDescription": {
        "text": "Очищает очередь событий. Применяется, в основном, для очистки команды Escape",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьФорматФайлаОтчета",
      "internalName": "SetReportFileFormat",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4829
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет установить требуемый формат отчета\n*\n* @Функция УстановитьФорматФайлаОтчета()@\n*\n* @return 1\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьРесурс",
      "internalName": "GetResourceGlobal",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4637
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Возвращает ресурс с указанным типом и именем\n*\n* @Функция @ПолучитьРесурс(Строка имяРесурса, Строка типРесурса [, Строка имяПодресурса [, ...] ])\n*\n* @param[in] имяРесурса имя ресурса\n* @param[in] типРесурса тип ресурса (Можно указать: \"Window\", \"RecDialog\", \"StrCol\", \"RecCol\",\n*    \"MenuBar\", \"MenuBox\", \"Select\", \"KeyMap\", \"Strings\", \"ToolBar\", \"ImageList\", \"APIBrowser\")\n* @param[in] имяПодресурса имя вложенного ресурса; может быть несколько для построения нужной иерархии;\n* поиск происходит во всех детях рекурсивно\n* @returns Объект с ресурсом\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаКвартал",
      "internalName": "ForCvart",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 302
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Query",
      "internalName": "CreateQuery",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 699
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Query( запрос[, число извлекаемых записей в одном пакете][, типы параметров] ) Основное назначение - выполнение запроса Select, но может использоваться и для выполнения других запросов (по одному, без объединения буфера в общую транзакцию) Резутьтаты запроса извлекаются с сервера пакетом указанного размера, а на локальной машине передаются по одной записи в вызовах Объект.Следующий()Типы параметров:\nотсутствуют или пустая строка при отсутствии параметров;может быть одна переменная:\nмассив - типами параметров выступают типы переменных, параметры в запрос будут передаваться в алфавитной \n последовательности имен переменных;строка/длинная строка вида \"имя, тип [,...]\" - параметры сохраняются в последовательности их нахождения в строке;\nнесколько пар строк \"имя\", \"тип\" [,...] - поля сохраняются в последовательности пар В любом случае имена полей бесполезны В строках в качестве типов полей понимает ANXSRI$DFM",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БезКоп",
      "internalName": "CutMoney",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 589
      },
      "briefDescription": "Функция БезКоп( число )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПовышенныеПрава",
      "internalName": "PrivilegedUser",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 810
      },
      "briefDescription": "Функция ПовышенныеПрава()",
      "detailedDescription": {
        "text": "Возвращает 1, если пользователь является супервизором или имеет право работы в закрытом периоде",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КопироватьПоля",
      "internalName": "CopyRecordField",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 703
      },
      "briefDescription": "Функция КопироватьПоля( объект-получатель, объект-источник, имена полей )",
      "detailedDescription": {
        "text": "Копирует значения из указанных полей объекта-источника в одноименные поля объекта-получателя при условии, что они существуют в источнике и получателе. Новые поля не добавляются Возвращает число полей, скопированных в объект-получатель",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КопироватьЗапись",
      "internalName": "CopyObjRecordAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 879
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция КопироватьЗапись. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьИмяФайлаОтчета",
      "internalName": "GetReportFileName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4815
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить имя файла готового отчета\n*\n* @Функция ПолучитьИмяФайлаОтчета()@\n*\n* @return путь к файлу готового отчета\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ПеренабратьВыборку",
      "internalName": "RefreshSel",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 932
      },
      "briefDescription": "Функция ПеренабратьВыборку( имя выборки )",
      "detailedDescription": {
        "text": "Обновляет все указанные выборки (перерисовывает все DataView, содержащие данную выборку)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьИмяФайлаОтчета",
      "internalName": "SetReportFileName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4800
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет установить имя файла готового отчета\n*\n* @Функция УстановитьИмяФайлаОтчета()@\n*\n* @return путь к файлу готового отчета\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПараметрыФильтра",
      "internalName": "SetParamFiltr",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2823
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьПараметрыФильтра( имя_окна_или_диалога, имя_выборки, значение_параметра1 [, значение_параметра2...] ) Устанавливает параметры фильтра указанной выборки 3-м параметром может принимать объект с параметрами для фильтра: поля объекта такие же, как в событии \"Фильтр\" Для фильтра ReportChangesFilter параметрами являются:\nстрока - выражение, помещаемое внутрь скобок AND ИмяТаблицы IN(...)минимальная дата отображаемых записей (NULL_DATE - нет ограничений)максимальная дата отображаемых записей (NULL_DATE - нет ограничений)\nДля стандартных фильтров параметрами являются: первый - окончание строки Where, например, \" поле1\u003d :2 AND поле2 between :3 and :4\" (параметры начинаются с :2); второй - строка типов параметров через запятую, например \"S,D,D\"; далее - собственно значения параметров При первом вызове формируется запись параметров, при последующих - только обновляются значения Если нужно изменить набор параметров, следует вызвать данную функцию только с именем окна и именем выборки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьСостояниеМесяца",
      "internalName": "UpdateMonthState",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 667
      },
      "briefDescription": "Функция ОбновитьСостояниеМесяца()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогиОтчетов",
      "internalName": "GetRptDirs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 980
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДлинаИнтервала",
      "internalName": "IntervalLength",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 962
      },
      "briefDescription": "Функция ДлинаИнтервала( НомерИнтервала [,первый_месяц_периода [, последний_месяц_периода]] )",
      "detailedDescription": {
        "text": "Возвращает число дней в интервале с указанным номером в указанном периоде (номер интервала - от 1 до значения, возвращаемого функцией КоличествоИнтервалов с теми же границами периода) Если опущены обе границы периода, номер интервала рассматривается в пределах месяца расчета Если опущен последний месяц периода, период состоит из одного месяца, который указан как первый месяц периода, именно в нем берется нужный интервал Если указан недопустимый номер интервала, возвращает 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьОкно",
      "internalName": "DisableWindowCurrent",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 562
      },
      "briefDescription": "Функция ЗапретитьОкно( )",
      "detailedDescription": {
        "text": "Запрещает все элементы у текущего окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Узел",
      "internalName": "IsFieldBranch",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 688
      },
      "briefDescription": "Функция Узел( объект, имя поля )",
      "detailedDescription": {
        "text": "Возвращает 1, если в объекте имеется запись, в записи есть такое поле, оно является полем иерархии, значение поля \"Узел\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныйКореньВедомостей",
      "internalName": "GetAccessVedomRoot",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 487
      },
      "briefDescription": "Функция ДоступныйКореньВедомостей( имя_выборки )",
      "detailedDescription": {
        "text": "Получает номер доступного для записи корня ведомостей в указанной выборке Если нет никаких ограничений, то возвращается номер папки самого верхнего уровня, предназначенной для документов данного типа(66). Если такая папка недоступна, то возвращается номер записи папки с минимальным уровнем вложенности. Если же доступных для записи (редактирования) папок нет в принципе, то возвращается -1.Допустимо применение ТОЛЬКО для документов квартплаты",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Месяц",
      "internalName": "GetMonth",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 794
      },
      "briefDescription": "Функция Месяц( Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СохранитьРесурсыСловаря",
      "internalName": "SaveXdicRes",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3463
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьЭлементыОкна",
      "internalName": "EnableControlsName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 450
      },
      "briefDescription": "Функция РазрешитьЭлементыОкна( имя окна, имя элемента[, имя_элемента2...] )",
      "detailedDescription": {
        "text": "Разрешает указанные элементы у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВСКК",
      "internalName": "CSaldoEndKredit",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 372
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьЭлементыОкна",
      "internalName": "DisableControlsName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 344
      },
      "briefDescription": "Функция ЗапретитьЭлементыОкна( имя окна, имя элемента[, имя_элемента2...] )",
      "detailedDescription": {
        "text": "Запрещает указанные элементы у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьЗаписьВыборки",
      "internalName": "RemoveRecRecCol",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 484
      },
      "briefDescription": "Функция УдалитьЗаписьВыборки( объект, логическая позиция )",
      "detailedDescription": {
        "text": "Удаляет запись из выборки или коллекции по логической позиции",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьТаблицуИндекс",
      "internalName": "CreateTableIndex",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 241
      },
      "briefDescription": "Функция СоздатьТаблицуИндекс( имя файла с расширением, имя поля, тип поля, имя, тип, ... [,0, Имя индекса, имя поля, имя поля] [,0, Имя индекса2, имя поля, имя поля]...)",
      "detailedDescription": {
        "text": "Допустим вызов в виде СоздатьТаблицу( имя файла с расширением, объект [,0, Имя индекса, имя поля, имя поля] [,0, Имя индекса2, имя поля, имя поля]...) ) В имени допустим путь. Если такой файл существует, удаляет его. Создает таблицу с таким именем ( .db, .dbf, .tbl ) и такими полями типы - символы: S - целое, I - большое целое, N - вещественное, $ - деньги, A - строковое для .tbl и символьное длины 80 для .dbf, A50 - текст для .tbl и символьное указанной длины для .dbf, D - дата, B - двоичное, Вместо имени и типа поля может быть объект, тогда все поля из его записи переносятся в выходную таблицуВозвращает объект, основанный на записи этой таблицы У таблицы будут созданы указанные индексы Чтобы пользоваться функцией Следующий, имя индекса должно совпадать с именем одного из полей. Если возникнут любые ошибки, возвращает пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяПрограммы",
      "internalName": "GetProgramName",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 1117
      },
      "briefDescription": "Функция ИмяПрограммы()",
      "detailedDescription": {
        "text": "Возвращает имя комплекса программ (ProgramName из stack.ini) для отображения в главном окне программы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьСчетчик",
      "internalName": "GetCounter",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Counters.cpp",
        "line": 422
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НачислениеПениПолное",
      "internalName": "ShowCalcPeniAll",
      "sourceLocation": {
        "file": "KvplataCalc/source/FUNCTION.CPP",
        "line": 278
      },
      "briefDescription": "Функция НачислениеПениПолное( номер лицевого счета, расчетный месяц, дата платежа, сумма сторнируемого пени [, признак необходимости детализации по услугам] )",
      "detailedDescription": {
        "text": "Начисляет пени на всю сумму неоплаченного долга из входящего сальдо расчетного месяца Возвращает массив с элементами 10001,10002,10003..., в каждом элементе переменные: ЗаМесяц, ДатаПлатежа, ПениСчитатьОт, СуммаПлатежа, СуммаПени Массив содержит как пени, начисленные на имеющиеся в расчетном месяце платежи, так и на неоплаченные долги Если указана детализация по услугам (любое значение), дополнительно в каждом элементе будет переменная НомерУслуги Кроме того, в массиве будет переменная ВсегоПени, которая содержит исходящее сальдо пени",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СпроситьРегистрацию",
      "internalName": "UserCheckLicense",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 241
      },
      "briefDescription": "Функция СпроситьРегистрацию()",
      "detailedDescription": {
        "text": "- устарела Если уже зарегистрирована, возвращаем 1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РаскрытьУзел",
      "internalName": "ExpandTreeItemName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1074
      },
      "briefDescription": "Функция РаскрытьУзел( имя_окна, имя_дерева, имя_узла )",
      "detailedDescription": {
        "text": "раскрывает узел дерева с текстом имя_узла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Заменить",
      "internalName": "ReplStr",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 625
      },
      "briefDescription": "Функция Заменить( строка, что заменить, на что заменить )",
      "detailedDescription": {
        "text": "Заменяет в строке все вхождения одной подстроки на новую",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Допечатать",
      "internalName": "PrintTemp",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1103
      },
      "briefDescription": "Функция Допечатать()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Супервизор",
      "internalName": "UserIsSupervisor",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 803
      },
      "briefDescription": "Функция Супервизор()",
      "detailedDescription": {
        "text": "Возвращает 1, если пользователь является супервизором",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РежимАдминистратора",
      "internalName": "CurTaskIsAdminMode",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 745
      },
      "briefDescription": "Функция РежимАдминистратора()",
      "detailedDescription": {
        "text": "Возвращает признак, что сейчас находимся в режиме администратора",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НачислениеПениЧастичное",
      "internalName": "ShowCalcPeniPart",
      "sourceLocation": {
        "file": "KvplataCalc/source/FUNCTION.CPP",
        "line": 295
      },
      "briefDescription": "Функция НачислениеПениЧастичное( номер лицевого счета, расчетный месяц, месяц долга, сумма платежа, дата платежа, сумма сторнируемого пени[, признак необходимости детализации по услугам] )",
      "detailedDescription": {
        "text": "Начисляет пени на указанную сумму платежа, если она ненулевая, а если нулевая - на все долги до \"месяц долга\" включительно из входящего сальдо расчетного месяца Возвращает массив с элементами 10001,10002,10003..., в каждом элементе переменные: ЗаМесяц, ДатаПлатежа, ПениСчитатьОт, СуммаПлатежа, СуммаПени В массиве будут только суммы пени, возникшего вследствие гашения неоплаченных долгов (пени на имеющиеся в расчетном месяце платежи не выводятся) Если указана детализация по услугам (любое значение), дополнительно в каждом элементе будет переменная НомерУслуги Кроме того, в массиве будут переменные ВсегоПени, которая содержит исходящее сальдо пени, СуммаПлатежа (сумма указанного ненулевого платежа или сумма долгов при нулевом платеже), ВходящееСальдоПени и СторноПени",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОК",
      "internalName": "OborotKredit",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 386
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьSQLВыражение",
      "internalName": "SetSQLExpression",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 814
      },
      "briefDescription": "Функция УстановитьSQLВыражение( объект, имя_поля, SQL-выражение )",
      "detailedDescription": {
        "text": "Устанавливает в выборке, к которой принадлежит объект, SQL-выражение в поле имя_поля, если оно является SQL-вычисляемым",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходСчетчика",
      "internalName": "ValuesCounters",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 355
      },
      "briefDescription": "Функция РасходСчетчика( [режим] )",
      "detailedDescription": {
        "text": "Загружает платежи по услугам и данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Определяет переменную ЕстьРасход \u003d 1 и создает внутри col массивы мРасход, мТарифСчетчика, мНаличиеПоказаний, мСуммы, мСчМес Если опущен Режим или он отличен от \"У\", подводятся итоги по группам услуг, иначе - по услугам. Cоответственно, индексом в массивах служит номер группы или услуги В массиве мРасход суммируются данные по итоговому расходу (с учетом коэффициента трансформации)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ФИО",
      "internalName": "MFIO",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 449
      },
      "briefDescription": "Функция ФИО( полные ФИО )",
      "detailedDescription": {
        "text": "Возвращает фамилию с инициалами",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АПИДиалог",
      "internalName": "CreateApiDialog",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 5169
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СНД",
      "internalName": "SaldoStartDebet",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 377
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьТихийРежим",
      "internalName": "SetSilentMode",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3218
      },
      "briefDescription": "Функция УстановитьТихийРежим( режим )",
      "detailedDescription": {
        "text": "если режим отличен от 0, то устанавливает режим программе когда все сообщения выводятся в лог, в противном случае возврщает программу в нормальный режим",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Найти",
      "internalName": "FindCommon",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 581
      },
      "briefDescription": "Функция Найти( строка, подстрока[,от какого символа искать] )",
      "detailedDescription": {
        "text": "Ищет первое вхождение строки в подстроку Если не указано, от какого символа искать, ищет от начала, иначе от указанной позиции (счет от 1) Возвращает позицию подстроки (счет от 1) или 0 при отсутствии подстроки в строке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "RTrim",
      "internalName": "RTrimPRG",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 235
      },
      "briefDescription": "Функция RTrim( строка )",
      "detailedDescription": {
        "text": "Удаляет пробелы и табуляции в начале строки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрименитьКодРегистрации",
      "internalName": "ApplyRegCode_script",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1608
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief\n*\n* @Функция ПрименитьКодРегистрации(Строка код)@\n*\n* @param[in] код \n*\n* @return Строка\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "КонстантаНаИнтервале",
      "internalName": "GetConstantArray",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 18
      },
      "briefDescription": "Функция КонстантаНаИнтервале( дата начала интервала, дата конца интервала, имя константы )",
      "detailedDescription": {
        "text": "Читает значения константы по ее имени, действующие на интервале дат",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыборВарианта",
      "internalName": "ShowPopupList",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 642
      },
      "briefDescription": "Функция ВыборВарианта( заголовок, массив с именами, массив со значениями )",
      "detailedDescription": {
        "text": "В массиве с именами должны быть набраны переменные строкового типа В массиве со значениями должны быть переменные с теми же индексами, но числового типа Создается меню, пункты которого соответствуют значениям строк первого массива, порядок следования пунктов соответствует порядку сортировки строк в массиве В меню включаются только элементы, у которых в первом массиве тип \"Строка\", а во втором объекте - имеется соответствующий индекс, тип - \"Число\" или \"Деньги\" В случае выбора пользователем варианта возвращается число, которое хранится во втором массиве в элементе с тем же индексом, что и выбранная строка, если ничего не было выбрано - возвращает -1 .",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьИтератор",
      "internalName": "CreateIterator",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
        "line": 1187
      },
      "briefDescription": "Функция СоздатьИтератор()",
      "detailedDescription": {
        "text": "Создает объект с именем Итератор",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьРежимАПИ",
      "internalName": "SetApiMode",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4522
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Устанавливает, является ли поток запущенным в режиме АПИ\n*\n* @Функция УстановитьРежимАПИ(Число значение)@\n*\n* @param[in] значение 1, если поток запущенным в режиме АПИ, и 0 - иначе\n* @return 1, если поток запущенным в режиме АПИ, и 0 - иначе\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ПриостановитьПечать",
      "internalName": "StopPrint",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1085
      },
      "briefDescription": "Функция ПриостановитьПечать()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВОК",
      "internalName": "COborotKredit",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 366
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИзменитьСостояниеФлага",
      "internalName": "ChangeFlagState",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 673
      },
      "briefDescription": "Функция ИзменитьСостояниеФлага( ИмяФлага, Состояние (0|1) )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьКонфигурацию",
      "internalName": "ReadConfiguration",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 41
      },
      "briefDescription": "Функция ПрочитатьКонфигурацию( строка режима )",
      "detailedDescription": {
        "text": "Возвращает объект содержащий информацию о конфигурации задачи, запрошенную в параметре mode. Он представляет собой строку, в которой через запятую перечисляются поля, которые необходимо извлечь УЛ - номер записи улицы по умолчанию Д - дом по умолчанию М - месяц начала эксплуатации программы УСЛУГАСЧЕТЧИКА - номер услуги по счетчику по умолчанию ПОСТАВЩИК - номер записи поставщика по умолчанию ПРОВОДКА - номер записи проводки в счетах-фактурах ФЛАГИ1 - флаги основного окна конфигурации ФЛАГИ2 - флаги дополнительного окна конфигурации МЕСЯЦЕВСУБСИДИЙ - на сколько месяцев предоставляется субсидия МЕСЯЦЕВНАЗАД - на сколько месяцев назад от месяца предоставления субсидии берутся начисления ГОРОД - город",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьПозициюРедактора",
      "internalName": "GetOffsetEditor",
      "sourceLocation": {
        "file": "MuzzleJ/Source/editor.cpp",
        "line": 1059
      },
      "briefDescription": "Функция ПолучитьПозициюРедактора( имя_окна, имя_редактора )",
      "detailedDescription": {
        "text": "Возвращает позицию каретки редактора с именем name в окне win_name",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ХэшСумма",
      "internalName": "GenerateHash",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 349
      },
      "briefDescription": "Функция ХэшСумма( строка, алгоритм, формат )",
      "detailedDescription": {
        "text": "Возвращает хэш-сумму указанной строки по алгоритму \"алгоритм\" \"формат\" указывает в каком виде будет возвращен результат: 1 - base64 12 - в виде шестнадцатеричных чисел",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КоманднаяСтрока",
      "internalName": "GetCommandLineArgs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3268
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить значение аргумента командной строки\n*\n* @Функция КоманднаяСтрока( [Строка имяАргумента] [, Любое значениеПоУмолчанию] )@\n*\n* @param[in] имяАргумента имя аргумента\n* @param[in] значениеПоУмолчанию значение, которое вернется при отсутсвии параметра(если не указано, то null)\n* @return Любое Если указано имя аргумента, то его значение или значениеПоУмолчанию(если такого аргумента нет),\n*     иначе возвращается объект со всеми указанными аргументами\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетЛицевого",
      "internalName": "Calc_LS",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 449
      },
      "briefDescription": "Функция РасчетЛицевого( номер_записи, месяц )",
      "detailedDescription": {
        "text": ", она же ПерерасчетЛицевого( номер_записи, месяц ) Если указанный месяц открыт, рассчитывает лицевой счет (или объект), соответствующий указанной записи, за указанный месяц, и сохраняет результат Если же месяц закрыт, выполняет перерасчет за этот месяц, сохраняя результат перерасчета в открытом месяце, а затем рассчитывает открытый месяц Если месяц month ранее начала работы программы, ничего не делает",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПерерасчетЛицевого",
      "internalName": "Calc_LS",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 449
      },
      "briefDescription": "Функция РасчетЛицевого( номер_записи, месяц )",
      "detailedDescription": {
        "text": ", она же ПерерасчетЛицевого( номер_записи, месяц ) Если указанный месяц открыт, рассчитывает лицевой счет (или объект), соответствующий указанной записи, за указанный месяц, и сохраняет результат Если же месяц закрыт, выполняет перерасчет за этот месяц, сохраняя результат перерасчета в открытом месяце, а затем рассчитывает открытый месяц Если месяц month ранее начала работы программы, ничего не делает",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСтраницу",
      "internalName": "SetPage",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1128
      },
      "briefDescription": "Функция УстановитьСтраницу( номер )",
      "detailedDescription": {
        "text": "Устанавливает номер текущей страницы (счет от 1), Возвращает номер, который был ранее (счет от 1)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КомандаОкну",
      "internalName": "StoreCmdToWindow",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1967
      },
      "briefDescription": "Функция КомандаОкну( код команды или текст команды, имя окна [,выражение] )",
      "detailedDescription": {
        "text": "Помещает команду в очередь",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьЗапись",
      "internalName": "RefreshRec",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3163
      },
      "briefDescription": "Функция ОбновитьЗапись( [имя_окна, [имя_выборки,]] [row_id] )",
      "detailedDescription": {
        "text": "посылает команду на обновление записи в браузере/панели",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПодготовкаСальдоНачисления",
      "internalName": "PrepareReportCalc",
      "sourceLocation": {
        "file": "Kvplata/source/rpt_makers.cpp",
        "line": 970
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АдресЛицевогоПлотно2",
      "internalName": "GetLSAddressShort2",
      "sourceLocation": {
        "file": "Kvplata/source/func_address.cpp",
        "line": 50
      },
      "briefDescription": "Функция АдресЛицевогоПлотно2( объект )",
      "detailedDescription": {
        "text": "Если объект содержит запись из таблицы Лицевые счета, возвращает адрес соответствующего объекта (строку) ( пишется плотно д.N кв.N ) Адрес начинается с названия участка (в отличие от АдресЛицевогоПлотно) В противном случае (нет записи в объекте или запись из другой таблицы) возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписьУКТекущегоЛицевого",
      "internalName": "GetControlCompanyRecord",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1910
      },
      "briefDescription": "Функция ЗаписьУКТекущегоЛицевого( услуга, дата )",
      "detailedDescription": {
        "text": "Возвращает объект с записью управляющей компании, к которой принадлежит текущий лицевой на указанную дату Если у указанной услуги есть прямой договор или своя УК - возвращается запись данной организации Иначе - запись общей для лицевого УКПо умолчанию можно прочесть УК только за период расчета. Если в !stack_ini в секции [AppConfig] определить константу LoadProvidersToCalcFrom\u003dдд.мм.гггг, можно будет прочесть УК за период с указанной даты до окончания периода расчета",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОтметитьВсеЗаписиВыборки",
      "internalName": "MarkAllRecs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1717
      },
      "briefDescription": "Функция ОтметитьВсеЗаписиВыборки( имя окна, имя DataView )",
      "detailedDescription": {
        "text": "Выделяет все невыделенные записи указанной выборки в указанном окне (обычном или диалога) Снимает выделение с выделенных",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Задача",
      "internalName": "_CurrentTaskName",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 701
      },
      "briefDescription": "Функция Задача()",
      "detailedDescription": {
        "text": "Возвращает имя текущей задачи",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛьготыИнтервала",
      "internalName": "GetHelpByInterval",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1431
      },
      "briefDescription": "Функция ЛьготыИнтервала( номер интервала )",
      "detailedDescription": {
        "text": "Возвращает строку для льгот, действующих в течение месяца расчета на интервале дат с указанным номером (счет от 1 до значения, возвращаемого функцией КоличествоИнтервалов) Строка имеет вид запись_документа\u003dльгота,запись_документа2\u003dльгота2... Если номер интервала 0, возвращаются льготы, действующие на текущем интервале расчета (ДатНач..ДатКнц) Если встречается несколько записей льгот с одинаковым номером, но разными номерами документа, они все будут записаны в результирующую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаменитьВсе",
      "internalName": "ReplStrAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 693
      },
      "briefDescription": "Функция ЗаменитьВсе( строка, что заменить, на что заменить )",
      "detailedDescription": {
        "text": "Заменяет в строке все вхождения одной подстроки на новую, даже если старая подстрока входит в новую. Например: ЗаменитьВсе( \"Ехал Секо через реку\",\"ре\", \"куре\" ) \u003d \"Ехал Секо чекурез куреку\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СкомпилироватьПравило",
      "internalName": "CompileRull",
      "sourceLocation": {
        "file": "Kvplata/source/rull.cpp",
        "line": 229
      },
      "briefDescription": "Функция СкомпилироватьПравило( id_rull )",
      "detailedDescription": {
        "text": "Компилирует существующее правило в таблице \"Правила операций\" с row_id id_rull",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АдресЛицевогоПлотно",
      "internalName": "GetLSAddressShort",
      "sourceLocation": {
        "file": "Kvplata/source/func_address.cpp",
        "line": 19
      },
      "briefDescription": "Функция АдресЛицевогоПлотно( объект )",
      "detailedDescription": {
        "text": "Если есть объект Итератор, то адрес добывается из него. В противном случае из объекта, пришедшего аргументом Если объект содержит запись из таблицы Лицевые счета, возвращает адрес соответствующего объекта (строку) ( пишется плотно д.N кв.N ) В противном случае (нет записи в объекте или запись из другой таблицы) возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЛицо0",
      "internalName": "SetFace0",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 818
      },
      "briefDescription": "Функция УстановитьЛицо0( позиция )",
      "detailedDescription": {
        "text": "Устанавливает в программе Лицо0 организацией с row_id позиция Если в качестве параметра передавать -1, то устанавливает Лицо0 из конфигурации в !stack_ini",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СброситьПараметрыФильтра",
      "internalName": "ResetParamFiltr",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2879
      },
      "briefDescription": "Функция СброситьПараметрыФильтра( имя_окна_или_диалога, имя_выборки )",
      "detailedDescription": {
        "text": "Сбрасывает дополнительное условие фильтрации в выборке sel_name окна win_name, установленное до этого функцией УстановитьПраметрыФильтра, также очищает список параметров и перенабирает выборку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСортировку",
      "internalName": "SetSort",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 722
      },
      "briefDescription": "Функция УстановитьСортировку( Объект, Список_полей[, Разрешение_дубликатов] )",
      "detailedDescription": {
        "text": "Устанавливает в выборке, которой принадлежит объект, сортировку по временному индексу из указанных полей Поля в списке должны быть разделены запятой Если в качестве списка передается пустая строка, сортировка сбрасывается Если передается строка \"*\", устанавливается сортировка по временному индексу, объявленному в ресурсеЕсли последний параметр 1, разрешено наличие записей с одинаковыми значениями ключей",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьСекцию",
      "internalName": "ReadSection",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 161
      },
      "briefDescription": "Функция ПрочитатьСекцию( имя конфигурационного файла (может содержать путь)",
      "detailedDescription": {
        "text": ", имя секции ) Читает указанную секцию указанного файлаЕсли имя начинается с двоеточия, читается из файла по указанному путиЕсли имя файла не начинается с двоеточия, содержащийся в нем путь отбрасывается, далее ищется файл с указанным именем в каталоге словарей пользователя, при отсутствии - в каталоге словарей инсталляции Если файл с таким именем будет найден, читается секция из базы (если конфигурация в базе) либо из найденного файла Если файл не будет найден, читается файл по полному переданному путиВозвращает объект с элементами, имена которых совпадают с именами параметров конфигурационного файла, значения - строковые значения параметровЕсли нет такого конфигурационного файла или такой секции, вернет пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьДанныеПамятиДиалога",
      "internalName": "RefreshDialogMemory",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1170
      },
      "briefDescription": "Функция ОбновитьДанныеПамятиДиалога( имя окна диалога )",
      "detailedDescription": {
        "text": "Производит повторную инициализацию данных диалога, хранимых в памяти (используется в диалогах платежей и т.п. - сумма, число, свободный номер...)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыделитьУзел",
      "internalName": "SelectTreeItemName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1107
      },
      "briefDescription": "Функция ВыделитьУзел( имя_окна, имя_дерева, имя_узла_или_ид )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяВыборкиПоКлассу",
      "internalName": "GetSelectNameByAPIClass",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4492
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Возвращает имя выборки по указанному API классу\n*\n* @Функция ИмяВыборкиПоКлассу( Строка apiКласс )@\n*\n* @param[in] apiКласс API класс\n* @return имя выборки, если такая найдена, иначе пустую строку\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "СуммироватьПеременные",
      "internalName": "AddObject",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_REP.CPP",
        "line": 239
      },
      "briefDescription": "Функция СуммироватьПеременные(набор-приемник, объект-источник,...)",
      "detailedDescription": {
        "text": "Суммирует переменные из набора со значениями соответствующих числовых переменных или полей записи объекта-источника Новые переменные в набор не добавляются",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ServerInfo",
      "internalName": "SQLDriverInfo",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 42
      },
      "briefDescription": "Функция ServerInfo( [сессия] )",
      "detailedDescription": {
        "text": "В качестве необязательного параметра сессия надо передавать объект, созданный с помощью функции СессияБД Возвращает объект с информацией о текущей сессии на сервере. Содержит переменные ConnectionID - номер пользовательской сессии User - имя пользователя Server - имя сервера Schema - база и схема Type - тип сервера",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СкрытьФлаги",
      "internalName": "HideClusterButtons",
      "sourceLocation": {
        "file": "MuzzleJ/Source/CLUSTER.CPP",
        "line": 288
      },
      "briefDescription": "Функция СкрытьФлаги( имя_окна_диалога, имя_флагов, метка_для_показа )",
      "detailedDescription": {
        "text": "В указанном окне скрывает все флаги CheckBox с указанным именем, у которых текст начинается на ~m, где m - произвольный символ Если имя_окна_диалога \u003d\u003d \"\", то берет активный диалог",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиЛицо",
      "internalName": "FindFace",
      "sourceLocation": {
        "file": "Sbis32/source/PROVOD.CPP",
        "line": 122
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДобавитьВКомплект",
      "internalName": "BirtROAddInReporter",
      "sourceLocation": {
        "file": "MuzzleJ/Source/FRWrapper.cpp",
        "line": 3099
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЕстьФайл",
      "internalName": "FCanOpen",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 52
      },
      "briefDescription": "Функция ЕстьФайл( путь с именем, режим открытия )",
      "detailedDescription": {
        "text": "Проверяет,может ли быть открыт файл с данным именем на чтение(режим \"ч\"), запись(режим \"з\") или чтение/запись(режим \"чз\" или \"зч\") проверяет существование каталога, если в режиме есть \"д\" Вернет 1 - можно, 0-нет",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НачислениеПени",
      "internalName": "ShowCalcPeni",
      "sourceLocation": {
        "file": "KvplataCalc/source/FUNCTION.CPP",
        "line": 33
      },
      "briefDescription": "Функция НачислениеПени( номер лицевого счета, расчетный месяц [, признак необходимости детализации по услугам] )",
      "detailedDescription": {
        "text": "Возвращает массив с подобъектами 10001,10002,10003..., в каждом элементе переменные: ЗаМесяц, ДатаПлатежа, ПениСчитатьОт, СуммаПлатежа, СуммаПени, СторноПени \u003d 0 Если указана детализация по услугам (любое значение), в каждом элементе дополнительно будет переменная НомерУслуги, а также будут выведены записи сторнирования пени по услугам (в них СторноПени !\u003d 0, есть НомерУслуги, других переменных нет) Фактически это повторение начисления пени на оплачиваемую сумму Кроме подобъектов в массив помещаются две переменные ВходящееСальдоПени и ПениСторно",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьСтроку",
      "internalName": "CreateStringObj",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 21
      },
      "briefDescription": "Функция СоздатьСтроку( строка_источник[,строка...] )",
      "detailedDescription": {
        "text": "Создает длинную строку из строк-источников (обычных или длинных строк) Строки соединяются последовательно",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьФайл",
      "internalName": "WriteTxtObjFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 455
      },
      "briefDescription": "Функция ЗаписатьФайл( объект_файл, записываемые_строки_или_объекты_строки )",
      "detailedDescription": {
        "text": "Строки соединяются, после последней пишет CR/LF",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОстановитьАудио",
      "internalName": "OurStopSound",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2483
      },
      "briefDescription": "функция \"ОстановитьАудио()",
      "detailedDescription": {
        "text": "\" останавливает воспроизведение текущего аудио-файла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СтеретьСостояние",
      "internalName": "ClearStatus",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1187
      },
      "briefDescription": "Функция СтеретьСостояние()",
      "detailedDescription": {
        "text": "Возвращает отображение в строке состояния пути к базе данных или название схемы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходГрупповогоСчетчика",
      "internalName": "ValuesGroupCounters",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 626
      },
      "briefDescription": "Функция РасходГрупповогоСчетчика( [режим] )",
      "detailedDescription": {
        "text": "Загружает данные о распределенном расходе по групповым счетчикам, без расхода по индивидуальным, за месяц расчета Возвращает объект, содержащий подобъекты - номера групп или услуг. Это определяется параметром режим - если он не опущен и содержит символ У, возвращаются итоги по услугам, иначе - по группам Внутри содержатся переменные Расход, Сумма (суммы полей по группам/услугам), Месяцев (максимальное значение для группы/услуги) При отсутствии групповых счетчиков масcив будет пустой",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВСНК",
      "internalName": "CSaldoStartKredit",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 360
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "XmlText",
      "internalName": "CreateXmlText",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 579
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Command",
      "internalName": "CreateCommand",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 889
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Command( запрос[, размер буфера для наборов параметров][, типы параметров] ) Создает буферизованный исполнитель запросов (пригоден для Insert, Update, Delete и т.п.) По умолчанию размер буфера 1. Сначала помещает параметры запроса в буфер, только при его заполнении все запрос с каждым из наборов параметров в одной транзакции выполняется на сервере. Для выполнения запроса при не полностью заполненном буфере вызвать Объект.Завершить()Типы параметров:\nотсутствуют или пустая строка при отсутствии параметров;может быть одна переменная:\nмассив - типами параметров выступают типы переменных, параметры в запрос будут передаваться в алфавитной \n последовательности имен переменных;строка/длинная строка вида \"имя, тип [,...]\" - параметры сохраняются в последовательности их нахождения в строке;\nнесколько пар строк \"имя\", \"тип\" [,...] - поля сохраняются в последовательности пар В любом случае имена полей бесполезны В строках в качестве типов полей понимает ANSRI$DFM",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СворачивающиесяПанели",
      "internalName": "GetExpandBarAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExpandBar.cpp",
        "line": 510
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СварачивающиесяПанели. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИнициализацияЗаписиВыборки",
      "internalName": "InitSelTableRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 358
      },
      "briefDescription": "Функция ИнициализацияЗаписиВыборки( объект )",
      "detailedDescription": {
        "text": "Вызывает в выборке записи событие recINIT (в т.ч. с передачей в HDL - обработчик) Если в объекте нет записи или запись не от выборки - не делает ничего",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеУслуги",
      "internalName": "GetServiceDatasAll",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_state.cpp",
        "line": 281
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ДанныеУслуги Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Null",
      "internalName": "CreateNull",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 914
      },
      "briefDescription": "Функция Null()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВРимские",
      "internalName": "ToRim",
      "sourceLocation": {
        "file": "Kvplata/source/PASPFUNC.CPP",
        "line": 19
      },
      "briefDescription": "Функция ВРимские( строка с числом )",
      "detailedDescription": {
        "text": "Преобразует число, содержащееся в строке, в римское (ведущие пробелы удаляются, все символы, идущие после арабского числа, дописываются в конец римского, например, 10-ГР преобразует в X-ГР)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокБаз",
      "internalName": "ListBase",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1375
      },
      "briefDescription": "Функция СписокБаз()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Макс",
      "internalName": "_Max",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 602
      },
      "briefDescription": "Функция Макс( число, число )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЗаголовкиHTTP",
      "internalName": "SetHTTPHeaders",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3526
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БуферОбмена",
      "internalName": "GetClipboardObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_clipboard.cpp",
        "line": 81
      },
      "briefDescription": "функция БуферОбмена() - создает объект для работы с Clipboard\u0027ом",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОсновнойКонфигФайл",
      "internalName": "GetMainIniFileObject",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1898
      },
      "briefDescription": "функция ОсновнойКонфигФайл() - создает объект для работы с главным INI файлом.",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьУзелПоИндексу",
      "internalName": "GetTreeItemByID",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1129
      },
      "briefDescription": "Функция ПолучитьУзелПоИндексу( имя_окна, имя_дерева, ид_узла )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПараметрыФильтра0",
      "internalName": "SetParamFiltr0",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2887
      },
      "briefDescription": "Функция УстановитьПараметрыФильтра0( имя_окна_или_диалога, имя_выборки, значение_параметра1 [, значение_параметра2...] )",
      "detailedDescription": {
        "text": "В отличие от предыдущей функции не перенабирает выборку (для использования на событие \"Инициализация\" окна диалога, когда еще не определен номер его записи)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОтладитьРасчет",
      "internalName": "DebugCalc",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1437
      },
      "briefDescription": "Функция ОтладитьРасчет( включить )",
      "detailedDescription": {
        "text": "Устанавливает флаг отладки для расчёта, информация о расчёте будет писаться в консоль или лог включить: 1 - включение отладки 0 - выключение отладки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаполнитьИерархию",
      "internalName": "SQLFillRecursion",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 144
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ЗаполнитьИерархию( имя получателя, имя источника, имя поля иерархии, row_id выбираемого узла [, имя поля для заполнения SORT [, режим заполнения поля SORT [, имя поля для заполнения PATH]]] ) Заполняет таблицу-получатель, содержащую следующие поля: row_id Numeric(10) // значение поля row_id извлеченной записи LEVEL Numeric(10) // уровень в иерархии USERID Numeric(10) // ID пользователя (в таблице содержатся данные разных пользователей Не обязательные поля PATH Varchar(4000) // иерархический путь SORT Varchar(4000) // поле сортировкиСтарое содержимое таблицы для данного пользователя предварительно стирается, если в режиме не установлен флаг 128Заполнение таблицы-получателя производится рекурсивным запросом к таблице-источнику с указанным полем иерархии. Выбирается запись с указанным row_id и все ей подчиненные по указанному полю иерархии В качестве row_id может быть передано число или массив (используются значения элементов)Если не опущено имя поля для заполнения SORT, в таблице-получателе должно присутствовать поле с именем SORT. Оно заполняется следующим образом\nесли это row_id, в поле SORT очередной записи заносится значение из родительской записи, после которого ставится знак |, а далее пишется строковое представление row_id текущей записиесли это другое поле, в поле SORT очередной записи заносится значение из родительской записи, после которого ставится знак |, а далее пишется строковое представление этого поля в текущей записи, из которого исключены пробелы Если заполнение поля SORT не требуется, а PATH нужно, указать пустую строку в качестве имени\nРежим заполнения поля SORT определяет, в каком виде переносятся данные из указанного поля в поле SORT Представляет собой совокупность битовых флагов 1 - просто преобразовать в строку через convert( varchar(4000), ... ) 2 - преобразовать в строку из 10 символов с выравниванием вправо через str(...) 4 - дописать в конец row_id 8 - удалить лишние пробелы 16 - дописать слева \u0027|\u0027 для сохранения значимости ведущих пробелов 64 - поле owner_id будет заполнятся номерами записей элементов, с которых началось построение \"дерева\" 128 - не очищать таблицу-получатель перед заполнением (по умолчанию-очищается)Флаги 1 и 2 несовместимы, при указании обоих флагов действует флаг 1.Типовые значения mode 0 - используется для row_id 6 - используется для Лицевые счета.Номер 13 - используется для полей типа НаименованиеЕсли не опущено имя поля для заполнения PATH, в таблице-получателе должно присутствовать поле с именем PATH. Оно заполняется следующим образом: в поле PATH очередной записи заносится значение из родительской записи, после которого ставится знак |, а далее пишется строковое представление этого поля в текущей записиЕсли таблицей-источником выступает Лицевые счета, выполняется позадачная фильтрация по полю Управление Пример: ЗаполнитьИерархию( \"temptable\", \"Лицевые счета\", \"Счета\", -10, \"row_id\" );",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "KeysOf",
      "internalName": "ObjectKeysIterator",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/VARCOL.CPP",
        "line": 1400
      },
      "briefDescription": "Функция KeysOf( объект )",
      "detailedDescription": {
        "text": "Возвращает прямой итератор по ключам объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьКореньВыборки",
      "internalName": "SetRootDataView",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 535
      },
      "briefDescription": "Функция УстановитьКореньВыборки( имя_окна, имя_выборки, позиция )",
      "detailedDescription": {
        "text": "Устанавливает начальным корнем в иерархическом браузере запись с row_id позиция",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапуститьВПотоке",
      "internalName": "RunInThread",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1302
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаГод",
      "internalName": "ForYer",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 282
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазмерФайла",
      "internalName": "FFileSize",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 165
      },
      "briefDescription": "Функция РазмерФайла( объект_файл )",
      "detailedDescription": {
        "text": "Для объекта, связанного с открытым файлом, возвращает размер файла Если файл не открыт, вернет -1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РежимОтображенияЗаписей",
      "internalName": "SelectionMode",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2533
      },
      "briefDescription": "Функция РежимОтображенияЗаписей( имя окна или диалога, имя выборки )",
      "detailedDescription": {
        "text": "Возвращает 0, если отображаются все записи в указанном броузере, 1, если отображаются только выбранные записи, -1, если нет такого окна или такого броузера в окне",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЧтениеШтрихКода",
      "internalName": "ReadSCode",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 164
      },
      "briefDescription": "Функция ЧтениеШтрихКода( Строка, Позиция, Число символов )",
      "detailedDescription": {
        "text": "Читает штрих-код из строки из указанного Числа символов, начиная с указанной Позиции (счет от 0) Возвращает числовое значение",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "SQLName",
      "internalName": "SQLTableName",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 22
      },
      "briefDescription": "Функция SQLName( имя[, сессия] )",
      "detailedDescription": {
        "text": "Возвращает преобразованное согласно требованиям сервера имя таблицы (например, ограничение числа символов) В качестве необязательного параметра сессия надо передавать объект, созданный с помощью функции СессияБД",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЭтоУзел",
      "internalName": "IsBranchAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1192
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ЭтоУзел. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиИзвлечьЗаписьВыборки",
      "internalName": "FindGetInSelect",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 336
      },
      "briefDescription": "Функция НайтиИзвлечьЗаписьВыборки( объект )",
      "detailedDescription": {
        "text": "Работает, как предыдущая, дополнительно считывает содержимое записи в объект при успешном поиске, при неуспешном объект не изменяется",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучениеИндивидуальногоТарифаДляРасчета",
      "internalName": "GetIndTarif",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 2159
      },
      "briefDescription": "Функция ПолучениеИндивидуальногоТарифаДляРасчета( услуга, дата )",
      "detailedDescription": {
        "text": "Читает сначала индивидуальную калькуляцию (связь на дом) - услуга, дата Если таковой нет, ищет общую калькуляцию Дата - УК, Поставщик; затем Дата - УК, пустой поставщик, затем - Дата- пустая УК, Поставщик, затем - Дата, пустая УК, пустой поставщикВозвращает массив, в котором имеются переменные Значение, Значение2, Значение3, Значение4, а также массивы детализации с именами - номерами услуг, в которых содержится единственный элемент с именем Тариф - значение тарифа в детализации",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КодКоманды",
      "internalName": "GetCmd",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1942
      },
      "briefDescription": "Функция КодКоманды( имя команды )",
      "detailedDescription": {
        "text": "Возвращает код команды",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьСекциюОтчета",
      "internalName": "ExecuteReportSection",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2067
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НазваниеДоступногоКорняАдресов",
      "internalName": "GetAccessAddressRootName",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 750
      },
      "briefDescription": "Функция НазваниеДоступногоКорняАдресов()",
      "detailedDescription": {
        "text": "Возвращает название доступного для редактирования реально имеющегося узла таблицы \"Лицевые счета\" Отслеживаются права только на районы, участки и населенные пункты, если права ограничены жестче, функция неприменима Если права на Адреса проживающих не указаны, а по умолчанию все доступно, или имеются права на редактирование раздела без названия ресурса Адреса проживающих, возвращает \"\" Если есть права на редактирование разделов, но самих разделов нет, возвращает \"\" Если нет прав на редактирование, возвращает \"\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НомерКвартала",
      "internalName": "GetQuart",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 803
      },
      "briefDescription": "Функция НомерКвартала( Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Флаг",
      "internalName": "IsFlag",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 564
      },
      "briefDescription": "Функция Флаг( имя поля, имя флага )",
      "detailedDescription": {
        "text": "Возвращает 1 или 0 в зависимости от того, установлен ли данный флаг в данном поле или нет Если передано не имя поля, возникнет ошибка",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытьДоступКСерверу",
      "internalName": "OpenAccessToServerAdd",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 819
      },
      "briefDescription": "Функция ОткрытьДоступКСерверу( логин, пароль, является ли dbo )",
      "detailedDescription": {
        "text": "Открывает доступ к серверу указанному пользователю Логин должен содержаться в одной из записей таблицы Пользователи Является ли dbo - 0 (нет) или не 0 (да)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "cos",
      "internalName": "FuncCos",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2343
      },
      "briefDescription": "Функция cos(число)",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьСкрипт",
      "internalName": "ExecScript",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2291
      },
      "briefDescription": "Функция ВыполнитьСкрипт( имя_файла, имя_функции или скрипт, режим )",
      "detailedDescription": {
        "text": "Выполняет функцию скрипта из указанного файла с указанным именем режим - режим обработки ошибок: 0: сообщать об ошибке и прерывать выполнение функции 1: сообщать об ошибке и не прерывать выполнение функции 2: не сообщать об ошибке и записывать ошибку в результат выполнения 3: не сообщать об ошибке и не записывать ошибку Возвращает значение, которое вернула запускаемая функция",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СнятьВыделение",
      "internalName": "ClearMarkPosAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1293
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СнятьВыделение. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьЗаписьДиалога",
      "internalName": "GetDialogRecordAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 988
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПолучитьЗаписьДиалога. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьВыборку",
      "internalName": "MakeSelVarCol",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 23
      },
      "briefDescription": "Функция ПолучитьВыборку( имя выборки )",
      "detailedDescription": {
        "text": "Возвращает объект, основанный на записи выборки В случае ошибки возвращает пустую выборку Проверить можно функцией ИмяТаблицы(объект), при верной работе она возвращает не пустую строку, при ошибке - пустую",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьВыборку",
      "internalName": "CreateSelectObject",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 60
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СоздатьВыборку( имя поля, тип, имя поля, тип,..., 0, имя поля индекса, имя поля 2... Типы полей задаются символом S - целое, I - большое целое N - вещественное, $ - деньги, A - строковое, D - дата В случае необходимости сортировки по убыванию перед именем поля индекса поставить \"-\" Допускается вместо имени и типа поля давать объект, в этом случае все поля из записи объекта добавляются в выборку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Клиент_УстановитьЗначение",
      "internalName": "ClientSetRegValue",
      "sourceLocation": {
        "file": "Kvplata/source/func_registry.cpp",
        "line": 69
      },
      "briefDescription": "Функция Клиент_УстановитьЗначение( name, value )",
      "detailedDescription": {
        "text": "возвращает значение сохраненное в реестр клиента в секции JavaSoft/Prefs name - имя параметра value - сохраняемое значение парметра",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеПотока",
      "internalName": "ThreadData",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 552
      },
      "briefDescription": "Функция ДанныеПотока()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПерерисоватьСИзмененнымФильтром",
      "internalName": "RedrawDlg3",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 98
      },
      "briefDescription": "Функция ПерерисоватьСИзмененнымФильтром( имя окна, имя броузера )",
      "detailedDescription": {
        "text": "Перерисовывает указанный броузер в окне с указанным именем (используется имя из ресурса), если у него изменился фильтр выборки (например, из-за изменения рабочего месяца)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьЭлемент",
      "internalName": "EnableControlName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 414
      },
      "briefDescription": "Функция РазрешитьЭлемент( имя окна, имя элемента )",
      "detailedDescription": {
        "text": "Разрешает элемент у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Принтер",
      "internalName": "GetStrPrinter",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2803
      },
      "briefDescription": "Функция Принтер()",
      "detailedDescription": {
        "text": "Получает имя принтера, выбранного в конфигурации печати",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РаскрытьУзлы",
      "internalName": "ExpandTreeItemID",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1040
      },
      "briefDescription": "Функция РаскрытьУзлы( имя_окна, имя_дерева, ID )",
      "detailedDescription": {
        "text": "раскрывает узлы дерева с ID равными ID",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьУзел",
      "internalName": "SetBranchAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1260
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьУзел. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьДиалог",
      "internalName": "EditDlg",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 524
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "ВыполнитьДиалог( объект ) Вызывает на экран окно диалога, ранее созданное через СоздатьДиалог Возвращает 1, если в диалоге выбрано \"Сохранить\", и 0 при отмене",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Объект",
      "internalName": "CreateObjAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1453
      },
      "briefDescription": "Функция Объект( неопределённый тип )",
      "detailedDescription": {
        "text": "по пришедшему типу вызываются соответствующая функция Объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяВыборки",
      "internalName": "SelTableName",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 546
      },
      "briefDescription": "Функция ИмяВыборки( объект )",
      "detailedDescription": {
        "text": "Если объект содержит запись выборки, возвращает ее имя, иначе возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КонвертироватьКонфигурацию",
      "internalName": "ConvertConfiguration",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 533
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "isNull",
      "internalName": "FieldIsNull",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 899
      },
      "briefDescription": "Метод isNull( объект, имя поля )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьКаталогОтчетов",
      "internalName": "SetReportDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1038
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьКаталогОтчетов( индекс или подстрока ) устанавливает переменную в текущем Executor \"КаталогОтчетовПользователя\", из которой потом возвращает КаталогОтчетов() Индекс не может быть равен 0. Если индекс \u003c 0, то устанавливает \"КаталогОтчетов\" в порядке перечисления в stack.ini. Если индекс \u003e 0 - то в обратном порядке Если вместо индекса указана подстрока, то в порядке перечисления в stack.ini ищет подстроку в каталоге и если находит, то устанавливает данный каталог как \"КаталогОтчетов\" Например, КаталогПрограммы() \u003d \"C:\\\\Stack.Srv\\\\Bin\\\\0\\\\\" а в stack.ini указано: RPT\u003d..\\..\\RPT \n RPT\u003d..\\..\\RPT\\SBYT \n RPT\u003d..\\..\\CLIENT_RPT то УстановитьКаталогОтчетов( -1 ) установит КаталогОтчетов в \"C:\\\\Stack.Srv\\\\RPT\\\\\" УстановитьКаталогОтчетов( -3 ) установит КаталогОтчетов в \"C:\\\\Stack.Srv\\\\CLIENT_RPT\\\\\" УстановитьКаталогОтчетов( 1 ) установит КаталогОтчетов в \"C:\\\\Stack.Srv\\\\CLIENT_RPT\\\\\" УстановитьКаталогОтчетов( \"SBYT\" ) установит КаталогОтчетов в \"C:\\\\Stack.Srv\\\\RPT\\\\SBYT\\\\\" а вызов УстановитьКаталогОтчетов(\"sbyt\") не произведет никаких действий, т.к. регистр подстроки должен совпадать с указанным в stack.ini регистром каталога",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СправочникСтрокаСоздания",
      "internalName": "ManualCreateString",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 1022
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СправочникСтрокаСоздания( код справочника ) Возвращает строку вариантов, разделенных \n, необходимую для создания ComboBox для выбора из справочника с данным кодом (в целочисленное поле) Если справочника с таким кодом нет, возвращается пустая строка",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогПрограммы",
      "internalName": "GetProgramDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 872
      },
      "briefDescription": "Функция КаталогПрограммы()",
      "detailedDescription": {
        "text": "Возвращает название каталога, из которого запущен stack.exe, в конце гарантированно стоит слеш",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеЛьготы",
      "internalName": "GetHelpDatasAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 502
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ДанныеЛьготы. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "DBF2SQLCreate",
      "internalName": "DBF2SQLCreate",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 228
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция DBF2SQLCreate( имя таблицы, имя файла с путем[, размер Memo-полей] ) Создает указанную таблицу, предварительно удаляя ранее имевшуюся Имя таблицы должно быть написано в ~~, если таблица в текущей базе, в противном случае должны быть указаны имя базы и схемы Если строка размера Memo-полей опущена, они не создаются Иначе они создаются как varchar, эта строка должна задавать их размер:\nлибо в виде \"Поле,Размер,Поле2,Размер...\" - размер задан для всех полей, если какие-то поля пропущены, они не будут созданылибо в виде \"Размер_по_умолчанию,Поле,Размер,Поле2,Размер...\" - размер задан для части полей, а для остальных применяется размер по умолчанию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьКорень",
      "internalName": "SetRootAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1353
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьКорень. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокДисковСервера",
      "internalName": "GetAllDisk",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1251
      },
      "briefDescription": "Функция СписокДисковСервера( тип_диска )",
      "detailedDescription": {
        "text": "Возвращает полный список дисков на сервере в соответствии с тип_диска тип_диска может принимать следующие значения: 1 - тип неизвестен 2 - диск неработоспособен 4 - съемный 8 - жесткий 16 - сетевой 32 - CD 64 - RAM допускается любая комбинация этих значений",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбъектВыборка",
      "internalName": "CreateSelectionObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4471
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет создать объект выборка\n*\n* @Функция ОбъектВыборка( Строка имяВыборки )@\n*\n* @param[in] имяВыборки имя выборки\n* @return SelectionObject Если событие вызвано, значение, которое вернул обработчик, иначе NULL\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучениеСтроки",
      "internalName": "SQLGet",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1518
      },
      "briefDescription": "Функция ПолучениеСтроки( объект-соединение )",
      "detailedDescription": {
        "text": "Возвращает объект с переменными, имена которых совпадают с именами полей, а значения - со значениями полей. Типы переменных соответствуют тем, что возвращает функция ФорматРезультата в переменной ТипВПеременную (Строка,Число,Дата) Если соединение не открыто, не выполнен запрос или прочитаны уже все записи, возвращается пустой объект (Размер(о)\u003d\u003d0)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Перерисовать",
      "internalName": "RedrawDlgAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 69
      },
      "briefDescription": "Функция Перерисовать()",
      "detailedDescription": {
        "text": "Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СтроковаяКонстанта",
      "internalName": "GetStringConstant",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 905
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НомерЗаписи",
      "internalName": "ReadRecordNumberAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 938
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция НомерЗаписи. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьФайл",
      "internalName": "DeleteFileMaskAll",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 578
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УдалитьФайл. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТипДанных",
      "internalName": "ObjType",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 53
      },
      "briefDescription": "Функция ТипДанных( имя переменной или выражение[,имя строковой переменной для возврата опций] )",
      "detailedDescription": {
        "text": "- возвращает тип переменной или выражения в виде строки. Возможные значения: \"Дата\", \"Деньги\", \"Число\", \"Строка\", \"Длинная строка\", \"Объект\", \"Неизвестный\". Для типа \"Объект\" в случае наличия переменной опций возвращает признак наличия записи в объекте \"Есть\"/\"Нет\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Добавить",
      "internalName": "InsTableRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 735
      },
      "briefDescription": "Функция ВнестиЗапись( объект )",
      "detailedDescription": {
        "text": "Вносит в таблицу или выборку (не содержащую полей типа \"Указатель\" или, по крайней мере, не содержащую в индексе полей из таблиц, с которыми осуществляется связь через активирование связей) новую запись, возвращает ее номер Вносятся и поля связи, для установки полей иерархии в значение \"Узел\" присвоить переменной ф_Узел значение 1 ( ф-имя поля иерархии) Для полей условной связи со стороны 1 определить переменную ф_Таблица, ей присвоить имя связанной таблицы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КонтрольнаяСумма",
      "internalName": "CalcCRC",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2314
      },
      "briefDescription": "Функция КонтрольнаяСумма( строка )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НазваниеАдресногоУровня",
      "internalName": "AddressLevelName",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 761
      },
      "briefDescription": "Функция НазваниеАдресногоУровня( тип уровня )",
      "detailedDescription": {
        "text": "Возвращает название адресного уровня по его типу (значению в поле Тип таблицы Лицевые счета)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТекВремя",
      "internalName": "CurrentTime",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 769
      },
      "briefDescription": "Функция ТекВремя()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОстановитьОтладчик",
      "internalName": "StopDebugServer",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/MLangHelpers.cpp",
        "line": 721
      },
      "briefDescription": "Функция ОстановитьОтладчик()",
      "detailedDescription": {
        "text": "Останавливает отладочный сервер. Если отладочный сервер не запущен, то функция ничего не делает.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "МесяцПрописью",
      "internalName": "MonthName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 834
      },
      "briefDescription": "Функция МесяцПрописью( Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныйКореньВыборки",
      "internalName": "GetAccessSelectionRoot",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 585
      },
      "briefDescription": "Функция ДоступныйКореньВыборки( имя_ресурса, имя_главной_таблицы, имя_поля_иерархии, имя_текстового_поля_для_строки_иерархии[, права_доступа][, стартовый_корень] )",
      "detailedDescription": {
        "text": "Получает номер доступного для записи корня в указанной выборке Если нет никаких ограничений, то возвращается -10. Параметр стартовый_корень определяет начальную папку для определения прав, должен совпадать со СтартовыйКорень в выборке Если корень недоступен, то возвращается номер записи указанной таблицы с минимальным уровнем вложенности по иерархии по указанному полю. Сначала находит строку прав с минимальным числом точек, затем находит реальную запись папки, соответствующую этому пути, для чего разбивает строку по точкам, поочередно ищет каждую папку в ее владельце, поиск производится по значению поля имя_текстового_поля_для_строки_иерархии Если же доступных для права_доступа папок нет в принципе, то возвращается -1.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоляЗаписи",
      "internalName": "GetFields",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 998
      },
      "briefDescription": "Функция ПоляЗаписи(объект)",
      "detailedDescription": {
        "text": "Возвращает массив с данными о полях записи объекта. Индексы 1,2,..., в каждом индексе элементы Имя (имя поля), Тип поля (значения \"Строка\", \"Текст\", \"Целое\", \"Большое целое\", \"Флаги\", \"Переключатель\", \"Перечисляемое\", \"Дата\", \"Вещественное\", \"Двоичное\", \"Время\", \"Деньги\", \"Указатель\", \"1-1\", \"1-M\", \"M-1\", \"Условная 1\", \"Условная М\", \"Иерархия\", \"Неизвестный\" ), Тип данных (\"Строка\", \"Число\", \"Дата\", \"Время\", \"Указатель\", \"Неизвестный\" ) Если в объекте нет записи, возвращается пустой массив",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиЗаписьТаблицыСКонца",
      "internalName": "FindRecNumBack",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 280
      },
      "briefDescription": "Функция НайтиЗаписьТаблицыСКонца( объект, имя индекса[, искать от[[,имена полей узлов][,длина ключа]] )",
      "detailedDescription": {
        "text": "Возвращает номер найденной записи или -1, если не нашел Поля связи можно установить прямо переменными в объекте Если индекс содержит поля иерархии и они имеют значение \"Узел\", имена соответствующих полей следует перечислить в списке \"Имена полей узлов\" (это должны быть строковые константы, допустимо использовать \"\" для условного внесения выражением типа Узел(объект,\"имя поля\") ? \"имя поля\":\"\") Если параметр \"Искать от\" опущен или -1 - поиск идет от начала таблицы, иначе - от указанного номера записи При успешном поиске в \"Искать от\" будет занесен номер найденной записи (для последующего продолжения поиска), если это имя переменной Если присутствует значение \"Длина ключа\", при поиске проверяется только данное число начальных байт в ключе, а не все его поля (поиск по начальной части индекса)Запись в объекте не повреждается",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьКоллекцию",
      "internalName": "ClearRecCol",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 528
      },
      "briefDescription": "Функция ОчиститьКоллекцию( объект, режим )",
      "detailedDescription": {
        "text": "Очищает коллекцию или выборку, связанную с записью объекта При режиме Э из коллекции записи удаляются, а у выборки очищается экран и инициируется повторный набор записей (даже при выборке без таблицы с только дополнительными полями, При режиме Т удаляет записи и из коллекции, и из выборки (удаляются записи из соответствующей таблицы)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СложениеДанных",
      "internalName": "AddObjectVars",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 329
      },
      "briefDescription": "Функция СложениеДанных( объект-получатель, объект-источник )",
      "detailedDescription": {
        "text": "Добавляет к одноименным переменным объекта-получателя содержимое переменных объекта-источника Поля записей (если они есть) игнорируются Если в источнике есть подобъекты, такие же подобъекты ищутся в получателе, а при отсутствии создаются (только без записей) Складываются переменные не только внутри самих объектов, но и внутри подобъектов Если в получаетеле нет переменных, они создаются Функция суммирует только переменные типов ЧИСЛО и ДЕНЬГИ",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ФлагиПерезагрузкиРесурсов",
      "internalName": "GetReloadFlags",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 404
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "МассивНомеровУслуг",
      "internalName": "FillServArrCat",
      "sourceLocation": {
        "file": "Kvplata/source/servcat.CPP",
        "line": 206
      },
      "briefDescription": "Функция МассивНомеровУслуг( номер записи в таблице Категории услуг )",
      "detailedDescription": {
        "text": "Возвращает массив, содержащий два вложенных массива ВУ - содержит в себе элементы - следующий уровень входящих в категорию услуг или подкатегорий. Имена элементов 1,2,3... Значение каждого элемента - название подкатегории или услуги (если в исходной категории не было подкатегорий) НУ - массив с номерами услуг Содержит элементы с именами - номерами услуг, значения элементов - имена элементов в ВУ (это указание на категорию, в которую входит услуга) Если одна услуга входит в несколько категорий, внутри объекта создается подобъект ОшибкаКатегорийУслуг, внутрь вставляется подобъект с именем - номером такой ошибочной услуги",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "МесяцПрописью",
      "internalName": "MonthNameNum",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 848
      },
      "briefDescription": "Функция МесяцПрописью( число )",
      "detailedDescription": {
        "text": "Переводит числа 1-12 в название месяца",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогиФункций",
      "internalName": "GetFuncsDirs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 968
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КодироватьСтроку",
      "internalName": "CryptString",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 586
      },
      "briefDescription": "Функция КодироватьСтроку( строка, формат[, кодировка] )",
      "detailedDescription": {
        "text": "Кодирует данные длинной строки в указанный формат \"формат\" указывает в каком виде будет возвращен результат(длинная строка): 1 или \"base64\" - base64 4 или \"hex\"- в виде шестнадцатеричных чисел с пробелами 12 или \"hexraw\" - в виде шестнадцатеричных чисел 15 или \"url\"- URLEncoded",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БольшоеЧисло",
      "internalName": "ToBigInt",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1023
      },
      "briefDescription": "Функция БольшоеЧисло( переменная любого типа )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетПолный",
      "internalName": "CalcAll",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 31
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функции пакетного расчета \nФункция РасчетПолный( месяц ) Если указанный месяц открыт, выполняет расчет начислений и сальдо фонда за него, возвращает пустую строку Если месяц закрыт или пользователь прерывает процесс расчета, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БлокироватьЗапись",
      "internalName": "LockRecordHour",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 558
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьЭлемент",
      "internalName": "EnableControlCurrent",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 372
      },
      "briefDescription": "Функция РазрешитьЭлемент( имя элемента)",
      "detailedDescription": {
        "text": "Разрешает элемент у текущего окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УКТекущегоЛицевого",
      "internalName": "GetControlCompany",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1896
      },
      "briefDescription": "Функция УКТекущегоЛицевого( услуга, дата )",
      "detailedDescription": {
        "text": "Возвращает номер записи управляющей компании, к которой принадлежит текущий лицевой на указанную дату Если у указанной услуги есть прямой договор или своя УК - возвращаеттся номер записи данной организации Иначе - номер записи общей для лицевого УКПо умолчанию можно прочесть УК только за период расчета. Если в !stack_ini в секции [AppConfig] определить константу LoadProvidersToCalcFrom\u003dдд.мм.гггг, можно будет прочесть УК за период с указанной даты до окончания периода расчета",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "View",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Label",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ComboBox",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "CheckBoxes",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Button",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "CheckBox",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "RadioButton",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ListBox",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Editor",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Browser",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "DebugBrowser",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "TreeBrowserEx",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Group",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Panel",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ExpandBar",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "TabControl",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ProgressBar",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "SashForm",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "HtmlBrowser",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "HtmlEditor",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ImageView",
      "internalName": "GetViewObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3193
      },
      "briefDescription": "функция View( имя_группы, имя_элемента )",
      "detailedDescription": {
        "text": "создает объект ViewObject для доступа к его свойствам и методам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЭкспортироватьINIФайлИзБазы",
      "internalName": "ExportINIFromDb",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 236
      },
      "briefDescription": "Функция ЭкспортироватьINIФайлИзБазы( имя_файла )",
      "detailedDescription": {
        "text": "Сохраняет параметры в виде ini.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СНачГода",
      "internalName": "FirstYer",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 284
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьМассив",
      "internalName": "CreateObj",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Json/Json_muzzle.cpp",
        "line": 92
      },
      "briefDescription": "Функция СоздатьМассив()",
      "detailedDescription": {
        "text": "Может быть до 5-ти аргументов, 4 из них - Флаги создания массива, 5-й - имя объекта 1 - регистр 2 - сортировка 3 - не проставлять Executor 4 - многопоточность 5 - имя объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетПрошлого",
      "internalName": "CalcPast",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 1491
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция РасчетПрошлого( месяц, режим ) Выполняет перерасчет за прошлые месяцы платежей, ведомостей индивидуальных счетчиков, актов качества Режим - строка, определяет, что рассчитывается\nесли содержится буква \"П\" или \"п\" - платежи\"К\" или \"к\" - акты качества\"И\" или \"и\" - ведомости индивидуальных счетчиков\"R\" - таблица Протокол перерасчетов\"Г\" - расчет лицевых у которых произошло деление группового счетчика в закрытых месяцах При успешном завершении расчета возвращает пустую строку Если пользователь прерывает расчет, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПодкаталогиКаталога",
      "internalName": "ReadSubDirectory",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1305
      },
      "briefDescription": "Функция ПодкаталогиКаталога( путь каталога, регистр )",
      "detailedDescription": {
        "text": "Читает список подкаталогов в указанном каталоге, Возвращает объект с идексами 1,2,3..., значения элементов - имена подкаталогов (без пути) если регистр\u003d1, то имена файлов будут возвращены в нормальном регистре",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьКолонку",
      "internalName": "DelColumnAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1526
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УдалитьКолонку. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяТаблицы",
      "internalName": "ReadTableName",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 967
      },
      "briefDescription": "Функция ИмяТаблицы( объект )",
      "detailedDescription": {
        "text": "Возвращает имя таблицы, к которой относится запись объекта Если в объекте нет записи, вернет \"\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнестиЗапись",
      "internalName": "InsTableDetailRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 753
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ВнестиЗапись. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетПрошлогоНаборЛС",
      "internalName": "CalcPastFromTable",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 1498
      },
      "briefDescription": "Функция РасчетПрошлогоНаборЛС( таблица_с_ЛС, месяц, режим )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СодержимоеКаталога",
      "internalName": "ReadDirectory",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1269
      },
      "briefDescription": "Функция СодержимоеКаталога( путь_и_маска_файлов, регистр )",
      "detailedDescription": {
        "text": "Читает список файлов в указанном каталоге (подкаталоги игнорируются), отвечающих указанной маске Возвращает объект с идексами 1,2,3..., значения элементов - имена файлов (без пути) если регистр\u003d1, то имена файлов будут возвращены в нормальном регистре",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеПоСчетчику",
      "internalName": "GetCounterData",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 992
      },
      "briefDescription": "Функция ДанныеПоСчетчику( НомерУслуги [, ДатНач [,ДатКнц]] )",
      "detailedDescription": {
        "text": "Проверяет, есть ли в указанном интервале установленный счетчик на данную услугу. Если не задана ДатКнц - то вместо нее берется последнее число от рассчитываемого месяца. Если не задан ДатНач - то вместо нее берется первое число рассчитываемого месяца. Если счетчик есть, то возвращает объект, содержащий поля: ДатаПоверки, ДатНач, ДатКнц, ПозицияСчетчика (номер записи в таблице Список объектов), ЗаводскойНомер, Разрядность, Тарифность, Коэффициент Если в текущем интервале счетчик на данную услугу не дейстствует, то возвращает объект, содержащий пустую ДатНач",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыбратьЗаписиВОкне",
      "internalName": "OpenDataViewWithCond",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2577
      },
      "briefDescription": "Функция ВыбратьЗаписиВОкне( Имя окна, Имя выборки, Массив с номерами записей таблицы )",
      "detailedDescription": {
        "text": "Отображает только переданные в массиве записи в выборке окна (в режиме Ctrl-F). Вернет 0 при успешном выполнении, -1, если нет такого окна, нет такой выборки, передан пустой массив записей",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазвернутьИерархию",
      "internalName": "CtrlAPressed",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 511
      },
      "briefDescription": "Функция РазвернутьИерархию( имя_окна, имя_выборки, устаналивать_поз, перенабрать )",
      "detailedDescription": {
        "text": "разворачивает/сворачивает иерархию выборки в окне если устаналивать_поз \u003d\u003d 1, то после разворота иерархии будет произведено позиционирование на текущую запись (msgSET_POS) если перенабрать \u003d\u003d 1, то разврот иерархии будет произведен с перенабором выборки для моментального отображения результата",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеГрупповыхСчетчиковНаИнтервале",
      "internalName": "ObjectGroupStateI",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1618
      },
      "briefDescription": "Функция СостояниеГрупповыхСчетчиковНаИнтервале( номер_интервала, услуга [,первый_месяц_периода [, последний_месяц_периода]] [,режим])",
      "detailedDescription": {
        "text": "Режим определяет, состояние каких счетчиков читается: 1 или опущен - групповых, 0-индивидуальных, 2-кустовых, 3-групповых и кустовых, 4 - индивидуальных и кустовых",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьИзСловаря",
      "internalName": "ReadDictionary",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 1023
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить информацию из словаря бд\n*\n* @Функция ПрочитатьИзСловаря(Строка имя [, Любое параметр1 [, Любое параметр2]] )@\n*\n* @param[in] имя имя запришиваемой информации\n* @param[in] параметр1 опциональный параметр\n* @param[in] параметр2 опциональный параметр\n*\n* @return информацию из словаря бд\n*\n* имя                параметр1         параметр2         returns\n* версия                                                 версия словаря\n* cписокБазДанных                                        список имен баз данных\n* файловыеГруппы     [*] имя бд                          форматы файловых групп\n* списокТаблиц       [*] имя бд                          список имен таблиц\n* списокТаблиц2      [*] имя бд                          список таблиц с параметрами и полями\n* списокКатегорий    [*] имя бд                          список категорий таблиц\n* форматТаблицы      имя таблицы                         формат таблицы\n* списокПредставлений   [*] имя бд                       список имен представлений\n* форматПредставления   имя представления                формат формат представления\n* форматОграничений  имя таблицы                         форматы ограничений таблицы\n* форматИндексов     имя таблицы                         форматы индексов таблицы\n* форматТриггеров    имя таблицы                         форматы триггеров таблицы\n* синонимы                                               список форматов синонимов\n* функции                                                список форматов функций\n*\n* [*] можно не указывать\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ДоговорУКТекущегоЛицевого",
      "internalName": "GetDogovorControlCompany",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1924
      },
      "briefDescription": "Функция ДоговорУКТекущегоЛицевого( услуга, дата )",
      "detailedDescription": {
        "text": "Возвращает номер записи договора с управляющей компанией, к которой принадлежит текущий лицевой на указанную дату Если у указанной услуги есть прямой договор или своя УК - возвращается номер записи договора с ней Иначе - номер записи договора с общей для лицевого УКПо умолчанию можно прочесть УК только за период расчета. Если в !stack_ini в секции [AppConfig] определить константу LoadProvidersToCalcFrom\u003dдд.мм.гггг, можно будет прочесть УК за период с указанной даты до окончания периода расчета",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапуститьВПотокеСИнтервалом",
      "internalName": "RunInThreadWithInterval",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1364
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Запускает поток, который исполняет указанное выражение с указанной периодичностью\n*\n* @Функция @ЗапуститьВПотокеСИнтервалом(Число интервал, Строка|Объект выражение [, Любое ...параметры])\n*\n* @param[in] интервал период выполнения выражения (отсчет начинается от завершения выполнения выражения)\n* @param[in] выражение выражение для выполнения\n* @param[in] параметры параметры, которые попадут в выражение\n*\n* @returns Число Ид потока или 0 при провале\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "Muzzle_xml_decode",
      "internalName": "Muzzle_xml_decode",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/XmlUtils.cpp",
        "line": 726
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Создает объект на основе строки, содержащей xml\n*\n* @Функция Muzzle_xml_decode( Строка xml [, Строка кодировка [, Число массив] ] )@\n*\n* @param[in] xml строка, по которой будет формироваться объект\n* @param[in] кодировка кодировка переданной строки\n* @param[in] массив формировать коллекцию\n* @return Объект, полученный на основе строки\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "Расчет_Загрузка",
      "internalName": "Calc_Load",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 387
      },
      "briefDescription": "Функция Расчет_Загрузка( номер_записи_из_таблицы_Лицевые_счета_или_массив_таких_номеров, месяц_начала_периода_расчета [,месяц_окончания_периода_расчета][,рассчитывать_сальдо] )",
      "detailedDescription": {
        "text": "Возвращает объект - данные для расчета (который содержит в себе ICalcManager для выполнения расчета за указанный период с загруженными в него данными) Первым аргументом можно передать номер записи любого уровня иерархии, массив таких номеров (значения элементов - row_id записей) или -10 для загрузки данных всего фонда Если опущен месяц_окончания_периода_расчета, данные загружаются за один месяц Период расчета можно задавать не обязательно первыми числами месяцев - функция их корректирует",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытьФайл",
      "internalName": "FOpenFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 94
      },
      "briefDescription": "Функция ОткрытьФайл( путь с именем )",
      "detailedDescription": {
        "text": "Возвращает объект, связанный с данным файлом При невозможности открыть файл создается пустой объект, для которого функция ПозицияВФайле или КонецФайла возвращает -1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СвойствоУслуги",
      "internalName": "GetServiceDataShort",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 123
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "строковые значения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьКоллекцию",
      "internalName": "GetColByNameAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 883
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПолучитьКоллекцию. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Конфигурация",
      "internalName": "GetInitObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 250
      },
      "briefDescription": "Функция Конфигурация( название конфигурационного объекта )",
      "detailedDescription": {
        "text": "Возвращает объект, содержащий переменные из указанного объекта (указывать не имя файла в операционной системе, а название объекта из секции [AdditionalIniFiles] файла !stack_ini) Если такой объект в файле !stack_ini не указан, возвращается объект по умолчанию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьИерархию",
      "internalName": "SQLRemoveRecusion",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 214
      },
      "briefDescription": "Функция ОчиститьИерархию( имя таблицы )",
      "detailedDescription": {
        "text": "Удаляет из указанной таблицы все записи, внесенные текущим пользователемПример: ОчиститьИерархию( \"temptable\" );",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АдресЛицевогоФ",
      "internalName": "GetLSAddressUserFormat",
      "sourceLocation": {
        "file": "Kvplata/source/func_address.cpp",
        "line": 122
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "*  Функция АдресЛицевогоФ( объект, режим_вывода, строка_формата )\n*  Если объект содержит запись из таблицы Лицевые счета, возвращает адрес\n*  соответствующего объекта (строку)\n*  Содержимое строки определяется режимом вывода и строкой формата\n*  Строка формата - способ вывода номера для дома или квартиры (например,\n*  \"%d\" или \"%4d\"\n*  Режим вывода побитно определяет содержимое строки\n*  32768 - выводятся только данные для текущего уровня (остальные биты\n*           игнорируются, кроме формата вывода лицевого счета при выводе\n*           лицевого счета )\n*  1      - название района включается всегда, 0 - только для записи района\n*  2/0    - аналогично для линейного участка\n*  0      - перед номером дома добавляется д.\n*  4      - номер дома выводится без д.\n*  0      - если номер дома 0, не выводится ни д., ни 0\n*                                   (корпус дописывается всегда)\n*  8      -    - \"\" -          выводится д. без нуля, далее корпус\n*  16     -    - \"\" -          выводится д.0, далее корпус\n*  0      - перед номером квартиры добавляется кв.\n*  32     - номер квартиры выводится без кв.\n*  0      - если номер квартиры 0, не выводится ни кв., ни 0\n*                                   (расширение дописывается всегда)\n*  64     -    - \"\" -              выводится кв. без нуля, далее расширение\n*  128    -    - \"\" -              выводится кв.0, далее расширение\n*  0      - для лицевого счета пишется его адрес\n*                  (а для mode\u00260x8000 - только номер)\n*  256    -    - \"\" -                его адрес и в скобках номер\n*  512    -    - \"\" -                л/с номер\n*  1024   -    - \"\" -                Лицевой счет номер (фамилия)\n*  По умолчанию (при режиме 0) для района или линейного участка пишется его\n*  название, а для иных уровней - адрес без района и участка\n*  (т.е. улица д.Номер Корпус кв.Номер Поле)\n*  Если нет уровней иерархии, соответствующие части адреса будут содержать \u0027\\x0\u0027\n*  Если улица или дом не указаны, а тип записи таков, что они должны быть,\n*  пытается брать из конфигурации\n*  Если нет записи в объекте или запись из другой таблицы,\n*  возвращает пустую строку\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "СнятьБлокировкуЗаписи",
      "internalName": "UnLockRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 567
      },
      "briefDescription": "Функция СнятьБлокировкуЗаписи( имя ресурса )",
      "detailedDescription": {
        "text": "Снимает ранее выставленную блокировку с указанного ресурса",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СнятьБлокировкуРесурса",
      "internalName": "UnLockRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 567
      },
      "briefDescription": "Функция СнятьБлокировкуЗаписи( имя ресурса )",
      "detailedDescription": {
        "text": "Снимает ранее выставленную блокировку с указанного ресурса",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокОрганизаций",
      "internalName": "GetOrgList",
      "sourceLocation": {
        "file": "Kvplata/source/func_face.cpp",
        "line": 28
      },
      "briefDescription": "Функция СписокОрганизаций( Номер записи организации_группы_или_категории [,режим чтения] )",
      "detailedDescription": {
        "text": "Возвращает массив, содержащий элементы со значениями, определяемыми режимом чтения, имя - всегда номер записи организации: 0 или опущен - полное название организации, 1 - краткое название организации, 2 - ИНН, 3 - номер записи организации. Если передан номер записи организации - в массив включается единственный элемент, соответствующий этой записи, если передан номер записи группы - включаются элементы для всех организаций в этой группе - иерархия разворачивается Если передан номер записи -1 - массив будет пустымЕсли к режиму добавлено 100, в качестве первого аргумента передан номер записи таблицы Категории организаций",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеОрганизации",
      "internalName": "OrgInfoAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 679
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ДанныеОрганизации. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетДоговора",
      "internalName": "Calc_Dog",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 636
      },
      "briefDescription": "Функция РасчетДоговора( номер записи договора, месяц[, расчет_сальдо] )",
      "detailedDescription": {
        "text": "Выполняет расчет (или перерасчет) всех лицевых, содержащихся в указанном договоре Если месяц открытый - расчет, иначе - перерасчет с помещением результатов в открытый месяц В процессе работы создает дочерний объект - GetCalcDogovorManager, который имеет доступ к данным о показаниях связанных счетчиков за счет перегруженной функции CreateCalcer(). Сначала создается объект для показаний связанных счетчиков, а потом рассчитываются все лицевые, связанные с данным договором Если месяц month ранее начала работы программы, ничего не делает расчет_сальдо - рассчитывать ли сальдо (1 расчитывать иначе нет)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьТаблицу",
      "internalName": "CreateTable",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 508
      },
      "briefDescription": "Функция СоздатьТаблицу - дубликат от СоздатьТаблицуИндекс для совместимости",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Ошибка",
      "internalName": "ErrorBreak",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 130
      },
      "briefDescription": "Функция Ошибка( текст сообщения )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешеннаяУслуга",
      "internalName": "AllowedService",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 100
      },
      "briefDescription": "Функция РазрешеннаяУслуга( номер_услуги )",
      "detailedDescription": {
        "text": "Во всех задачах, кроме АРМ поставщика и АРМ юриста поставщика, возвращает 1 В этих же задачах возвращает 1 в том случае, если пользователь является супервизором или указанная услуга входит в одну из групп, перечисленных в разделенном запятыми списке в строке Раздел права на ресурс Разрешенные услуги и не содержится в таком же списке права на ресурс Запрещенные услуги",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьСведенияОВыборке",
      "internalName": "UpdateSelInfoNameAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_pay_vedom_data.cpp",
        "line": 67
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ОбновитьСведенияОВыборке. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КоррекцияПересекающихсяДат",
      "internalName": "DataCorrect",
      "sourceLocation": {
        "file": "Kvplata/source/arms.cpp",
        "line": 784
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция КоррекцияПересекающихсяДат( объект, имя поля связи со владельцем, имя поля проверки 1, имя поля проверки 2, имя индекса ) Используется при внесении записей параметров, услуг, поставщиков на лицевые, услуг в состав льготы Обеспечивает исключение появления записей с одинаковыми ключами и пересекающимися датами В качестве ключа выступают:\nимя поля связи со владельцем (лицевым счетом, льготой)имя поля проверки 1имя поля проверки 2 (если его нет, указывается пустая строка) Индекс обеспечивает чтение записей, связанных с тем же владельцем\nВызов:\nдля параметров КоррекцияПересекающихсяДат( об, \"Счет-Параметры\", \"Виды-Параметры\", \"Объекты-Параметры\", \"Проверка уникальности\" );для услуг КоррекцияПересекающихсяДат( об, \"Счет-Услуги\", \"Вид-Услуги\", \"Состояние\", \"Проверка уникальности\" );для поставщиков КоррекцияПересекающихсяДат( об, \"Счет-Список поставщиков\", \"Услуги-Список поставщиков\", \"\", \"Проверка уникальности\" );для услуг в составе льготы КоррекцияПересекающихсяДат( об, \"Льгота-Состав\", \"Услуга-Состав льготы\", \"\", \"Льгота-Состав\" );",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбнулитьНабор",
      "internalName": "ZeroContainer",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_REP.CPP",
        "line": 230
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Фунеция ОбнулитьНабор( Набор ) Обнуляет значения переменных набора",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыборВарианта2",
      "internalName": "ShowPopupList2",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 684
      },
      "briefDescription": "Функция ВыборВарианта2( заголовок, массив с именами, массив со значениями[, индекс для установки курсора] )",
      "detailedDescription": {
        "text": "Отличается от ВыборВарианта тем, что использует не всплывающее, а полнооконное меню Четвертым аргументом можно передать индекс значение из массива значений, на строку, имеющую тот же индекс, что и указанное значение, будет установлен курсор",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыборВарианта3",
      "internalName": "ShowPopupList3",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 762
      },
      "briefDescription": "Функция ВыборВарианта3( заголовок, массив со значениями )",
      "detailedDescription": {
        "text": "В массиве со значениями должны быть набраны переменные строкового типа Создается меню, пункты которого соответствуют значениям строк переданного массива, порядок следования пунктов соответствует порядку сортировки строк в массиве К вышележащим вариантам добавляется возможность формировать подменю: группа в главном меню формируется по разделютелю @ позволяет создавать один уровень вложенности меню В меню включаются только элементы, у которых в массиве тип \"Строка\" В случае выбора пользователем варианта возвращается полное имя из массива с разделителем и именем группы индексом, что и выбранная строка, если ничего не было выбрано - возвращает -1 .",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВРусскийФИО",
      "internalName": "FIOToRus",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 134
      },
      "briefDescription": "Функция ВРусскийФИО( текст, имя переменной под Фамилию, имя под Имя, имя под Отчество)",
      "detailedDescription": {
        "text": "Из строки удаляются все символы, не являющиеся буквами русского алфавита или дефисами. Сходные по начертанию символы латинского алфавита заменяются русскими буквами. Строка разбивается на Фамилию, Имя, Отчество, которые записываются в три переменные (разделителями рассматриваются пробел, точка, запятая, точка с запятой, двоеточие, подряд идущие разделители игнорируются).",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПредел",
      "internalName": "StatusIndic",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 255
      },
      "briefDescription": "Функция УстановитьПредел( число )",
      "detailedDescription": {
        "text": "Указывает общее число шагов на линейке индикатора",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "XmlDeclaration",
      "internalName": "CreateXmlDeclaration",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 536
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнестиЗаписьВИерархиюНачислений",
      "internalName": "InsertNacToHier",
      "sourceLocation": {
        "file": "Kvplata/source/func_lsinfo.cpp",
        "line": 232
      },
      "briefDescription": "Функция ВнестиЗаписьВИерархиюНачислений( объект )",
      "detailedDescription": {
        "text": "Заполнение выборки сальдо лицевого счета Добавляет запись начислений из объекта в выборку, к которой принадлежит этот объект Выборка должна содержать поля НомерУ (номер услуги) и поле иерархии Услуги Новая запись вставляется в папку, у которой НомерУ равен номеру группы, которой принадлежит услуга НомерУ Если эта услуга в корне иерархии, запись вставляется в корень иерархии При вставке записи в папку содержимое всех полей этой записи, имеющих флаг \"Суммируется по Ctrl-C\", добавляется к записям папки и всех вышележащих записей",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьФорматФайлаОтчета",
      "internalName": "GetReportFileFormat",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4844
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить требуемый формат отчета\n*\n* @Функция ПолучитьФорматФайлаОтчета()@\n*\n* @return требуемый формат отчета\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ГруппаСуществует",
      "internalName": "VisualGroupExists",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3185
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Перечень объектов \nГруппаСуществует() - проверка существования группы, окна или диалога",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДобавитьОкно",
      "internalName": "LoadNewWindowAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1829
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ДобавитьОкно. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Мин",
      "internalName": "_Min",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 596
      },
      "briefDescription": "Функция Мин( число, число )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьЗначенияФильтра",
      "internalName": "GetConditionFields",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 575
      },
      "briefDescription": "Функция ПолучитьЗначенияФильтра( имя окна/диалога, имя выборки в окне/диалоге )",
      "detailedDescription": {
        "text": "Возвращает массив с цифровым индексом, в значениях элементов которого записаны текущие значения полей фильтра указанной выборки. Выборку нельзя получать через MainDB.GetSelect(selname), потому что в таком случае фильтр будет сброшен к начальным значениям!",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "JavaScript",
      "internalName": "GetJsObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/JSObject.cpp",
        "line": 217
      },
      "briefDescription": "функция JavaScript()",
      "detailedDescription": {
        "text": "создает объект для загрузки и выполнения JavaScript на клиенте",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогЗаплатокОтчетов",
      "internalName": "GetReportPADir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1129
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция КаталогЗаплатокОтчетов( индекс ). Нумерация начинается с 1. Если предать -1, то вернет основной каталог отчетов. Возвращает полный путь к заплаткам отчетов В конце гарантированно стоит слеш Индекс не может быть равен 0. Если индекс \u003c 0, то возвращает путь в порядке перечисления в stack.ini. Если индекс \u003e 0 - то в обратном порядкеНапример, КаталогПрограммы() \u003d \"C:\\\\Stack.Srv\\\\Bin\\\\0\\\\\" а в stack.ini указано: RPT\u003d..\\..\\RPT \n RPT\u003d..\\..\\RPT\\SBYT \n RPT\u003d..\\..\\CLIENT_RPT то КаталогЗаплатокОтчетов( -1 ) вернет \"C:\\\\Stack.Srv\\\\RPT\\\\\" КаталогЗаплатокОтчетов( -2 ) вернет \"C:\\\\Stack.Srv\\\\RPT\\\\SBYT\\\\\" КаталогЗаплатокОтчетов( -3 ) вернет \"C:\\\\Stack.Srv\\\\CLIENT_RPT\\\\\"КаталогЗаплатокОтчетов( 1 ) вернет \"C:\\\\Stack.Srv\\\\CLIENT_RPT\\\\\" КаталогЗаплатокОтчетов( 2 ) вернет \"C:\\\\Stack.Srv\\RPT\\\\SBYT\\\\\" КаталогЗаплатокОтчетов( 3 ) вернет \"C:\\\\Stack.Srv\\\\RPT\\\\\" КаталогЗаплатокОтчетов( 4 ) вернет \"C:\\\\Stack.Srv\\\\RPT\\\\\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КонецФайла",
      "internalName": "FFileEOF",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 185
      },
      "briefDescription": "Функция КонецФайла( объект_файл )",
      "detailedDescription": {
        "text": "Возвращает 1, если достигнут конец файла, -1, если файл не открыт, 0 - если конец файла не достигнут",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаполнитьФлаги",
      "internalName": "FillCluster",
      "sourceLocation": {
        "file": "MuzzleJ/Source/CLUSTER.CPP",
        "line": 296
      },
      "briefDescription": "Функция ЗаполнитьФлаги( Имя_Диалога, Имя_Элемента, Строка_Значений )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьДопечатать",
      "internalName": "ClearPrintTemp",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1110
      },
      "briefDescription": "Функция ОчиститьДопечатать",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьОкно",
      "internalName": "EnableWindowCurrent",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 580
      },
      "briefDescription": "Функция РазрешитьОкно( )",
      "detailedDescription": {
        "text": "Разрешает элемент у текущего окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДелениеГС",
      "internalName": "DivGCounters",
      "sourceLocation": {
        "file": "KvplataCalc/source/doc_g_counters.CPP",
        "line": 889
      },
      "briefDescription": "Функция ДелениеГС( месяц [,номер_записи_группового_счетчика или массив_номеров] )",
      "detailedDescription": {
        "text": "Выполняет деление групповых счетчиков за указанный месяц Если опущена позиция документа, рассчитываются все групповые счетчики Если указано число в качестве позиции документа, рассчитывается групповой счетчик, чей номер записи в таблице Документ указан (это может быть номер записи папки, тогда рассчитываются все групповые счетчики из этой папки) Если указан массив, номерами записей служат те элементы массива, у которых тип Число или ДеньгиПри успешном завершении возвращает пустую строку Если будут обнаружены ошибки в записях счетчиков (записи без правил или с пустыми правилами) или пользователь прервет процесс деления, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходСчетчикаТариф",
      "internalName": "ValuesCountersTarif",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 391
      },
      "briefDescription": "Функция РасходСчетчикаТариф( [режим] )",
      "detailedDescription": {
        "text": "Загружает данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Возвращает объект, имеющий два индекса - номер услуги/группы и номер тарифа Если опущен Режим или он отличен от \"У\", первым индексом служит номер группы, иначе - номер услуги В элементах суммируются данные по итоговому расходу (с учетом коэффициента трансформации) Для каждой услуги, для которой есть реальные показания хотя бы по одному тарифу, создается число записей по максимальному числу тарифов счетчика. Если же по услуге нет никаких показаний в текущем месяце, то и объектов для нее не создается, независимо от числа тарифов Например, если по услуге 160 имеется двухтарифный счетчик, но показания есть только по тарифу 0, будут созданы элементы 160.0 с реальным расходом и 160.1 с нулевым расходом",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыбратьКаталог",
      "internalName": "FSelectDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 705
      },
      "briefDescription": "Функция ВыбратьКаталог( заголовок окна, предлагаемый_путь )",
      "detailedDescription": {
        "text": "Запрос имени каталога. Исходно окно выбора открывается в предложенном каталоге. Окно имеет предложенный заголовок (\"\" заменяется на \"Выберите каталог\") При отказе пользователя от выбора вернет пустую строку, иначе - выбранный путь",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьФорматПоляЗаписи",
      "internalName": "GetFieldFormat",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4869
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ToolBar",
      "internalName": "GetToolBarObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3375
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗначениеПеременнойСредыОкружения",
      "internalName": "GetEnvironmentVar",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2397
      },
      "briefDescription": "Функция ЗначениеПеременнойСредыОкружения( имя_переменной, на_клиенте )",
      "detailedDescription": {
        "text": "возвращает длинную строку со значением переменной окружения \"имя_переменной\", прочитанной либо на сервере( если параметр на_клиенте \u003d 0 ), либо на клиенте( если параметр на_клиенте \u003d 1 )",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьНомерЗаписи",
      "internalName": "SetRecordNumber",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 958
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапуститьЮнитТесты",
      "internalName": "RunUnitTests",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3722
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "ЗапуститьЮнитТесты Выполняет все тесты из файлов в каталогах PRG, и возвращает результаты выполнения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьХранителяПереплаты",
      "internalName": "GetServiceOverpay",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 313
      },
      "briefDescription": "Функция ПолучитьХранителяПереплаты( номер платежной группы )",
      "detailedDescription": {
        "text": "Возвращает номер услуги из указанной платежной группы, на которую записывается переплата. Если такой услуги нет тогда вернет 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛьготыМесяца",
      "internalName": "GetHelpByMonth",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1472
      },
      "briefDescription": "Функция ЛьготыМесяца()",
      "detailedDescription": {
        "text": "Возвращает строку для льгот, действующих в течение месяца расчета Строка имеет вид запись_документа\u003dльгота,запись_документа2\u003dльгота2... Если встречается несколько записей льгот с одинаковым номером, но разными номерами документа, они все будут записаны в результирующую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Дата",
      "internalName": "ToDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 989
      },
      "briefDescription": "Функция Дата( переменная любого типа )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытьТаблицу",
      "internalName": "OpenTable",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 526
      },
      "briefDescription": "Функция ОткрытьТаблицу(\"имя файла с путем и расширением\")",
      "detailedDescription": {
        "text": "Открывает таблицу в монопольном режиме Возвращает объект, построенный на записи этой таблицы В случае ошибки возвращает объект без записиВсе записи можно перебрать через Следующий( объект,\"\" ) - именно пустое имя индекса, т.к. иначе ищет иерархию или НайтиИзвлечьЗаписьТаблицы( объект, любой_индекс, переменная(исходно -1), 0 ) для того, чтобы открыть таблицу tbl в старом формате необходимо добавить к имени файла тип ?TBL_OLD",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПланСчетов",
      "internalName": "SetAccPlan",
      "sourceLocation": {
        "file": "Sbis32/source/PROVOD.CPP",
        "line": 156
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьXmlТекст",
      "internalName": "LoadXMLText",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 69
      },
      "briefDescription": "Функция ПрочитатьXmlТекст( текст )",
      "detailedDescription": {
        "text": "заполняет выходной массив на основе xml из строки текста",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьПутьФайлаОтчета",
      "internalName": "GetReportFilePath",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4786
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить путь к файлу готового отчета\n*\n* @Функция ПолучитьПутьФайлаОтчета()@\n*\n* @return путь к файлу готового отчета\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяТекущегоОкна",
      "internalName": "GetCurrentGroupName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 211
      },
      "briefDescription": "Функция ИмяТекущегоОкна()",
      "detailedDescription": {
        "text": "Возвращает имя (из ресурса) активного окна или окна диалога",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БлокироватьРесурс",
      "internalName": "LockResourceEx",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 582
      },
      "briefDescription": "Функция БлокироватьРесурс( имя ресурса, тип блокировки, тайм-аут )",
      "detailedDescription": {
        "text": "Выставляет на указанный ресурс Shared (при типе 0) или Exclusive (при типе 1) блокировку При невозможности мгновенной блокировки ожидает указанное количество миллисекунд (0 - без ожидания) При успехе вернет 1, при невозможности немедленно выставить блокировку вернет 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьПолеСвязи",
      "internalName": "GetLinkField",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 119
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПрочитатьПолеСвязи( объект, имя поля ) Из указанного объекта читает содержимое указанного поля (любого типа) Если в объекте нет записи или нет такого поля, вернет -1, иначе - для полей связи, целых, переключателей, перечисляемых, флагов - целочисленное значение поля,\nдля строк, даты, времени, вещественных, денег, больших целых - реальное значение поля",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПараметрДома",
      "internalName": "HouseParameter",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 2099
      },
      "briefDescription": "Функция ПараметрДома( ИмяПараметра, Дата )",
      "detailedDescription": {
        "text": "Возвращает объект с полями, как у таблицы Параметры дома (\"ДатНач\", \"ДатКнц\", \"Значение\", \"Знач2\", \"Знач3\", \"Знач4\", \"Знач5\", \"Знач6\", \"Знач7\", \"Примечание\") (если запрошенный параметр не найдем, то поля существуют, но пустые)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Время",
      "internalName": "ToTime",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1002
      },
      "briefDescription": "Функция Время( переменная любого типа )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьДиалог",
      "internalName": "DlgObj",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 516
      },
      "briefDescription": "Функция СоздатьДиалог( имя окна диалога в ресурсе )",
      "detailedDescription": {
        "text": "Возвращает объект, соответствующий этому диалогу Если диалог не будет найден, вернет NULL в качестве объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяФайлаПрограммы",
      "internalName": "GetNameProgram",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 933
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешеннаяПлатежнаяГруппа",
      "internalName": "AllowedPayGroup",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 141
      },
      "briefDescription": "Функция РазрешеннаяПлатежнаяГруппа( номер_платежной_группы )",
      "detailedDescription": {
        "text": "Во всех задачах, кроме АРМ поставщика и АРМ юриста поставщика, возвращает 1 В этих же задачах возвращает 1 в том случае, если пользователь является супервизором или указанная платежная группа содержится в разделенном запятыми списке в строке Раздел права на ресурс Разрешенные платежные группы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогКлиента",
      "internalName": "GetClientDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1164
      },
      "briefDescription": "Функция КаталогКлиента()",
      "detailedDescription": {
        "text": "Возвращает каталог запуска клиента программы В конце гарантированно стоит слеш",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПутьФайлаОтчета",
      "internalName": "SetReportFilePath",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4771
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет установить путь к файлу готового отчета\n*\n* @Функция УстановитьПутьФайлаОтчета(Строка путь)@\n*\n* @return 1\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "РаспаковатьДанныеВТекст",
      "internalName": "DecompressDataInTextFunc",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2431
      },
      "briefDescription": "Функция РаспаковатьДанныеВТекст( данные )",
      "detailedDescription": {
        "text": "распаковывает данные с помощью zlib и возвращает результат в виде длинной строки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьВнешнийДокумент",
      "internalName": "CreateExternalDoc",
      "sourceLocation": {
        "file": "Kvplata/source/func_extdoc.cpp",
        "line": 198
      },
      "briefDescription": "Функция СоздатьВнешнийДокумент()",
      "detailedDescription": {
        "text": "Возвращает объект, предназначенный для получения внешнего документа путем сканирования или из файла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытьМьютекс",
      "internalName": "OpenMutexObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 532
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КонвертироватьСтроку",
      "internalName": "StringConvert",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 438
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "КонвертироватьСтроку( строка_источник, \"исходная_кодировка\", \"новая_кодировка\" ) Конвертирует строку из \"исходная_кодировка\" в \"новая_кодировка\" и возвращает результат. \"строка_источник\" при этом не меняется. Варианты кодировок: UTF-16, UTF-8, 1251, cp1251, windows-1251, ANSI, 866, cp866, OEM. Также возможно указание кодировки в виде числа. Например, 65000 - соответствует UTF-7",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СКК",
      "internalName": "SaldoEndKredit",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 392
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЗаголовокЭлемента",
      "internalName": "SetControlName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 153
      },
      "briefDescription": "Функция УстановитьЗаголовокЭлемента( имя окна, имя элемента, строка )",
      "detailedDescription": {
        "text": "Устанавливает заголовок указанного элемента указанного окна (используется имя из ресурса) Применяется для изменения текста на кнопках",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КомандаКлиенту",
      "internalName": "StoreCmdToClient",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1992
      },
      "briefDescription": "Функция КомандаКлиенту( команда[, параметры ] )",
      "detailedDescription": {
        "text": "Посылает команду клиенту для обработки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьПоляПеречислимого",
      "internalName": "GetFieldsOfEnumerable",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4676
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Возвращает строку с возможными вариантами перечислимого поля из словаря xdic\n*\n* @Функция @ПолучитьПоляПеречислимого(Строка имяТаблицы, Строка имяПоля)\n*\n* @param[in] имяТаблицы имя таблицы\n* @param[in] имяПоля имя поля\n* @returns строка с вариантами разделенными символами \u0027\\n\u0027\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПолеСвязи",
      "internalName": "SetLinkField",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 582
      },
      "briefDescription": "Функция УстановитьПолеСвязи( объект, имя поля, значение, имя, значение, имя, значение... )",
      "detailedDescription": {
        "text": "В поле связи записи данного объекта заносит указанное значение (тип может быть число (целое, вещественное или деньги), строка или дата) Запись в таблицу сама не вносится Для обработчиков окон диалога для изменения полей в записи (полей связи, полей в связанной записи при связи 1-1 ) используются конструкции вида УстановитьПолеСвязи( \u0027.\u0027,\"Сост\",0 ) - для полей основной записи УстановитьПолеСвязи( \u0027.\u0027,\"Счет-Наниматель\u003eФИО\", \"\" ) или УстановитьПолеСвязи( \u0027.\u0027,\"Карточки регистрации.ФИО\", \"\" ) - для полей записи, связанной с основной по 1-1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СпроситьКонстанты",
      "internalName": "BuildAskDialog",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 372
      },
      "briefDescription": "Функция СпроситьКонстанты( строка, дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеОЛицензии",
      "internalName": "GetLicenseData",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1554
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить объект с данными о лицензии\n*\n* @Функция ДанныеОЛицензии()@\n*\n* @return Объект объект с данными о лицензии\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ТекДатВремя",
      "internalName": "CurrentDateTime",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 777
      },
      "briefDescription": "Функция ТекДатВремя()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнешнийОбъектНаКлиенте",
      "internalName": "CreateClientComObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1799
      },
      "briefDescription": "Функция ВнешнийОбъектНаКлиенте( ProgID[, Тихий режим] )",
      "detailedDescription": {
        "text": "Создает объект, внутри которого хранится интерфейс доступа IDispatch указанного COM-сервера На эту функцию есть внешняя ссылка, за счет этого файл включается в сборку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "CreateGuid",
      "internalName": "CreateGuid",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1904
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЭлементИндекса",
      "internalName": "IndexItem",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 267
      },
      "briefDescription": "Функция ЭлементИндекса( строка )",
      "detailedDescription": {
        "text": "Возвращает строку, которая содержит только буквы, цифры и подчеркивание",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешенныеУслуги",
      "internalName": "AllowedServices",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 120
      },
      "briefDescription": "Функция РазрешенныеУслуги()",
      "detailedDescription": {
        "text": "Во всех задачах, кроме АРМ поставщика и АРМ юриста поставщика, возвращает -10 В этих же задачах возвращает список всех услуг через запятую в том случае, если пользователь является супервизором или указанная услуга входит в одну из групп, перечисленных в разделенном запятыми списке в строке Раздел права на ресурс Разрешенные услуги и не содержится в таком же списке права на ресурс Запрещенные услуги",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьОбработчикПарсера",
      "internalName": "SetSAXHandler",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1859
      },
      "briefDescription": "Функция УстановитьОбработчикПарсера( Объект Msxml2.SAXXMLReader, название функции обработчика )",
      "detailedDescription": {
        "text": "устанавливает обработчик для парсера SAXXMLReader Пример использования: SAXParser \u003d ВнешнийОбъект(\"Msxml2.SAXXMLReader\"); УстановитьОбработчикПарсера(SAXParser, \"ОбработчикXML\") SAXParser.ParseURL(\"file.xml\"); ..... Функция ОбработчикXML() ..... в функции-обработчике доступны переменные \"Событие\", \"Имя\", и для некоторых событий \"Данные\" Возможные значения переменной \"Событие\": StartDocument EndDocument StartElement - имя тэга в переменной \"Имя\", атрибуты - массив \"Данные\" EndElement - имя тэга в переменной \"Имя\" CharactersЕсли вернуть 0 на событие StartElement, то весь тег пропускается Если вернуть -1 на события StartElement, EndElement, Characters - то обработка файла прерывается.В следующих событиях в переменной \"Данные\" - сообщение об ошибке, в переменных \"Строка\" и \"Столбец\" - позиция ошибки в файле Error FatalError Warning",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АтрибутыФайла",
      "internalName": "GetFileAttrib",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1391
      },
      "briefDescription": "Функция АтрибутыФайла( имя_файла )",
      "detailedDescription": {
        "text": "возвращает объект с некоторыми атрибутами файла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НомерПоле",
      "internalName": "NumberFieldObj",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 199
      },
      "briefDescription": "Функция НомерПоле( строка, имя переменной под номер, имя переменной под поле)",
      "detailedDescription": {
        "text": "Разбивает строку вида 10а на номер 10 и поле а (если числа нет - номер 0) Возвращает объект с полями \"Номер\", \"Поле\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТекущаяВерсия",
      "internalName": "GetVersionDic",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 39
      },
      "briefDescription": "Функция ТекущаяВерсия()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьПараметры",
      "internalName": "ReadObjectParams",
      "sourceLocation": {
        "file": "Kvplata/source/func_params.cpp",
        "line": 17
      },
      "briefDescription": "Функция ПрочитатьПараметры(объект)",
      "detailedDescription": {
        "text": "Читает записи из таблицы Значения параметров, связанные с указанным объектом, создает объект, в котором каждая переменная имеет имя, совпадающее с именем параметра, и значение - строковое значение параметра Служит для исправления ошибки в функции ДляВсех(Параметров(объект)), в которой возникает ошибка при отсутствии параметров у объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетНачислений",
      "internalName": "CalcNac",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 87
      },
      "briefDescription": "Функция РасчетНачислений( месяц )",
      "detailedDescription": {
        "text": "Если указанный месяц открыт, выполняет расчет только начислений за него, возвращает пустую строку Если месяц закрыт или пользователь прерывает процесс расчета, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьОкноСостояния",
      "internalName": "DeleteStatWindow",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3073
      },
      "briefDescription": "Функция УдалитьОкноСостояния()",
      "detailedDescription": {
        "text": "Удаляет последнее окно состояния текущнго уровня",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СкомпилироватьСкрипт",
      "internalName": "CompileScript",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3639
      },
      "briefDescription": "СкомпилироватьСкрипт()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИмяИерархии",
      "internalName": "HierName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2563
      },
      "briefDescription": "Функция ИмяИерархии( имя окна или диалога, имя выборки )",
      "detailedDescription": {
        "text": "Возвращает имя поля, по которому построена иерархия в данном броузере Возвращает пустую строку, если нет такого броузера или он не иерархический",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ШтрихКод",
      "internalName": "MakeSCode",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 103
      },
      "briefDescription": "Функция ШтрихКод( ... )",
      "detailedDescription": {
        "text": "Формирование штрих-кода Первым аргументом получает стартовый символ Второй агрумент : 0 - не нужно выводить контрольную сумму 1 - выводить в 1 символ 2 - в 2 символа Далее идут пары аргументов - целое число и во сколько символов его выводить В функцию параметры передаются в обратном порядке, т.е. prms[prms_cnt-1]-стартовый символ",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьИзСтроки",
      "internalName": "RemoveChars",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 292
      },
      "briefDescription": "Функция УдалитьИзСтроки( строка, СтрокаУдаляемыхСимволов )",
      "detailedDescription": {
        "text": "Удаляет из строки символы, которые находятся в строке СтрокаУдаляемыхСимволов Возвращает измененную строку При удалении учитывается регистр букв",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазвернутаИерархия",
      "internalName": "IsCtrlA",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 491
      },
      "briefDescription": "Функция РазвернутаИерархия( имя_окна, имя_выборки )",
      "detailedDescription": {
        "text": "Определяет развернута иерархия или нет",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокЛицевых",
      "internalName": "ListAccounts",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 444
      },
      "briefDescription": "Функция СписокЛицевых( объект_квартира )",
      "detailedDescription": {
        "text": "Вернет массив с номерами лицевых счетов, которые содержатся внутри объекта-аргумента (он должен иметь запись из Лицевых счетов, но не обязательно квартиры, можно дома...) Индексы элементов и сами элементы массива будут номерами лицевых счетов Если объект не содержит записи, она не из Лицевых счетов - вернет пустой массив",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьСобытие",
      "internalName": "CreateEventObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 636
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПозициюРедактора",
      "internalName": "SetOffsetEditor",
      "sourceLocation": {
        "file": "MuzzleJ/Source/editor.cpp",
        "line": 1073
      },
      "briefDescription": "Функция УстановитьПозициюРедактора( имя_окна, имя_редактора, позиция )",
      "detailedDescription": {
        "text": "Устанавливает курсор редактора с именем name в окне win_name в передаваемую позицию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПереименоватьФайл",
      "internalName": "RenameFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 600
      },
      "briefDescription": "Функция ПереименоватьФайл( старое имя файла, новое имя файла )",
      "detailedDescription": {
        "text": "Переименовывает файл (может перемещать между дисками)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьВыделениеДерева",
      "internalName": "GetTreeMarkItem",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 997
      },
      "briefDescription": "Функция ПолучитьВыделениеДерева( имя окна, имя ExplorerTree )",
      "detailedDescription": {
        "text": "Возвращает номер очередной выделенной записи из указанного броузера (поиск по имени выборки/коллекции) указанного окна (обычного или диалога), снимая выделение с этой записи При отсутствии выделенных записей вернет пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОграниченныйФункционалПрограммы",
      "internalName": "IsLimitedFunction",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 724
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЛист",
      "internalName": "SetLeafAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1294
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьЛист. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "DotNetStatic",
      "internalName": "CreateDotNetStatic",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1888
      },
      "briefDescription": "Функция DotNetStatic( имя_класса )",
      "detailedDescription": {
        "text": "создает объект для доступа к статическим свойствам или методам класса",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "МаскаОбщихЗаписей",
      "internalName": "CurTaskCommonRecordMask",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 738
      },
      "briefDescription": "Функция МаскаОбщихЗаписей()",
      "detailedDescription": {
        "text": "Возвращает маску общих записей (если запись дает 0 с этой маской, она выводится)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Вверх",
      "internalName": "TextUp",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 858
      },
      "briefDescription": "Функция Вверх( строка )",
      "detailedDescription": {
        "text": "Возвращает строку (или длинную строку), в которой символы переведены в верхний регистр Тип возвращаемого результата определяется длиной строки (до 254 - обычная, больше - длинная)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Очистить",
      "internalName": "ClearValue",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 523
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функия Очистить(имяПеременной)\n\nЕсли переменная `имяПеременной` уже существует и ее значение является примитивным \nтипом данных, функция устанавливает ей значение по умолчанию, не меняя ее тип. \nНапример, если значение переменной имело тип `Real`, то ей будет присвоено значение\n`0`. Ниже приведена таблица значений по умолчанию:\n\n- Nil - nil\n- Boolean - false\n- Real, Money - 0\n- Int32 - 0_i32\n- Int64 - 0_i64\n- String - \"\"\n- Time - 00:00:00\n- Date - null date\n- DateTime - null date time\n- BinaryData - двоичные данные размером 0\n\nПример:\n\n```\nперем п \u003d 10\nОчистить( п )              # переменной п присваивается 0\n\nп \u003d \"абв\"\nОчистить( п )              # п присваивается пустая строка \"\"\n```\n\nЕсли `имяПеременной` ссылается на поле записи, то этому полю записи будет присвоено \nзначение по умолчанию (аналогично примитивным типам данных).\n\nЕсли значение переменной является объектом, то этот объект очищается: удаляются\nвсе свойства в объекте, поля записи (если таковая есть) сбрасываются к значениям\nпо умолчанию. Пример:\n\n```\nперем п \u003d @{ x: 1, y: 2 }\nОчистить( п )              # функция удаляет все свойства объекта п\nРазмер( п )                # 0\n```\n\nЕсли переменная `имяПеременной` не существует, то функция создает локальную переменную с \nименем `имяПеременной`, создает пустой объект и присваивает его переменной. Пример:\n\n```\nОчистить( п )              # переменной п присваивается новый пустой объект\n```\n\nЕсли же переменная существует, но ее значение не определено, ей также присваивается\nновый пустой объект:\n\n```\nперем к\nОчистить( к )              # аналогично\n```\n\nЕсли `имяПеременной` не является именем переменной либо этой переменной\nневозможно присвоить значение, возникает исключение. Пример:\n\n```\nОчистить( 1 )              # исключение\n```\n\nАргумент `имяПеременной` может быть как именем переменной, так и любым другим `lvalue`,\nнапример, ключом в колекции:\n\n```\nперем п \u003d @[\"а\", \"б\"]\nОчистить(п.2)              # присваивает второму элементу массива пустую строку\n                           # т.е. массив станет таким: @[\"а\", \"\"]\n```",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "СкрытьЭлемент",
      "internalName": "HideControlName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 318
      },
      "briefDescription": "Функция СкрытьЭлемент( имя окна, имя элемента )",
      "detailedDescription": {
        "text": "Скрывает элемент у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыделенныйУзел",
      "internalName": "GetTreeSelectedItem",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1013
      },
      "briefDescription": "Функция ВыделенныйУзел( имя окна, имя ExplorerTree )",
      "detailedDescription": {
        "text": "Возвращает выделенный узел в дереве ExplorerTree",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоказатьЭлемент",
      "internalName": "ShowControlName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 331
      },
      "briefDescription": "Функция ПоказатьЭлемент( имя окна, имя элемента )",
      "detailedDescription": {
        "text": "Показывает скрытый ранее элемент у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьДерево",
      "internalName": "RefreshExplorerTree",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 964
      },
      "briefDescription": "Функция ОбновитьДерево( имя_окна, имя_дерева [,ID] )",
      "detailedDescription": {
        "text": "обновляет узлы дерева с ID равными ID",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТипКонфигурации",
      "internalName": "ConfigurationType",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 1301
      },
      "briefDescription": "Функция ТипКонфигурации()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Отладить",
      "internalName": "CallDebug",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1049
      },
      "briefDescription": "Функция Отладить( [информация] )",
      "detailedDescription": {
        "text": "информация - данные выводимые в заголовок окна",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПроигратьАудио",
      "internalName": "OurPlaySoundAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2460
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "функция \"ПроигратьАудио. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВсплывающееОкно",
      "internalName": "WriteMsg2Window",
      "sourceLocation": {
        "file": "MuzzleJ/Source/popup.cpp",
        "line": 56
      },
      "briefDescription": "Функция ВсплывающееОкно( сообщение[, имя_окна][, имя_элемента][, секунды] )",
      "detailedDescription": {
        "text": "Если аргумент один, то показывает всплывающее окно с сообщением из панели задач Если указано имя_окна, но нет имя_элемента, то показывает всплывающее окно для определенного окна, если оно еще не видимо, то при показе Если указано имя элемента, то всплывающее окно появляется в нижнем правом углу элемента Пропадает либо через указанное время, либо вместе с закрытием окна, либо по щелчку на подсказке Если секунды \u003d -1, то пропадает только либо вместе с закрытием окна, либо по щелчку на подсказке Если секунды \u003d 0 или не указаны, то используется таймер по умолчанию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытьЛицевой",
      "internalName": "OpenAccount",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 474
      },
      "briefDescription": "Функция ОткрытьЛицевой( номер_лицевого_или_объект_квартира)",
      "detailedDescription": {
        "text": "Вернет объект, основанный на записи лицевого счета с данным номером или содержащегося в данной квартире (если их несколько в квартире - берется первый попавшийся) Если в данной квартире нет лицевых счетов или не найден лицевой счет с данным номером - вернет пустой объект без записи( проверять функцией ТипДанных - укажет, что нет записи или НомерЗаписи - вернет -1 )",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОД",
      "internalName": "OborotDebet",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 383
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЗапрос",
      "internalName": "ComboSetQuery",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2521
      },
      "briefDescription": "Функция УстановитьЗапрос( ИмяДиалога, ИмяСписка, СтрокаЗапроса )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "XmlDocument",
      "internalName": "CreateXmlDocument",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 523
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПроверитьДанныеБазы",
      "internalName": "TestDataBases",
      "sourceLocation": {
        "file": "Kvplata/source/func_check.cpp",
        "line": 62
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПроверитьДанныеБазы (row_id_правила, тип_проверки) Функция проверяет данные базы, выполняя правило с позицией в базе row_id_правила. Правила должны лежать в таблице \"Правила операций\" в папке с именем \"ПРОВЕРКА_МЕС\" Правила должны удовлетворять следующим условиям (регистр имен переменных не важен):\nдолжна быть инициализирована переменная \"ПАПКА\". Эта папка будет создана в таблице \"Проверка месяца\", в ней будут находиться листы со ссылкой на дома или лицевые. В случае отсутствия значения переменной или пустого значения правило выполнено не будет Какие ссылки будут находиться в папке зависит от переменной \"ПОЛЕ\".на выходе из правила должен быть создан массив \"СТРОКИ\", индексами которого будут являтся row_id записей домов или лицевых счетов из таблицы \"Лицевые счета\", row_id записей групповых счетчиков из таблицы \"Документ\" с типом 77, row_id записей актов снятия качества из таблицы \"Документ\" с типом 71, элементами - текст, который будет отображен в браузередолжна быть инициализирована переменная \"ПОЛЕ\". Она может принимать одно из следующих значений:\n\"Проверка-Лицевой\", если в правиле массив \"СТРОКИ\" заполняется row_id лицевых счетов\"Проверка-Документ\", если в правиле массив \"СТРОКИ\" заполняется row_id групповых счетчиков эти значения совпадают с именами полей таблицы \"Проверка месяца\". В случае отсутствия значения переменной, пустого значения, или не удовлетворяющее ни одному из трех выше перечисленных значений правило выполнено не будет Если массив не пуст, то в таблицу \"Проверка месяца\" будут занесены записи со ссылкой на соответствующую таблицу с помощью функции ПроверитьДанныеБазы_Вставка Возвращает 1.0, если правило выполнилось, и 0.0 в противном случае",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныеКорниАдресов",
      "internalName": "GetAccessAddressRoots",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 681
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ExecuteStrict",
      "internalName": "ExecuteStrict",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2273
      },
      "briefDescription": "Функция ExecuteStrict( текстВыражения )",
      "detailedDescription": {
        "text": "Выполняет выражение в \"строгом\" режиме, т.е. режиме без обратной совместимости.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "url_encode",
      "internalName": "url_encode",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 506
      },
      "briefDescription": "Функция url_encode( строка[, кодировка [, флаг_url_путь ]] )",
      "detailedDescription": {
        "text": "Возвращает строку в uri Percent-encoding https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_in_a_URI",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьСообщения",
      "internalName": "GetMessagesBox",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 62
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьВызовОкнаСостояния",
      "internalName": "SetStatWindowHandler",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2957
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогиБаз",
      "internalName": "GetBaseDirs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 944
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВКонецСтроки",
      "internalName": "AddStringObj",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 70
      },
      "briefDescription": "Функция ВКонецСтроки( переменная_получатель,строка_источник[,...] )",
      "detailedDescription": {
        "text": "Создает длинную строку под именем переменной-получателя, добавляя в конец преобразованной в текс переменной-получателя (если она имеется) строк-источников (обычных или длинных строк) Строки соединяются последовательно Если переменной-получателя нет, она будет создана",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоляЗаписиТаблицы",
      "internalName": "GetFieldsName",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 1076
      },
      "briefDescription": "Функция ПоляЗаписиТаблицы( имя таблицы )",
      "detailedDescription": {
        "text": "Возвращает массив с данными о полях записи объекта. Индексы 1,2,..., в каждом индексе элементы Имя (имя поля), Тип поля (значения \"Строка\", \"Текст\", \"Целое\", \"Большое целое\", \"Флаги\", \"Переключатель\", \"Перечисляемое\", \"Дата\", \"Вещественное\", \"Двоичное\", \"Время\", \"Деньги\", \"Указатель\", \"1-1\", \"1-M\", \"M-1\", \"Условная 1\", \"Условная М\", \"Иерархия\", \"Неизвестный\" ), Тип данных (\"Строка\", \"Число\", \"Дата\", \"Время\", \"Указатель\", \"Неизвестный\" ) Если в объекте нет записи, возвращается пустой массив",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ФорматРезультата",
      "internalName": "SQLResultFormat",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1487
      },
      "briefDescription": "Функция ФорматРезультата( объект - соединение )",
      "detailedDescription": {
        "text": "Возвращает объект с подобъектами - именами полей, внутри каждого подобъекта переменные ТипВПеременную (какой тип будет у переменной при чтении - \"Строка\",\"Число\",\"Дата\" или \"Не читается\"), ТипВТаблицу(какой тип будет у поля при создании таблицы по результатам запроса - \"Текст\", \"Строка\", \"Целое\",\"Вещественное\",\"Деньги\",\"Дата\" или \"Не читается\"), Размер (в байтах), ИмяВТаблице (как это поле называется при переносе в таблицу) Значение \"Не читается\" означает, что содержимое данного поля игнорируется Если соединение не открыто, выдаст на экран сообщение об ошибке и вернет пустой объект(Размер(о)\u003d\u003d0)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОтметитьЗаписьВыборки",
      "internalName": "MarkSelectRecAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1689
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ОтметитьЗаписьВыборки. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьВыборку",
      "internalName": "UpdateSel",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 924
      },
      "briefDescription": "Функция ОбновитьВыборку( имя таблицы )",
      "detailedDescription": {
        "text": "Обновляет все выборки из указанной таблицы (перерисовывает DataView)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СНК",
      "internalName": "SaldoStartKredit",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 380
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "МаскаСвоихЗаписей",
      "internalName": "CurTaskSelfRecordMask",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 731
      },
      "briefDescription": "Функция МаскаСвоихЗаписей()",
      "detailedDescription": {
        "text": "Возвращает настроечные данные текущей задачи",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УбратьЗаписьВПанели",
      "internalName": "RemoveRecordPanel",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3153
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗагрузитьОтчет",
      "internalName": "CreateColReporterWrapper",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2058
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнестиПараметры",
      "internalName": "StoreParamBFld",
      "sourceLocation": {
        "file": "Kvplata/source/func_params.cpp",
        "line": 33
      },
      "briefDescription": "Функция ВнестиПараметры( объект-приемник, объект-источник)",
      "detailedDescription": {
        "text": "Сначала удаляет из таблицы Значения параметров все записи, связанные с записью объекта-приемника, затем для всех переменных объекта-источника, имена которых содержатся в таблице Параметры, вносит в эту таблицу записи, связанные с записью объекта-приемника и записью Параметра с этим именем, в качестве значения сохраняется значение соответствующей переменной Если в объекте присутствуют переменные, имена которых не содержатся в таблице Параметры, они игнорируются Если у объекта - приемника нет записи, функция не делает ничего",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Trim2",
      "internalName": "Trim2PRG",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 259
      },
      "briefDescription": "Функция Trim2( строка )",
      "detailedDescription": {
        "text": "Удаляет пробелы? табуляцию, переводы строуи и каретки в начале и в конце строки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Оборот",
      "internalName": "AccOborot",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 468
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СвойствоОрганизации",
      "internalName": "GetOrganizDataShort",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 549
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "числовые значения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЕстьФункция",
      "internalName": "hasFunc",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 783
      },
      "briefDescription": "ЕстьФункция ( имя )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КоличествоИнтервалов",
      "internalName": "CountersInterval",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 878
      },
      "briefDescription": "Функция КоличествоИнтервалов( [первый_месяц_периода [, последний_месяц_периода]])",
      "detailedDescription": {
        "text": "Возвращает число интервалов в указанном периоде, на которых наборы параметров, услуг, льгот неизменны Если опущены обе границы периода, определяется число интервалов в месяце расчета Если опущен последний месяц периода, период состоит из одного месяца, который указан как первый месяц периода, именно в нем определяется число интервалов",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СНачМесяца",
      "internalName": "FirstDay",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 265
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УслугиМесяца",
      "internalName": "GetServByMonth",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 2043
      },
      "briefDescription": "Функция УслугиМесяца()",
      "detailedDescription": {
        "text": "Возвращает строку услуг, действующих в течение месяца расчета Строка имеет вид ,услуга1,услуга2,услуга3,...",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АПИБраузер",
      "internalName": "CreateApiBrowser",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4437
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет создать объект АПИБраузер\n*\n* @Функция АПИБраузер( Строка apiКласс [, Объект параметрыАПИ] )@\n*\n* @param[in] apiКласс API класс\n* @param[in] параметрыАПИ объект, который будет доступен в обработчиках, как \u0027ПараметрыАПИ\u0027\n* @return АПИБраузер Если событие вызвано, значение, которое вернул обработчик, иначе NULL\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетПолныйНаборЛС",
      "internalName": "CalcAllFromTable",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 51
      },
      "briefDescription": "Функция РасчетПолныйНаборЛС( таблица_с_ЛС, месяц )",
      "detailedDescription": {
        "text": "Если указанный месяц открыт, выполняет расчет начислений и сальдо фонда за него, возвращает пустую строку Если месяц закрыт или пользователь прерывает процесс расчета, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеПараметра",
      "internalName": "GetParamDataAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 28
      },
      "briefDescription": "Функция ДанныеПараметра( номер_записи )",
      "detailedDescription": {
        "text": "Функция ДанныеПараметра( название )",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьКонецСертификата",
      "internalName": "GetEndSertif",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1346
      },
      "briefDescription": "Функция ПолучитьКонецСертификата( файл )",
      "detailedDescription": {
        "text": "возвращает дату конец действия сертификата",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьТест",
      "internalName": "RunTest",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_test.cpp",
        "line": 8
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьЗаписьТаблицы",
      "internalName": "GetRecByNumOrLink",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 503
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПрочитатьЗаписьТаблицы. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Выборка",
      "internalName": "CreateSelObj",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1495
      },
      "briefDescription": "Функция Выборка( имя выборки в ресурсе )",
      "detailedDescription": {
        "text": "Создает объект от указанной выборки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "TestEsc",
      "internalName": "TestEscape",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3234
      },
      "briefDescription": "Функция TestEsc()",
      "detailedDescription": {
        "text": "Возвращает признак была ли нажата клавиша Escape need_delete - нужно ли очищать признак нажатия после проверки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеЛицевого",
      "internalName": "GetLSHierInfo",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1942
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ДанныеЛицевого( с какого уровня запросить, что запросить ) Чтение информации о произвольном уровне иерархии рассчитываемого лицевого счета Первый аргумент может быть двух видов:\nнеотрицательное число - запрашивается информация о самом нижнем из уровней иерархии, имеющем данный тип (если нет такого уровня, возвращается -1)отрицательное число - запрашивается информация об уровне иерархии на столько уровней вверх (-1 - владелец лицевого счета, -2 - владелец владельца и т.д.) (если запрос превышает глубину иерархии, возвращается -1) Второй аргумент определяет, что возвращается\"З\" - номер записи\"Н\" - значение поля \"Номер\"\"Т\" - значение поля \"Тип\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СнятьБлокировкуСтатуса",
      "internalName": "UnblockStatus",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 242
      },
      "briefDescription": "Функция СнятьБлокировкуСтатуса()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПерезагрузкаРесурсов",
      "internalName": "ReloadResource",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 386
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПерезагрузкаРесурсов( флаги ) Перезагружает ресурсы в соответствии с флагами:\n1 - перезагрузка ресурсов2 - перезагрузка пользовательских функций4 - перезагрузка пользовательских обработчиков8 - перезагрузка пользовательских словарей16 - перезагрузка правил операций32 - перезагрузка параметров64 - перезагрузка услуг128 - перезагрузка льготы256 - перезагрузка констант512 - перезагрузка организаций1024 - перезагрузка параметров документов2048 - перезагрузка справочников пользователя",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КопироватьФайл",
      "internalName": "CopyFileFunc",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 610
      },
      "briefDescription": "Функция КопироватьФайл( имя_существующего_файла, новое_имя )",
      "detailedDescription": {
        "text": "Копирует файл. Если файл с именем новое_имя существует, он будет предварительно удален (даже если он R/O) При копировании файла (R/O) у получателя этот атрибут сбрасывается При успешном копировании возвращает 0, иначе 1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВРусский",
      "internalName": "StringToRusAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 86
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ВРусский. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДатаВремя",
      "internalName": "GetFormDTDateTimeObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3561
      },
      "briefDescription": "Функция ДатаВремя( строка, строка формата ) - создает объект для работы с типом ДатаВремя.",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОшибкаДрайвера",
      "internalName": "DriverError",
      "sourceLocation": {
        "file": "MuzzleJ/Source/db_handlers.cpp",
        "line": 844
      },
      "briefDescription": "функция ОшибкаДрайвера()",
      "detailedDescription": {
        "text": "возвращает последнюю ошибку sql запроса",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогиРесурсов",
      "internalName": "GetRxDirs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 956
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогКонфигурации",
      "internalName": "GetConfigDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 998
      },
      "briefDescription": "Функция КаталогКонфигурации( ИмяФайла )",
      "detailedDescription": {
        "text": "Возвращает полный путь к конфигурационному файлу В конце стоит слэш",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасшифроватьРегистрацию",
      "internalName": "DecodeFile",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1227
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция РасшифроватьРегистрацию Расшифровывает сведения о регистрации, находящиеся в файле с именем dst, помещает их в файл с именем src",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьКонтекстБД",
      "internalName": "UseDBContext",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1423
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Пытается войти в бд по созданному ранее контексту\n*\n* @Функция УстановитьКонтекстБД( БинарныеДанные контекстБД [, Число выбитьЕслиЗанято] [, Объект параметры] )@\n*\n* @param[in] контекстБД бинарные данные с контекстом для входа в бд\n* @param[in] выбитьЕслиЗанято если не 0, то перед входом пытается отключить уже вошедшего пользователя\n* @param[in] параметры дополнительные параметры для сессии бд\n*\n* @return Число 0, если удалось установить контекст, -1, если нет лицензии, и -2, если контекст уже используется\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "RValuesOf",
      "internalName": "ObjectValuesReverseIterator",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/VARCOL.CPP",
        "line": 1424
      },
      "briefDescription": "Функция RValuesOf( объект )",
      "detailedDescription": {
        "text": "Возвращает обратный итератор по значениям объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьЗначенияПоУмолчаниюДляДиалога",
      "internalName": "GetDialogValDef",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1009
      },
      "briefDescription": "Функция ПолучитьЗначенияПоУмолчаниюДляДиалога( имя диалога в ресурсе )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСписокЗначений",
      "internalName": "SetMenuInputList",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2507
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьСписокЗначений( имя_диалога, имя_элемента, список_значений ) Ищет в диалоге с указанным именем элемент с указанным именем. Элемент должен иметь тип - перечисляемое, но проверки на это не производится. Если диалог и элемент в нем найдены, то элементу устанавливается указанный список значений. Список значений - строка, значения должен идти друг за другом через разделитель \u0027\n\u0027",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Символ",
      "internalName": "CharFromCode",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 342
      },
      "briefDescription": "Функция Символ(код)",
      "detailedDescription": {
        "text": "Возвращает строку, состоящую из одного символа с указанным кодом",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСвойствоКолонки",
      "internalName": "SetPropColumnAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1458
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьСвойствоКолонки. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиВСтроке",
      "internalName": "FindSubStr",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 607
      },
      "briefDescription": "Функция НайтиВСтроке( строка, подстрока[,от какого символа искать] )",
      "detailedDescription": {
        "text": "Оставлена для совместимости. Отличается от Найти тем, что позиция найденного символа и от какого символа искать, считается от 0, При отсутствии подстроки в строке возвращает -1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаменитьВСтроке",
      "internalName": "ReplaceChars",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 317
      },
      "briefDescription": "Функция ЗаменитьВСтроке( строка, СтрокаЗаменяемыхСимволов, СтрокаСимволовНаКоторыеЗаменяем )",
      "detailedDescription": {
        "text": "Заменяет в строке символы, которые находятся в СтрокаЗаменяемыхСимволов на символы в строке СтрокаСиволовНаКоторыеЗаменяем Если у какого-то символа нет замены (т.е. СтрокаЗаменяемыхСимволов длиннее, чем СтрокаСимволовНаКоторыеЗаменяем), то он удаляется Возвращает измененную строку При замене и удалении учитывается регистр букв",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьЭлементы",
      "internalName": "EnableControlsCurrent",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 386
      },
      "briefDescription": "Функция РазрешитьЭлементы( имя элемента[, имя_элемента2...] )",
      "detailedDescription": {
        "text": "Разрешает указанные элементы у текущего окна",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Уровень",
      "internalName": "TreeLevel",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1136
      },
      "briefDescription": "Функция Уровень( объект )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СконвертироватьЗаплаткиВUTF8",
      "internalName": "ConvertClientPatchesToUTF8",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 207
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрописьюДеньги",
      "internalName": "SpellNumberToWords",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 738
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Прописью",
      "internalName": "SpellNumberToWords",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 738
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВерсияКомплекса",
      "internalName": "GetVersionString",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3448
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьАдрес",
      "internalName": "CreateAddress",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 535
      },
      "briefDescription": "Функция СоздатьАдрес( тип, число или объект )",
      "detailedDescription": {
        "text": "Создает запись указанного типа (для лицевого счета нужно 5 )внутри указанного объекта (число - номер записи, которая будет группой для созданного адресного объекта, объект же должен содержать такую запись) Адресному объекту присваивается номер в соответствии с правилами задачи Расчеты с абонентами (в т.ч. номер лицевого счета в нужном диапазоне) Функция возвращает номер созданной записи, а если вторым аргументом был объект - в нем запись будет заменена на вновь созданную",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогРесурсов",
      "internalName": "GetRxDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 989
      },
      "briefDescription": "Функция КаталогРесурсов()",
      "detailedDescription": {
        "text": "Возвращает полный путь к ресурсам В конце гарантированно стоит слеш",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Т16",
      "internalName": "To16",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1031
      },
      "briefDescription": "Функция Т16( число )",
      "detailedDescription": {
        "text": "Возвращает шестнадцатиричное представление целой части числа",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Предыдущий",
      "internalName": "PrevRecAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1711
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Предыдущий. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьТриггерыСинх",
      "internalName": "CreateTriggers",
      "sourceLocation": {
        "file": "MuzzleJ/Source/db_handlers.cpp",
        "line": 857
      },
      "briefDescription": "функция СоздатьТриггерыСинх( режим )",
      "detailedDescription": {
        "text": "создает триггеры синхронизации в программе в зависимости от режима: 0 или любое, отличное от 1 или 2 - создаются триггеры _modtrig и _deltrig 1 - создаются только триггеры _MODTRIG 2 - создаются только триггеры _DELTRIG",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КонфигФайл",
      "internalName": "GetIniFileObject",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1892
      },
      "briefDescription": "функция КонфигФайл() - создает объект для работы с INI файлом.",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиУлицу",
      "internalName": "FindStreet",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 255
      },
      "briefDescription": "Функция НайтиУлицу( строка )",
      "detailedDescription": {
        "text": "Ищет улицу по названию, при успешном поиске вернет объект, построенный на записи данной улицы (из таблицы Города). При неуспешном поиске вернет пустой объект без записи( проверять функцией ТипДанных - укажет, что нет записи или НомерЗаписи - вернет -1 )",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПерерасчетЛицевогоПериод",
      "internalName": "Recalc_LS2",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 487
      },
      "briefDescription": "Функция ПерерасчетЛицевогоПериод( номер_записи, месяц_начала_периода, месяц_окончания_периода, в_какой_месяц_помещать )",
      "detailedDescription": {
        "text": "Выполняет перерасчет лицевого (или объекта более высокого уровня) с указанным номером записи за указанный период (последовательно от месяца начала периода к месяцу окончания периода), помещая результаты перерасчета в указанный месяц Перерасчет может быть как назад (стандартный), так и вперед (Смоленская ЭСК), если это разрешено конфигурацией задачи Перерасчет завершается расчетом за месяц, в который помещены результаты (вместе с расчетом сальдо), если этот месяц находится в пределах периода перерасчета, иначе этот месяц (и сальдо) не рассчитывается",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьОкно",
      "internalName": "DisableWindowName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 571
      },
      "briefDescription": "Функция ЗапретитьОкно( имя окна )",
      "detailedDescription": {
        "text": "Запрещает все элементы у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьXmlФайл",
      "internalName": "LoadXMLFile",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 49
      },
      "briefDescription": "Функция ПрочитатьXmlФайл( имя_файла )",
      "detailedDescription": {
        "text": "читает переданный файл на сервере и заполняет выходной массив на основе xml",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешеноОкно",
      "internalName": "IsNameWindowEnabled",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 627
      },
      "briefDescription": "Функция РазрешеноОкно( имя окна )",
      "detailedDescription": {
        "text": "Проверяет, разрешено ли окно/диалог с указанным именем Если нет такого окна/диалога или оно запрещено, вернет 0, иначе 1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СвойствоЛьготы",
      "internalName": "GetHelpDataShort",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 389
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "строковые значения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПреобразоватьИзображение",
      "internalName": "TransformImage",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ImageView.cpp",
        "line": 167
      },
      "briefDescription": "Функция ПреобразоватьИзображение( имя_диалога, имя_ViewImage, режим )",
      "detailedDescription": {
        "text": "Преобразует изображение в зависимости от режима: 0 - Приблизить изображение (увеличить) 1 - Отдалить изображение (уменьшить) 2 - Подогнать размер изображения под размер владельца 3 - Подогнать размер изображения под ширину/высоту владельца 4 - Установить реальный размер изображеения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьЛогФайл",
      "internalName": "GetLogFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1445
      },
      "briefDescription": "Функция ПолучитьЛогФайл()",
      "detailedDescription": {
        "text": "Возвращает путь до лог файла текущего потока относительно каталога программы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВычислитьТарифыиОбъемыГруппУслуг",
      "internalName": "CalcTVServGroup",
      "sourceLocation": {
        "file": "Kvplata/source/func_lsinfo.cpp",
        "line": 447
      },
      "briefDescription": "Функция ВычислитьТарифыиОбъемыГруппУслуг( объект выборки начислений )",
      "detailedDescription": {
        "text": "Выполняет сложение тарифов и/или объемов входящих в группы услуги/подгрупп в соответствии с флагами \"Составляющая объема группы\" и \"Составляющая тарифа группы\". Если флаг на услуге дочерней записи установлен, содержимое поля дочерней записи добавляется к содержимому поля родительской записи, если же сброшен, в поле родительской записи оставляется максимальное из значений поля родительской и дочерней записей Операция выполняется рекурсивно - от услуг к группам верхнего уровня",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СчетчикПоЛицензии",
      "internalName": "GetCounterLic",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Counters.cpp",
        "line": 430
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СвернутьУзел",
      "internalName": "CollapseTreeItemName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1091
      },
      "briefDescription": "Функция СвернутьУзел( имя_окна, имя_дерева, имя_узла )",
      "detailedDescription": {
        "text": "сворачивает узел дерева с текстом имя_узла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокУслуг",
      "internalName": "GetServList",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 327
      },
      "briefDescription": "Функция СписокУслуг( Номер записи услуги или группы или номер услуги, режим )",
      "detailedDescription": {
        "text": "Возвращает массив, содержащий элементы с именами - номерами услуг или их номерами записей (элементы числового типа, имеют значение 1.0 для групп и 0.0 для услуг) Режим определяет, что передается и что возвращается Первый символ определяет, что передано ( У - номер услуги, З - номер записи ) Второй символ определяет, чем будут определяться имена элементов массива (У-номерами услуг, З-номерами записей) Если передан номер услуги 0 или номер записи -1 - массив будет пустым",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьРабочийМесяц",
      "internalName": "SetWorkMonth",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 752
      },
      "briefDescription": "Функция УстановитьРабочийМесяц( Месяц )",
      "detailedDescription": {
        "text": "Изменяет рабочий месяц на указанный (можно задавать любое число этого месяца)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЧтениеСостоянияСчетчиков",
      "internalName": "ReadCountersState",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1739
      },
      "briefDescription": "Функция ЧтениеСостоянияСчетчиков( месяц[, услуга] )",
      "detailedDescription": {
        "text": "Возвращает массив, характеризующий состояние индивидуальных и групповых счетчиков по указанной услуге (группе услуг) в течение указанного месяца Если услуга опущена или указан 0 - по всем услугам Массив будет содержать подобъекты 1, 2, 3... по числу интервалов в данном месяце, на которых состояние хотя бы одного счетчика по данной услуге меняется. Интервалы отсортированы по возрастанию дат Кроме того, есть переменная ЧислоИнтервалов Внутри каждого подобъекта будут подобъекты с именами 1,2,3, а также переменные ЧислоОбъектов, ДатНач, ДатКнц Каждый подобъект счетчика содержит переменные: НачалоДействия, ОкончаниеДействия, ПозицияОбъекта, НомерУслуги, Состояние, Среднее, Тарифность, Разрядность, Коэффициент, Тип (\"И\" - индивидуальный, \"Г\" - групповой, \"К\" - кустовой)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьКонтекстБД",
      "internalName": "CreateDBContext",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1353
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Формирует бинарные данные с контекстом для входа в бд\n*\n* @Функция СоздатьКонтекстБД( Строка ид, Строка имяПользователя [, Строка пароль [, Число парольЗашифрован]] )@\n*\n* @param[in] ид уникальный идентификатор (для АПИ - это ид сессии)\n* @param[in] имяПользователя имя пользователя\n* @param[in] пароль пароль пользователя\n* @param[in] парольЗашифрован если не 0, то переданный пароль зашифрован\n*\n* @return БинарныеДанные бинарные данные с контекстом для входа в бд\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ВОД",
      "internalName": "COborotDebet",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 363
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Текст",
      "internalName": "FormatValue",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 963
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КомпьютерКлиента",
      "internalName": "ClientCompName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3225
      },
      "briefDescription": "Функция КомпьютерКлиента()",
      "detailedDescription": {
        "text": "Возвращает имя компьютера клиента",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Переиндексировать",
      "internalName": "RebuildIndex",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 1232
      },
      "briefDescription": "Функция Переиндексировать( имя_таблицы, имя_индекса )",
      "detailedDescription": {
        "text": "Перестраивает указанный индекс таблицы MKD При отсутствии такого индекса ничего не делает",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьОписаниеРесурса",
      "internalName": "GetDescriptionResource",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 940
      },
      "briefDescription": "Функция ПолучитьОписаниеРесурса( имя_ресурса, тип_ресурса )",
      "detailedDescription": {
        "text": "Возвращает массив, содержащий описание ресурса",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДобавитьКолонку",
      "internalName": "InsColumnAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1608
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ДобавитьКолонку. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВРусскийФИО",
      "internalName": "FIOToRusObj",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 157
      },
      "briefDescription": "Функция ВРусскийФИО( текст )",
      "detailedDescription": {
        "text": "Из строки удаляются все символы, не являющиеся буквами русского алфавита или дефисами. Сходные по начертанию символы латинского алфавита заменяются русскими буквами. Строка разбивается на Фамилию, Имя, Отчество, которые записываются в объект с полями Фамилия, Имя, Отчество (разделителями рассматриваются пробел, точка, запятая, точка с запятой, двоеточие, подряд идущие разделители игнорируются).",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СрокДействияУслуги",
      "internalName": "GetServiceDates",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 2205
      },
      "briefDescription": "Функция СрокДействияУслуги( номер_услуги )",
      "detailedDescription": {
        "text": "Возвращает объект с переменными ДатНач и ДатКнц, в которых записаны дата начала и окончания действия услуги",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Запись_ДанныеКопирования",
      "internalName": "GetRecordUserData",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 1220
      },
      "briefDescription": "Функция Запись_ДанныеКопирования( объект )",
      "detailedDescription": {
        "text": "Возвращает сведения о копировании из записи объекта. Если в объекте записи нет, вернет -1. Рекомендуется использовать данную функцию на событие \"Модифицирована\" в выборке. Если это новая запись или открытая на редактирование существующая, функция вернет -1. Если же идет копирование, функция вернет номер копируемой записи. В этот момент текущая запись (\u0027.\u0027) уже внесена, можно получить ее номер.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Год",
      "internalName": "GetYear",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 812
      },
      "briefDescription": "Функция Год( Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьОкно",
      "internalName": "EnableWindowName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 592
      },
      "briefDescription": "Функция РазрешитьОкно( имя окна )",
      "detailedDescription": {
        "text": "Разрешает все элементы у указанного окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныйКореньДокументов",
      "internalName": "GetAccessDocRoot",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 499
      },
      "briefDescription": "Функция ДоступныйКореньДокументов( имя_выборки, тип_корневой_папки )",
      "detailedDescription": {
        "text": "Получает номер доступного для записи корня ведомостей в указанной выборке Если нет никаких ограничений, то возвращается номер папки самого верхнего уровня с указанным типом корневой папки (все документы данной выборки находятся в этой папке или вложенных в нее). Если такая папка недоступна, то возвращается номер записи папки с минимальным уровнем вложенности. Если же доступных для записи (редактирования) папок нет в принципе, то возвращается -1.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоказатьФлаги",
      "internalName": "ShowClusterButtons",
      "sourceLocation": {
        "file": "MuzzleJ/Source/CLUSTER.CPP",
        "line": 279
      },
      "briefDescription": "Функция ПоказатьФлаги( имя_окна_диалога, имя_флагов, \"m\" )",
      "detailedDescription": {
        "text": "В указанном окне показывает все флаги CheckBox с указанным именем, у которых текст начинается на ~m, где m - произвольный символ Если имя_окна_диалога \u003d\u003d \"\", то берет активный диалог",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьПоле",
      "internalName": "SetFields",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 416
      },
      "briefDescription": "Функция УстановитьПоле( объект, имя таблицы, имя поля, значение [,имя поля, значение] )",
      "detailedDescription": {
        "text": "В записи-контейнере объекта устанавливает поля в записи конкретной таблицы Имя таблицы (строка) - в записи какой таблицы устанавливать поля Имя поля (строка) Значение - любой тип При отсутствии в объекте записи ошибок не выдает, просто ничего не делает. В этом случае вернет 1 При отсутствии в контейнере такой таблицы ошибок не выдает, просто ничего не делает. В этом случае вернет 2 При отсутствии поля в записи эта пара аргументов игнорируется, но ошибок не возникает. В этом случае вернет 3 Если все аргументы корректны, вернет 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходСчетчикаПоОбъектам",
      "internalName": "ValuesCountersObjects",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1168
      },
      "briefDescription": "Функция РасходСчетчикаПоОбъектам( [ДатНач [,ДатКнц]] )",
      "detailedDescription": {
        "text": "Загружает данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Суммирует их по счетчикам, а не по услугам. Если не задана ДатКнц - то вместо нее берется последнее число от рассчитываемого месяца. Если не заданы ни ДатНач, ни ДатКнц - читаются показания от первого до последнего числа рассчитываемого месяца. После выполнения создает массив мСчетчики, индексом которого является row_id таблицы \"Показания счетчиков\" Внутри хранятся переменные \"Расход\" - сумма по полю ИтоговыйРасход, \"Номер услуги\" и \"ЗаводскойНомер\" Если нет показаний счетчиков, вернет пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Спросить",
      "internalName": "Ask",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 290
      },
      "briefDescription": "Функция Спросить( ... )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьКонтекст",
      "internalName": "SQLDriverSetContext",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 537
      },
      "briefDescription": "Функция УстановитьКонтекст( контекст )",
      "detailedDescription": {
        "text": "Устанавливает контекстную информацию для всех сессий подключения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Разбить",
      "internalName": "DivideStr",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 764
      },
      "briefDescription": "Функция Разбить( строка, разделитель, имена переменных )",
      "detailedDescription": {
        "text": "Разбивает строку на части по указанному разделителю При пустом разделителе разбивает на одиночные символы Фрагменты строки помещает в указанные переменные, которые становятся строками или длинными строками в зависимости от длины строки Если передается одна переменная, она будет рассматриваться как массив, даже если он еще не существует, в нем будут создаваться элементы 1,2,3...",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Число",
      "internalName": "ToDouble",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1016
      },
      "briefDescription": "Функция Число( переменная любого типа )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ФорматСтроки",
      "internalName": "GetStringFormat",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 897
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеПоСвязаннымСчетчикам",
      "internalName": "GetLinkCounterData",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1055
      },
      "briefDescription": "Функция ДанныеПоСвязаннымСчетчикам()",
      "detailedDescription": {
        "text": "Возвращает массив, который содержит данные о Расходе и ИтоговомРасходе для счетчиков связанного лицевого. индексы массива: номер записи главного лицевого, номер записи подчиненного лицевого далее идут переменные \"_Тип связи счетчиков\", \"Параметры связи\", \"Процент отчислений\" и вложенные массивы с именем - номер услуги, в которых индекс вложенного массива - номер тарифа Далее идут переменные \"Расход\", \"ИтоговыйРасход\" Если расчет производится из договора, возвращает данные, загруженные до начала расчета, иначе загружает данные",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Int_32",
      "internalName": "CreateInt32Token",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1828
      },
      "briefDescription": "Функция Int_32( число )",
      "detailedDescription": {
        "text": "Создает переменную, которая будет передаваться в COM-объект как VT_I4",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьINIФайлыВБазу",
      "internalName": "WriteINIFileIntoDb",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 215
      },
      "briefDescription": "Функция ЗаписатьINIФайлыВБазу( строка или объект со списком строк )",
      "detailedDescription": {
        "text": "Читает переданные файлы и заносит их таблицу Конфигурация в свою сессию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВозобновитьАудио",
      "internalName": "OurResumeSound",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2497
      },
      "briefDescription": "функция \"ВозобновитьАудио()",
      "detailedDescription": {
        "text": "\" возобновляет воспроизведение текущего аудио-файла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РабМес",
      "internalName": "GetWorkMonth",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 28
      },
      "briefDescription": "Функция РабочийМесяц()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АдресЛицевогоФормат",
      "internalName": "GetLSAddressFormat",
      "sourceLocation": {
        "file": "Kvplata/source/func_address.cpp",
        "line": 70
      },
      "briefDescription": "Функция АдресЛицевогоФормат( объект )",
      "detailedDescription": {
        "text": "Если объект содержит запись из таблицы Лицевые счета, возвращает адрес соответствующего объекта (строку) Делает адрес типа \"улица дом квартира\" Номера дома и квартиры выровнены вправо (под них отведены 4 символа) В противном случае (нет записи в объекте или запись из другой таблицы) возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОпИ",
      "internalName": "OperationAnd",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 415
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Квартал",
      "internalName": "TextCvartal",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 307
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РежимБлокировки",
      "internalName": "LockResourceMode",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 591
      },
      "briefDescription": "Функция РежимБлокировки( имя ресурса )",
      "detailedDescription": {
        "text": "Возвращает режим блокировки, полученный владельцем блокировки на конкретный ресурс приложения Возможные режимы: NoLock, Exclusive",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "url_decode",
      "internalName": "url_decode",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 537
      },
      "briefDescription": "Функция url_decode( строка[, кодировка ] )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЧислоПолей",
      "internalName": "NumberFields",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 985
      },
      "briefDescription": "Функция ЧислоПолей(объект)",
      "detailedDescription": {
        "text": "Возвращает число полей в записи объекта. Если в объекте нет записи, вернет 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаМесяц",
      "internalName": "ForMonths",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 263
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеУПУслуги",
      "internalName": "GetUkProvServiceDatas",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_state.cpp",
        "line": 122
      },
      "briefDescription": "Функция ДанныеУПУслуги( Номер_услуги, УК, Поставщик, Дата )",
      "detailedDescription": {
        "text": "Возвращает объект, содержащий все тарифы и нормы указанной услуги на указанную дату для указанного УК и Поставщика Объект содержит переменные \"Номер услуги\", \"Норма\", \"Норм1\", \"Норм2\", \"Норм3\", \"НормаСч1\", \"НормаСч2\", \"НормаСч3\", \"НормаЛг1\", \"НормаЛг2\", \"НормаЛг3\", \"НормаСуб1\", \"НормаСуб2\", \"НормаСуб3\" \"Тариф\", \"Сверх\", \"Полный\", \"ТарифПоставщика\", \"ТарифПоСчетчику\", \"Тариф1\", \"Тариф2\", \"Тариф3\", \"Тариф4\", \"Тариф5\", \"Тариф6\" \"ДатНачТарифа\", \"ДатНачНормы\" - даты начала действия тарифа и нормы, действующих на указанную дату \"ДатКнцНТ\" - дата окончания текущего интервала действия тарифа/нормы Кроме того, содержится вложенный объект Калькуляция, внутри которого содержатся вложенные объекты с именами - номерами услуг (статей калькуляции), внутри каждого такого объекта - переменные \"Тариф\", \"Сверх\", \"Полный\", \"ТарифПоставщика\", \"ТарифПоСчетчику\", \"Тариф1\", \"Тариф2\", \"Тариф3\", \"Тариф4\", \"Тариф5\", \"Тариф6\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Время",
      "internalName": "Text2TimeFrmt",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 996
      },
      "briefDescription": "Функция Время( строка, строка формата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "День",
      "internalName": "GetDay",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 785
      },
      "briefDescription": "Функция День( Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВывестиСтатус",
      "internalName": "WriteStatusAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 209
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ВывестиСтатус. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДатаВремя",
      "internalName": "GetCurDTDateTimeObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3547
      },
      "briefDescription": "Функция ДатаВремя() - создает объект для работы с типом ДатаВремя (инициализирует текущей датой)",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Присвоить",
      "internalName": "StoreVarsInObj",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 384
      },
      "briefDescription": "Функция Присвоить(объект, имя переменной, значение [, имя переменной, значение ...] )",
      "detailedDescription": {
        "text": "Создает (изменяет) переменные в объекте с соответствующими именами и значениями Имя переменной пишется без кавычек или в апострофах, допустимо указание строковой переменной в квадратных скобках",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ШифроватьДанные",
      "internalName": "EncodeData",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2815
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЗаписьВПанели",
      "internalName": "SetRecordPanelAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3129
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьЗаписьВПанели. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоставКатегорииЛьгот",
      "internalName": "FillHelpCat",
      "sourceLocation": {
        "file": "Kvplata/source/servcat.CPP",
        "line": 506
      },
      "briefDescription": "Функция СоставКатегорииЛьгот( объект с записью из таблицы Категории льгот )",
      "detailedDescription": {
        "text": "Возвращает объект, содержащий два подобъекта - Льготы и Категории, заполненные данными, базирующимися на записи объекта Массив Льготы содержит подобъекты с индексами - номерами льгот и элементами НомерЗаписи и всеми полями из записи соответствующей льготы. Массив Категории содержит элементы с индексами, формируемыми путем соединения пятиразрядных номеров порядка при печати всех уровней Например, индексы могут выглядеть так 00001 26-ЖКХ 0000100001 Инвалиды 000010000100001 Инвалиды 1 гр 000010000100002 Инвалиды 2 гр 0000100001FFFFF завершение уровня 0000100002 Ветераны и т.д. (номера порядка при печати должны быть уникальны в пределах уровня, для льгот номер 0 заменяется на номер льготы) Элементы являются массивами, содержат подобъекты Тип (0-Категория, 1-Льгота, 2-Элемент, завершающий текущий уровень ) Уровень (счет от 0) Название (для узлов - название категории, для льгот - название льготы, для элемента завершения - название завершаемой категории) только для льгот НомерЛьготы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьЗапись",
      "internalName": "DeleteTableDetailRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 592
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УдалитьЗапись. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИзвлечьРасширениеФайла",
      "internalName": "ExtractFileExt",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1366
      },
      "briefDescription": "Функция ИзвлечьРасширениеФайла( имя_файла )",
      "detailedDescription": {
        "text": "Возвращает расширение файла Примеры: C:\\Work\\File\\test.txt -\u003e .txt",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьПолныйПуть",
      "internalName": "ConvertToFullPath",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1371
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьПоляСвязи",
      "internalName": "GetLinkFields",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 148
      },
      "briefDescription": "Функция ПрочитатьПоляСвязи( объект )",
      "detailedDescription": {
        "text": "Переносит все значения полей связи 1-1, M-1, Иерархия, Условная М в переменные объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьНаборПеременных",
      "internalName": "CreateContainer",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_REP.CPP",
        "line": 206
      },
      "briefDescription": "Функция СоздатьНаборПеременных( Строки или объекты ... )",
      "detailedDescription": {
        "text": "Возвращет объект-набор переменных, который содержит переменные с именами, переданными в качестве строковых параметров, а также все числовые переменные из переданных объектов. Все переменные получают значение 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьИмяДиалогаОтчета",
      "internalName": "GetReportDialogName",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4749
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить имя диалога отчета\n*\n* @Функция ПолучитьИмяДиалогаОтчета(Строка имяОтчета)@\n*\n* @return строка с именем диалога отчета или null, если отчет не найден\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ДнейДействияПараметра",
      "internalName": "ParamDaysCount",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 213
      },
      "briefDescription": "Функция ДнейДействияПараметра( имя_параметра[, значение1[, значение2...])",
      "detailedDescription": {
        "text": "Возвращает число дней в текущем месяце расчета, в которых указанный параметр имеется и имеет указанные значения (если они не опущены)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Таблица",
      "internalName": "GetTableObj",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1479
      },
      "briefDescription": "Функция Таблица( объект )",
      "detailedDescription": {
        "text": "Создает объект от таблицы основной записи объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетСальдо",
      "internalName": "CalcSaldo",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 109
      },
      "briefDescription": "Функция РасчетСальдо( месяц )",
      "detailedDescription": {
        "text": "Если месяц открыт или это последний закрытый месяц и разрешен его расчет в конфигурации, выполняет расчет только сальдо фонда за указанный месяц, возвращает пустую строку Если месяц ранее последнего закрытого, или последний закрытый, но в конфигурации не разрешен его расчет, или пользователь прерывает процесс расчета, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогПрограммы0",
      "internalName": "GetProgramDir0",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 910
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТолькоЧтение",
      "internalName": "SetReadOnly",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 410
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "ТолькоЧтение( объект ) Устанавливает на объект признак \"только чтение\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОтключитьОбмен",
      "internalName": "UserDisableExcPress",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 265
      },
      "briefDescription": "Функция ОтключитьОбмен()",
      "detailedDescription": {
        "text": "Если используется словарь excpress.dic, его действие отключается",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходСчетчика2",
      "internalName": "ValuesCounters2",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 373
      },
      "briefDescription": "Функция РасходСчетчика2( [режим] )",
      "detailedDescription": {
        "text": "Загружает платежи по услугам и данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Функция РасходСчетчика2( [режим] ) Загружает платежи по услугам и данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Возвращает объект, содержащий вложенные массивы мРасход, мНаличиеПоказаний, мСуммы, мСчМес Если опущен Режим или он отличен от \"У\", подводятся итоги по группам услуг, иначе - по услугам Cоответственно, индексом в массивах служит номер группы или услуги В массиве мРасход суммируются данные по итоговому расходу (с учетом коэффициента трансформации)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписьТолькоДляЧтения",
      "internalName": "SetRecordReadOnly",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4573
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Устанавливает, является ли запись только для чтения\n*\n* @Функция ЗаписьТолькоДляЧтения(Объект запись, Число значение)@\n*\n* @param[in] запись объект с записью\n* @param[in] значение 1, если запись только для чтения, и 0 - иначе\n* @return 1, если запись только для чтения, и 0 - иначе\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "Пользователь",
      "internalName": "ReadUser",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 32
      },
      "briefDescription": "Функция Пользователь()",
      "detailedDescription": {
        "text": "Возвращает объект, соответствующий зарегистрировавшемуся пользователю Содержит поле Имя, Код, все поля записи сотрудника, его параметры",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Команда",
      "internalName": "StoreCmd",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1949
      },
      "briefDescription": "Функция Команда( код команды или текст команды [,выражение] )",
      "detailedDescription": {
        "text": "Помещает команду в очередь",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныеУлицы0",
      "internalName": "AvailableStreets",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 763
      },
      "briefDescription": "Функция ДоступныеУлицы0( массив, требуемый_доступ )",
      "detailedDescription": {
        "text": "Принимает массив, индексами которого являются номера записей в таблице Лицевые счета, значениями элементов - их полный иерархический путь Возвращает разделенную запятыми строку, содержащую те номера записей из числа индексов элементов массива, на которые имеется право хотя бы на просмотр (если требуемый_доступ\u003d\u003d0) или не ниже, чем на изменение (если требуемый_доступ\u003d\u003d1)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиЗаписьТаблицы",
      "internalName": "FindRecNum",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 173
      },
      "briefDescription": "Функция НайтиЗаписьТаблицы( объект, имя индекса[, искать от[[,имена полей узлов][,длина ключа]] )",
      "detailedDescription": {
        "text": "Возвращает номер найденной записи или -1, если не нашел Поля связи можно установить прямо переменными в объекте Если индекс содержит поля иерархии и они имеют значение \"Узел\", имена соответствующих полей следует перечислить в списке \"Имена полей узлов\" (это должны быть строковые константы, допустимо использовать \"\" для условного внесения выражением типа Узел(объект,\"имя поля\") ? \"имя поля\":\"\") Если параметр \"Искать от\" опущен или -1 - поиск идет от начала таблицы, иначе - от указанного номера записи При успешном поиске в \"Искать от\" будет занесен номер найденной записи (для последующего продолжения поиска), если это имя переменной Если присутствует значение \"Длина ключа\", при поиске проверяется только данное число начальных байт в ключе, а не все его поля (поиск по начальной части индекса)Запись в объекте не повреждается",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИзменениеСостоянияМесяца",
      "internalName": "ChangeMonthState",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 659
      },
      "briefDescription": "Функция ИзменениеСостоянияМесяца( код команды )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Дата",
      "internalName": "SetDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 862
      },
      "briefDescription": "Функция Дата( день, месяц, год )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Макс",
      "internalName": "MaxDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 614
      },
      "briefDescription": "Функция Макс( Дата, Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВключитьОбмен",
      "internalName": "UserEnableExcPress",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 275
      },
      "briefDescription": "Функция ВключитьОбмен()",
      "detailedDescription": {
        "text": "Если используется словарь excpress.dic, и его действие отключено, включает",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходСвязанныхСчетчиков",
      "internalName": "VolumeLinkCounters",
      "sourceLocation": {
        "file": "Kvplata/source/func_counters.cpp",
        "line": 22
      },
      "briefDescription": "Функция РасходСвязанныхСчетчиков( номер_записи_лицевого, ДатНач, ДатКнц )",
      "detailedDescription": {
        "text": "Достает для лицевого с указанным номером записи acc_pos все связанные лицевые, действующие в указанном промежутке дат [begin_date; end_date] Для всех связанных лицевых получаем все заведенные на них счетчики, без проверки на даты. Для всех счетчиков достаем показания, у которых поле [Дата] попадает в тот же интервал дат. На выходе получаем многомерный массив. Первый индекс - порядковый номер найденного связанного лицевого (не номер записи!), второй - номер услуги, третий - номер тарифа. Подмассив по тарифам содержит суммы по полю \"Итоговый расход\" для одного связанного лицевого, одной услуги и одного тарифа. Так же в массиве содержится информация о параметрых связи, номерах записей связанных лицевых счетов и т.п.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПодменитьФайлРесурса",
      "internalName": "ReplaceResFile",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3302
      },
      "briefDescription": "Функция ПодменитьФайлРесурса( заменяемый ресурс, на какой меняем ресурс )",
      "detailedDescription": {
        "text": "подменить имя файла ресурса",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПереносТаблицы",
      "internalName": "SQLToTable",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1536
      },
      "briefDescription": "Функция ПереносТаблицы( объект-соединение, имя файла таблицы )",
      "detailedDescription": {
        "text": "Создает таблицу по результатам запроса, переносит в нее последовательно все строки. Возвращает объект - таблицу Если соединение не открыто, не выполнен запрос или прочитаны уже все записи, возвращается пустой объект (Размер(о)\u003d\u003d0)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СвободныйНомерДоговора",
      "internalName": "FreeContractNumber",
      "sourceLocation": {
        "file": "Kvplata/source/ur_lic/ur_lic.cpp",
        "line": 106
      },
      "briefDescription": "Функция СвободныйНомерДоговора( имя_поля_иерархии, текущая_папка, имя_поля_по_которому_проверяется_уникальность_договора, минимальное_значение_в_поле_уникальности )",
      "detailedDescription": {
        "text": "Возвращает свободный номер договора из диапазона (max(минимальное_значение_в_поле_уникальности + 1,[Минимальный номер]) .. [Максимальный номер]), установленного на одной из родительских папок (если ни на одной не установлен - берется свободный больший 0) Возвращает 0, если в диапазоне нет свободных номеровПри первом вызове параметр минимальное_значение_в_поле_уникальности следует установить в 0. После вызова получается некоторое значение свободного номера. Если окажется, что договор с таким номером открыт в данный момент, но еще не занесен в базу (выясняется через блокировку номера), то ранее полученный свободный номер следует передать в качестве этого параметра, чтобы получить следующий свободный номер (и т.д. в цикле)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЕстьДиалог",
      "internalName": "DialogExists",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 505
      },
      "briefDescription": "Функция ЕстьДиалог( Имя в ресурсе )",
      "detailedDescription": {
        "text": "Возвращает 1, если указанный диалог существует или 0, если такого диалога нет в ресурсах",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПерерасчетСальдоЛицевого",
      "internalName": "Recalc_SaldoLS",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 607
      },
      "briefDescription": "Функция ПерерасчетСальдоЛицевого( номер_записи, месяц_начала_периода, месяц_окончания_периода, в_какой_месяц_помещать )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Клиент_ЗапроситьЗначение",
      "internalName": "ClientGetRegValue",
      "sourceLocation": {
        "file": "Kvplata/source/func_registry.cpp",
        "line": 61
      },
      "briefDescription": "Функция Клиент_ЗапроситьЗначение( name, def_value )",
      "detailedDescription": {
        "text": "возвращает значение сохраненное в реестр клиента в секции JavaSoft/Prefs name - имя параметра def_value - значение по умолчанию, возвращаемое, если параметр не будет найден.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВерсияПрограммы",
      "internalName": "StackVersion",
      "sourceLocation": {
        "file": "Kvplata/source/application_ext.CPP",
        "line": 1257
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УслугиИнтервала",
      "internalName": "GetServByInterval",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1973
      },
      "briefDescription": "Функция УслугиИнтервала( номер интервала )",
      "detailedDescription": {
        "text": "Возвращает строку услуг, действующих в течение месяца расчета на интервале дат с указанным номером (счет от 1 до значения, возвращаемого функцией КоличествоИнтервалов) Строка имеет вид ,услуга1,услуга2,услуга3,... Если номер интервала 0, возвращаются услуги, действующие на текущем интервале расчета (ДатНач..ДатКнц)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнешнийОбъект",
      "internalName": "CreateComObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1788
      },
      "briefDescription": "Функция ВнешнийОбъект( ProgID[, Тихий режим] )",
      "detailedDescription": {
        "text": "Создает объект, внутри которого хранится интерфейс доступа IDispatch указанного COM-сервера На эту функцию есть внешняя ссылка, за счет этого файл включается в сборку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "БлокироватьСтатус",
      "internalName": "BlockStatus",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 231
      },
      "briefDescription": "Функция БлокироватьСтатус()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьКонстанту",
      "internalName": "GetConstantValue",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 36
      },
      "briefDescription": "Функция ПрочитатьКонстанту( дата, имя константы )",
      "detailedDescription": {
        "text": "Читает строковое значение указанной константы, действующее на указанную дату Если такой константы нет или еще не действует, вернет \"\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапуститьОтладчик",
      "internalName": "StartDebugServer",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/MLangHelpers.cpp",
        "line": 697
      },
      "briefDescription": "Функция ЗапуститьОтладчик( [номер порта \u003d 9229] )",
      "detailedDescription": {
        "text": "Запускает отладочный сервер на указанном порту. Если отладчик уже запущен на этом порту, то функция ничего не делает.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписьВЗакрытомПериоде",
      "internalName": "IsRecordClosedPeriod",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4594
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Проверяет, является ли запись в закрытом периоде\n*\n* @Функция ЗаписьВЗакрытомПериоде(Объект запись, Дата открытыйМесяц)@\n*\n* @param[in] запись объект с записью\n* @param[in] открытыйМесяц открытый месяц\n* @return 1, если запись в закрытом периоде, и 0 - иначе\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ПерерасчетЛицевыхПериод",
      "internalName": "Recalc_LS_Set",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 524
      },
      "briefDescription": "Функция ПерерасчетЛицевыхПериод( массив_лицевых, месяц_начала_периода, месяц_окончания_периода, в_какой_месяц_помещать )",
      "detailedDescription": {
        "text": "Выполняет перерасчет лицевых с указанными номерами записей из массива или запроса или временной таблицы за указанный период (последовательно от месяца начала периода к месяцу окончания периода), помещая результаты перерасчета в указанный месяц Перерасчет может быть как назад (стандартный), так и вперед (Смоленская ЭСК), если это разрешено конфигурацией задачи Перерасчет завершается расчетом за месяц, в который помещены результаты (вместе с расчетом сальдо), если этот месяц находится в пределах периода перерасчета, иначе этот месяц (и сальдо) не рассчитывается",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИндексВыпадающегоСписка",
      "internalName": "GetComboBoxInd",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2552
      },
      "briefDescription": "Функция ИндексВыпадающегоСписка( Имя_Диалога, Имя_ВыпСписка )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УпаковатьДанные",
      "internalName": "CompressDataFunc",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2414
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеФлага",
      "internalName": "GetFlagState",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 685
      },
      "briefDescription": "Функция СостояниеФлага( ИмяФлага )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьКлючШифр",
      "internalName": "GenerateEncryptKey",
      "sourceLocation": {
        "file": "MuzzleJ/Source/PASSWORD.CPP",
        "line": 86
      },
      "briefDescription": "Функция СоздатьКлючШифр()",
      "detailedDescription": {
        "text": "Создает ключ для шифрования",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "МесяцевПоТарифам",
      "internalName": "MonthByTarif",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 481
      },
      "briefDescription": "Функция МесяцевПоТарифам()",
      "detailedDescription": {
        "text": "Загружает данные о расходе по индивидуальным счетчикам, без расхода по групповым счетчикам, за месяц расчета Критерием загрузки служит поле Дата (по умолчанию) или Расчетный месяц (если в !stack_ini установлено LoadCountersByMonth\u003d1)Возвращает объект, имеющий два индекса - номер услуги и номер тарифа В элементах суммируются данные по числу месяцев счетчика Для каждой услуги создается число записей по максимальному числу тарифов счетчика, для которого есть реальные показания. Например, если по услуге 160 имеется двухтарифный счетчик, но показания есть только по тарифу 0, будут созданы элементы 160.0 с реальным числом месяцев и 160.1 с нулевым. Если же по счетчику никаких нет расходов в текущем месяце, то и объектов для него не создается независимо от числа тарифов",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УвеличитьСчетчик",
      "internalName": "IncreaseCounter",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Counters.cpp",
        "line": 417
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОпИЛИ",
      "internalName": "OperationOr",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 420
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Сетка",
      "internalName": "GetDataGridAll",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
        "line": 540
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Сетка. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "rand_char",
      "internalName": "GenerateRandomCharacter",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 292
      },
      "briefDescription": "Функция rand_char()",
      "detailedDescription": {
        "text": "Возвращает случайным образом один символ из латинских букв или цифр",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьЗаголовок",
      "internalName": "GetTitleAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 189
      },
      "briefDescription": "Функция ПрочитатьЗаголовок()",
      "detailedDescription": {
        "text": "Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "atan",
      "internalName": "FuncAtan",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2362
      },
      "briefDescription": "Функция atan(число)",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПозицияКурсора",
      "internalName": "CursorPosAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2417
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПозицияКурсора. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Диалог",
      "internalName": "AskDlg",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 577
      },
      "briefDescription": "Диалог( имя )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнестиЗаписьВыборки",
      "internalName": "InsSelTableRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 398
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Обязательно использование данной функции в случае выборок с полями типа \"Указатель\", по крайней мере, если поля из связанных таблиц содержатся в индексе",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЖдатьОбъекты",
      "internalName": "WaitMultipleSyncObjects",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 663
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПереносТаблицыSQL",
      "internalName": "SQLTableToSQLServer",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1548
      },
      "briefDescription": "Функция ПереносТаблицыSQL( объект-соединение, имя-таблицы )",
      "detailedDescription": {
        "text": "перенос данных из ODBC-запроса в таблицу tablename на текущем сервере. можно использовать имя таблицы в знаках ~ или писать полностью базу и схему. вернет 0 при ошибке или 1 - при успешном выполнении",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьДоступКСерверу",
      "internalName": "CloseAccessToServer",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 856
      },
      "briefDescription": "Функция ЗапретитьДоступКСерверу( логин )",
      "detailedDescription": {
        "text": "Удаляет указанного пользователя с сервера (login и user)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПереместитьсяВФайле",
      "internalName": "FFileSeek",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 128
      },
      "briefDescription": "Функция ПереместитьсяВФайле(объект_файл,новая_позиция)",
      "detailedDescription": {
        "text": "В случае, если файл открыт, переводит указатель в файле на данную позицию (счет от 0 от начала)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НачисленияЛицевого",
      "internalName": "ShowNac",
      "sourceLocation": {
        "file": "Kvplata/source/func_lsinfo.cpp",
        "line": 215
      },
      "briefDescription": "Функция НачисленияЛицевого( номер_записи_лицевого_счета, месяц )",
      "detailedDescription": {
        "text": "Создает объект, хранящий начисления и сальдо лицевого с указанным номером записи за указанный месяц",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьИзображение",
      "internalName": "ClearImage",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ImageView.cpp",
        "line": 181
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьСписокФлагов",
      "internalName": "GetListCheck",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2399
      },
      "briefDescription": "Функция ПолучитьСписокФлагов( Имя_Диалога, Имя_ВыпСписка, отмеченные )",
      "detailedDescription": {
        "text": "Для ComboBox получает информацию о наличии галок отмеченные - 1 вернуть только отмеченные возвращается массив - ключ порядковый номер строки или номер записи если был установлен, значение 0 или 1 (есть или нет галка)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПозицияРедактора",
      "internalName": "SetPositionEditor",
      "sourceLocation": {
        "file": "MuzzleJ/Source/editor.cpp",
        "line": 1046
      },
      "briefDescription": "Функция ПозицияРедактора( имя_окна, имя_элемента, номер_строки, позиция_в_строке )",
      "detailedDescription": {
        "text": "Скроллирует редактор до указаной строки, позиции в строке Если номер_строки, позиция_в_строке \u003c 0, то отсчет строки и позиции пойдет с конца",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПерейтиВРаздел",
      "internalName": "GoToSection",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 548
      },
      "briefDescription": "Функция ПерейтиВРаздел( имя окна, имя элемента, корень )",
      "detailedDescription": {
        "text": "Перейти в нужный раздел TreeBrows",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Формат",
      "internalName": "SetFormat",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1119
      },
      "briefDescription": "Функция Формат( имя переменной, формат )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "DotNet",
      "internalName": "CreateDotNetObj",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1871
      },
      "briefDescription": "Функция DotNetObj( имя_класса[, параметры конструктора объекта] )",
      "detailedDescription": {
        "text": "создает объект .Net",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "tan",
      "internalName": "FuncTan",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2349
      },
      "briefDescription": "Функция tan(число)",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПаузаАудио",
      "internalName": "OurPauseSound",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2490
      },
      "briefDescription": "функция \"ПаузаАудио()",
      "detailedDescription": {
        "text": "\" приостанавливает воспроизведение текущего аудио-файла",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьЭлемент",
      "internalName": "DisableControlCurrent",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 240
      },
      "briefDescription": "Функция ЗапретитьЭлемент( имя элемента)",
      "detailedDescription": {
        "text": "Запрещает элемент у текущего окна(используется имя из ресурса)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьКореньПоТипуДокумента",
      "internalName": "GetRootByDocType",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4853
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогВнешнихФайлов",
      "internalName": "GetExtFileDir",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 18
      },
      "briefDescription": "Функция КаталогВнешнихФайлов()",
      "detailedDescription": {
        "text": "Возвращает полный путь к каталогу, в который переносятся внешние файлы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьДополнительныйЗапрос",
      "internalName": "ComboAddQuery",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2539
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "УстановитьДополнительныйЗапрос( ИмяДиалога, ИмяСписка, СтрокаЗапроса ) Если предположительно запрос работает долго, то после ввода n(пока явно 3) количство символв в комбобокс c клиента отправляется строка условия. Например: мы ф-ией устанвливаем полный запрос и дополнительную строку \"Название like %\", а с клиента придет дополнение к этой строке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеСчетчиков",
      "internalName": "ObjectState",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1515
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СостояниеСчетчиков( дата, услуга ) Возвращает массив, характеризующий состояние счетчиков по указанным услугам/группам услуг на указанную дату В качестве номера услуги/группы может быть передано число или строка чисел, разделенных запятой Массив будет содержать следующие переменные: Состояние, Среднее, СписокСостоянийсостояние на указанную дату Состояние Среднее СписокСостояний счетчиков нет 0 0 \"\" один счетчик его состояние его среднее строка с одним числом - состоянием несколько счетчиков в одном состоянии это состояние сумма средних список с одним числом - состоянием (в состоянии не 0 и не 1) несколько счетчиков в разных состояниях ведущее состояние сумма средних список уникальных чисел через запятую (в состоянии не 0 и не 1)Сочетание состояний Ведущее 0 и 1 1 0 и 2 2 0 и 3 0 0 и иное иное \n1 и 2 1 1 и 3 1 1 и иное иное 2 и 3 2 2 и иное иноеАнализируется состояние индивидуальных и кустовых счетчиков",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Константа",
      "internalName": "GetCnst",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 289
      },
      "briefDescription": "Функция Константа( дата, строка )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДатаОкончанияЛицензии",
      "internalName": "GetVALIDTHROUGH",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3440
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗашифроватьПароль",
      "internalName": "EncryptPassword",
      "sourceLocation": {
        "file": "MuzzleJ/Source/PASSWORD.CPP",
        "line": 102
      },
      "briefDescription": "Функция ЗашифроватьПароль( пароль[, ключ ][, прежний_ключ] )",
      "detailedDescription": {
        "text": "Шифрует пароль pwd ключом в prms или ключом по-умолчанию Если передан прежний_ключ, то пароль будет дешифрован старым ключом и зашифрован новым ключом - этот режим вызван не возможность хранить в табличной выборке более чем одного бинарного поля",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеПотоков",
      "internalName": "GetStateThread",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1453
      },
      "briefDescription": "Функция СостояниеПотоков( массивИД )",
      "detailedDescription": {
        "text": "массивИД - массив, индексами элементов которого являются идентификаторы потоков В массиве с идентификаторами потоков проставляются значения 0 или 1 ( работает поток или нет )",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Сброс",
      "internalName": "ClearObject",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 102
      },
      "briefDescription": "Функция Сброс( объект )",
      "detailedDescription": {
        "text": "Удаляет из объекта все элементы. При наличии записи в объекте инициализирует ее (т.е. очищаются все поля и номер становится -1 ) и инициализирует объект по пустой записи",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СохранитьЗапись",
      "internalName": "SaveTableDetailRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 706
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СохранитьЗапись. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КонфигурацияПотока",
      "internalName": "GetThreadCfgObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 258
      },
      "briefDescription": "Функция КонфигурацияПотока()",
      "detailedDescription": {
        "text": "Возвращает объект, содержащий переменные из объекта потока",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Сохранить",
      "internalName": "SaveTableRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 664
      },
      "briefDescription": "Функция СохранитьЗапись( объект )",
      "detailedDescription": {
        "text": "Переносит данные из объекта в его запись (таблица или выборка) (включая поля связи, для установки полей иерархии в значение \"Узел\" присвоить переменной ф_Узел значение 1 ( ф-имя поля иерархии), для полей условной связи со стороны 1 определить переменную ф_Таблица, ей присвоить имя связанной таблицы ), если запись в таблице или выборке существует, заменяет ее, в противном случае вносит новую Возвращает номер записи",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Файл",
      "internalName": "GetFileObject",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1721
      },
      "briefDescription": "функция Файл() - создает объект для работы с файлом.",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыгрузитьРесурсыБин",
      "internalName": "WriteUserBin",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2619
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДеньНедели",
      "internalName": "DayOfWeek",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 821
      },
      "briefDescription": "Функция ДеньНедели( дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИДПотока",
      "internalName": "GetThreadID",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1428
      },
      "briefDescription": "Функция ИДПотока()",
      "detailedDescription": {
        "text": "возвращает ИД текущего потока",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьФокус",
      "internalName": "GetCurrentFocusFunc",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 219
      },
      "briefDescription": "Функция ПолучитьФокус()",
      "detailedDescription": {
        "text": "Возвращает имя (из ресурса) активного окна или окна диалога",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТекущийУзел",
      "internalName": "CurrentRoot",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2548
      },
      "briefDescription": "Функция ТекущийУзел( имя окна или диалога, имя выборки )",
      "detailedDescription": {
        "text": "Возвращает значение текущего узла записей в указанном броузере, в т.ч. -10 при отображении от начала иерархии, -1 - если нет такого окна или такого броузера, если броузер не иерархический",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыбратьЦвет",
      "internalName": "FSelectColor",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 830
      },
      "briefDescription": "Функция ВыбратьЦвет( [исходный_цвет][,заголовок] )",
      "detailedDescription": {
        "text": "Вызывает диалог выбора цвета исходный_цвет - цвет установленный в диалоге по умолчанию. задается либо строкой вида \"rrr.ggg.bbb\", где rrr - красный(число от 0 до 255) ggg - зеленый(число от 0 до 255) bbb - синий(число от 0 до 255) либо шестнадцатеричной срокой, например, \"FF007F\", где первый байт - красный цвет ( в примере - FF, т.е. 255 ) второй байт - зеленый цвет ( в примере - 00, т.е. 0 ) третий байт - синий цвет ( в примере - 7F, т.е. 127 ) заголовок - заголовок диалога Функция возвращает выбранный цвет в виде строки \"rrr.ggg.bbb\" или пустую строку при отказе от выбора",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СообщитьОбИзменении",
      "internalName": "SayAboutChangeAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1147
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СообщитьОбИзменении. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РедактируемаяТаблица",
      "internalName": "GetEditorsBrowsAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/EditorsBrows.cpp",
        "line": 2021
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция РедактируемаяТаблица. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьСписокОтчетов",
      "internalName": "GetReportsNames",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4700
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить названия доступных отчетов по префиксу\n*\n* @Функция ПолучитьСписокОтчетов(Строка префикс)@\n*\n* @return список имен доступных отчетов\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "Сортировать",
      "internalName": "SortObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1808
      },
      "briefDescription": "Функция Сортировать",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ХэшСуммаФайла",
      "internalName": "GenerateHashFile",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 337
      },
      "briefDescription": "Функция ХэшСуммаФайла( имя_файла, алгоритм, формат )",
      "detailedDescription": {
        "text": "Возвращает хэш-сумму указанного файла по алгоритму \"алгоритм\" \"формат\" указывает в каком виде будет возвращен результат: 1 - base64 12 - в виде шестнадцатеричных чисел",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Обработчик",
      "internalName": "CreateHandlerObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 5065
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет создать объект Обработчик\n*\n* @Функция Обработчик( Строка имяОбработчика, Строка типОбработчика )@\n*\n* @param[in] имяОбработчика\n* @param[in] типОбработчика\n* @return Обработчик\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "Окр",
      "internalName": "RoundX",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 582
      },
      "briefDescription": "Функция Окр( число, точность )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗапретитьЭлементы",
      "internalName": "DisableControlsCurrent",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 254
      },
      "briefDescription": "Функция ЗапретитьЭлементы( имя элемента[, имя_элемента2...] )",
      "detailedDescription": {
        "text": "Запрещает элементы у текущего окна",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УдалитьПеременную",
      "internalName": "DeleteAttribute",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 580
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСоединение",
      "internalName": "CreateConnectionAll",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1419
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция УстановитьСоединение. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДанныеПУслуги",
      "internalName": "GetProvServiceDatas",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_state.cpp",
        "line": 79
      },
      "briefDescription": "Функция ДанныеПУслуги( Номер_услуги, Поставщик, Дата )",
      "detailedDescription": {
        "text": "Возвращает объект, содержащий все тарифы и нормы указанной услуги на указанную дату Объект содержит переменные \"Номер услуги\", \"Норма\", \"Норм1\", \"Норм2\", \"Норм3\", \"НормаСч1\", \"НормаСч2\", \"НормаСч3\", \"НормаЛг1\", \"НормаЛг2\", \"НормаЛг3\", \"НормаСуб1\", \"НормаСуб2\", \"НормаСуб3\" \"Тариф\", \"Сверх\", \"Полный\", \"ТарифПоставщика\", \"ТарифПоСчетчику\", \"Тариф1\", \"Тариф2\", \"Тариф3\", \"Тариф4\", \"Тариф5\", \"Тариф6\" \"ДатНачТарифа\", \"ДатНачНормы\" - даты начала действия тарифа и нормы, действующих на указанную дату \"ДатКнцНТ\" - дата окончания текущего интервала действия тарифа/нормы Кроме того, содержится вложенный объект Калькуляция, внутри которого содержатся вложенные объекты с именами - номерами услуг (статей калькуляции), внутри каждого такого объекта - переменные \"Тариф\", \"Сверх\", \"Полный\", \"ТарифПоставщика\", \"ТарифПоСчетчику\", \"Тариф1\", \"Тариф2\", \"Тариф3\", \"Тариф4\", \"Тариф5\", \"Тариф6\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СКД",
      "internalName": "SaldoEndDebet",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 389
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьДопКонстанту",
      "internalName": "GetConstantValue2",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 45
      },
      "briefDescription": "Функция ПрочитатьДопКонстанту( дата, имя константы )",
      "detailedDescription": {
        "text": "Читает строковое значение указанной константы из поля ДопЗначение, действующее на указанную дату Если такой константы нет или еще не действует, вернет \"\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НомерПоле",
      "internalName": "NumberField",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 179
      },
      "briefDescription": "Функция НомерПоле( строка, имя переменной под номер, имя переменной под поле)",
      "detailedDescription": {
        "text": "Разбивает строку вида 10а на номер 10 и поле а (если числа нет - номер 0)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписьТолькоДляЧтения",
      "internalName": "IsRecordReadOnly",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4556
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Проверяет, является ли запись только для чтения\n*\n* @Функция ЗаписьТолькоДляЧтения(Объект запись)@\n*\n* @param[in] запись объект с записью\n* @return 1, если запись только для чтения, и 0 - иначе\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "КонтрольнаяСуммаШтрихКод",
      "internalName": "CountCheckSum",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 155
      },
      "briefDescription": "Функция КонтрольнаяСуммаШтрихКод( Строка, Начало, Конец )",
      "detailedDescription": {
        "text": "Считает контрольную сумму в строке от позиции Начало (счет от 0) до позиции Конец (счет от 0, сама позиция Конец не попадает в обработку, если Конец\u003d\u003d0 - до конца строки) Возвращает числовое значение",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьСекцию",
      "internalName": "WriteSection",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 189
      },
      "briefDescription": "Функция ЗаписатьСекцию( объект с параметрами, имя конфигурационного файла, имя секции )",
      "detailedDescription": {
        "text": "Записывает в указанный конфигурационный файл секцию с таким именем из объекта (берет переменные объекта типа Строка, Число, Деньги, их имена становятся именами параметров, значения - значениями параметров) Если в файле/базе была секция с таким именем, старое ее содержимое удаляется",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьЗаписьВыборки",
      "internalName": "GetSelectRecByNum",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 275
      },
      "briefDescription": "Функция ПолучитьЗаписьВыборки( объект, логический номер записи )",
      "detailedDescription": {
        "text": "Логические номера считаются с нуля Вернет 0 - нет записи с таким номером или у объекта нет выборки, 1 - есть (в этом случае обновляются все переменные объекта) Может использоваться как для выборки, так и для коллекции",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Лицо0",
      "internalName": "ReadFace0",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 810
      },
      "briefDescription": "Функция Лицо0()",
      "detailedDescription": {
        "text": "Возвращает объект, соответствующей организации из конфигурации задачи Содержит запись этой организации и предоставляет доступ к ее параметрам",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КопироватьДоговор",
      "internalName": "CopyContract",
      "sourceLocation": {
        "file": "Kvplata/source/ur_lic/ur_lic.cpp",
        "line": 668
      },
      "briefDescription": "Функция КопироватьДоговор( номер записи копируемого договора, номер новой записи[, дата начала вхождения лицевого в новый договор] )",
      "detailedDescription": {
        "text": "Осуществляет копирование связанных с договором записей (сейчас копируются лицевые счета, связанные с договором, а так же связанные с ними записи) Ставится указанная дата начала вхождения лицевых в новый договор, в старом договоре - закрывается предыдущей датой Если опущена - используется первое число открытого месяца",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ValuesOf",
      "internalName": "ObjectValuesIterator",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/VARCOL.CPP",
        "line": 1408
      },
      "briefDescription": "Функция ValuesOf( объект )",
      "detailedDescription": {
        "text": "Возвращает прямой итератор по значениям объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СведенияДляРегистрации",
      "internalName": "SendRegInfo",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 898
      },
      "briefDescription": "Функция СведенияДляРегистрации()",
      "detailedDescription": {
        "text": "формирует файл со сведениями обо всех регистрациях и шифрует его статическим ключом программы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВДвоичноеПолеИзФайла",
      "internalName": "FileToBinaryField",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 774
      },
      "briefDescription": "Функция ВДвоичноеПолеИзФайла( Объект, ИмяПоля, ИмяФайла )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытыйМесяцСостояние",
      "internalName": "GetOpenMonthState",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 22
      },
      "briefDescription": "Функция ОткрытыйМесяцСостояние()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Процесс",
      "internalName": "CreateProc",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 270
      },
      "briefDescription": "функция Процесс( команда или pid )",
      "detailedDescription": {
        "text": "создает объект процесса либо с командой запуска, либо по его pid в зависимости от типа передаваемого параметра",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТаблицаПоРезультату",
      "internalName": "SQLResultTable",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1501
      },
      "briefDescription": "Функция ТаблицаПоРезультату( объект - соединение, имя файла таблицы )",
      "detailedDescription": {
        "text": "Возвращает объект, основанный на записи таблицы с указанным именем файла Если соединение не открыто, выдается на экран сообщение об ошибке и возвращается пустой объект (ЧислоПолей(о)\u003d\u003d0)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьФильтрВыпадающегоСписка",
      "internalName": "ComboBoxApplyFilter",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2486
      },
      "briefDescription": "Функция УстановитьФильтрВыпадающегоСписка( ИмяДиалога, ИмяСписка, СтрокаФильтра )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьФокус",
      "internalName": "SetFocusFunc",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 226
      },
      "briefDescription": "Функция УстановитьФокус( имя окна, имя_элемента )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВСКД",
      "internalName": "CSaldoEndDebet",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 369
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РаспаковатьДвоичноеПоле",
      "internalName": "DecompressBinaryField",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 858
      },
      "briefDescription": "Функция РаспаковатьДвоичноеПоле( Объект, ИмяПоля )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиДом",
      "internalName": "FindHouse",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 310
      },
      "briefDescription": "Функция НайтиДом( объект_улица, номер, корпус )",
      "detailedDescription": {
        "text": "Ищет данный дом. Первым аргументом должна получить объект с записью из таблицы Города (такой возвращает функция НайтиУлицу) Номер-обязательно число, Корпус-строка (в том числе \"\") При успешном поиске вернет объект, построенный на записи данного дома (из таблицы Лицевые счета). При неуспешном поиске вернет пустой объект без записи( проверять функцией ТипДанных - укажет, что нет записи или НомерЗаписи - вернет -1 ) Пустой объект также будет возвращен, если передан объект_улица без записи или с номером записи -1 (т.е.просто созданный объект)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьПравилоДокумента",
      "internalName": "ExecuteDocRull",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_DOC.CPP",
        "line": 25
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ВыполнитьПравилоДокумента( объект, режим ) Для объекта, содержащего документ, выполняет правило Режим определяет, откуда брать правило и что делать с документом после выполнения правила\nбиты 0 и 1 - откуда брать правило 0 - только с документа 1 - только с вышележащих папок 2 - если есть, с документа, если нет - с вышележащих папокбит 2 - если он равен 1 (т.е. число 4), будут сформированы проводки и документ будет закрыт В случае успешной работы возвращает 0, при ошибке 1 - нет записи, 2 - не та запись, 3 - нет правила",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетСальдоНаборЛС",
      "internalName": "CalcSaldoFromTable",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 144
      },
      "briefDescription": "Функция РасчетСальдоНаборЛС( таблица_с_ЛС, месяц )",
      "detailedDescription": {
        "text": "Если месяц открыт или это последний закрытый месяц и разрешен его расчет в конфигурации, выполняет расчет только сальдо фонда за указанный месяц, возвращает пустую строку Если месяц ранее последнего закрытого, или последний закрытый, но в конфигурации не разрешен его расчет, или пользователь прерывает процесс расчета, возвращает текст сообщения об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазмерВБайтах",
      "internalName": "SizeInBytes",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 32
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИзвлечьИмяФайла",
      "internalName": "ExtractFileName",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1358
      },
      "briefDescription": "Функция ИзвлечьИмяФайла( полное_имя_файла )",
      "detailedDescription": {
        "text": "Возвращает короткое имя из полного имени файла Примеры: C:\\Work\\File\\test.txt -\u003e test.txt C:\\Work\\File -\u003e File",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Следующий",
      "internalName": "NextRecAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1670
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Следующий. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьИДСессии",
      "internalName": "LoadSIDFromNSI",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3313
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УказанноеПравоНаРесурс",
      "internalName": "ResourceRightNoDefault",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 192
      },
      "briefDescription": "Функция УказанноеПравоНаРесурс( имя_ресурса )",
      "detailedDescription": {
        "text": "Возвращает право на указанный ресурса в виде числа, если действительно такое право задано Если право не задано, возвращает 0 независимо от положения переключателя прав на явно не указанные ресурсы",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоказатьИзображение",
      "internalName": "ShowFileImage",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ImageView.cpp",
        "line": 145
      },
      "briefDescription": "Функция ПоказатьИзображение( имя_диалога, имя_ViewImage, имя_файла )",
      "detailedDescription": {
        "text": "Отображает указанный файл изображения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасшифроватьПароль",
      "internalName": "DecryptPassword",
      "sourceLocation": {
        "file": "MuzzleJ/Source/PASSWORD.CPP",
        "line": 162
      },
      "briefDescription": "Функция РасшифроватьПароль( пароль[, ключ] )",
      "detailedDescription": {
        "text": "Дешифрует зашифрованный пароль(его шестнадцатирирчное представление) pwd ключом в prms или ключом по-умолчанию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РежимАПИ",
      "internalName": "IsApiMode",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4507
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Проверяет, является ли поток запущен в режиме АПИ\n*\n* @Функция РежимАПИ()@\n*\n* @return 1, если поток запущен в режиме АПИ, и 0 - иначе\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "СохранитьКонстанту",
      "internalName": "StoreConst",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 202
      },
      "briefDescription": "Функция СохранитьКонстанту( Имя, Значение [,Дата][,Полное имя] )",
      "detailedDescription": {
        "text": "Вносит константу с указанным именем или заменяет ее значение Если дата не указана, а истории нет, значение вносится на 01.01.1980, если история есть - на текущую дату Может быть указано положение константы в иерархии папок путем указания имен папок через точку (Имя папки1.Имя папки 2.Имя константы)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ШиринаКолонки",
      "internalName": "WidthColumnAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1382
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ШиринаКолонки. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Плательщик",
      "internalName": "ShowPayer",
      "sourceLocation": {
        "file": "Kvplata/source/func_lsinfo.cpp",
        "line": 23
      },
      "briefDescription": "Функция Плательщик( Номер_записи_лицевого, Номер_записи_организации )",
      "detailedDescription": {
        "text": "Возвращает объект с записью из таблицы Карточки регистрации, соответствующей плательщику данного лицевого счета по данной организации (проверяется и флаг \"Плательщик\", и поле \"Место работы\") Если плательщика нет, возвращается объект, в котором номер записи -1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьКонтейнер",
      "internalName": "CreateCollectionObject",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Collection.cpp",
        "line": 2317
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Создание объекта. type определяет тип контейнера, возможные значения:\n\"список\" - контейнер на базе списка\"массив\" - контейнер на базе массива\"double\" или \"число\" - ассоциативный контейнер с ключом - вещественным числом\"long\" - ассоциативный контейнер с ключом - целым числом\"string\" или \"строка\" - ассоциативный контейнер с ключом - строкой\nРегистр символов не важенВ v_names передается набор имен полей объекта (для возможности вставки объекта путем передачи набора полей, а не объекта, объект с данными полями создается автоматически). Передаваемые значения присваиваются переменным в той же последовательности, в которой они находятся в этом спискеВ def_obj передается объект, возвращаемый по умолчанию (когда не находится запрошенный элемент в контейнере), NULL - его нет",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьМьютекс",
      "internalName": "CreateMutexObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 526
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьИзОбработчикаДиалога",
      "internalName": "ReadVarFromDialog",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1097
      },
      "briefDescription": "Функция ПрочитатьИзОбработчикаДиалога( имя_переменной-получателя, имя_диалога, имя_читаемой_переменной )",
      "detailedDescription": {
        "text": "Читает из пользовательского обработчика указанного диалога указанную переменную и помещает ее содержимое в переменную-получатель В т.ч. после чтения объекта он становится изменяемым из обоих мест Возвращает 1, если есть диалог с указанным именем, у него есть пользовательский обработчика, а в нем есть переменная с указанным именем, иначе - 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВнестиЗаписьВКэш",
      "internalName": "InsSelTableRecordInCache",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 904
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПоставщикТекущегоЛицевого",
      "internalName": "GetProvider",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1824
      },
      "briefDescription": "Функция ПоставщикТекущегоЛицевого( номер услуги, дата )",
      "detailedDescription": {
        "text": "Возвращает номер записи поставщика услуги, стоящей на текущем рассчитываемом лицевом счете (или одном из вышестоящих уровней) на указанную дату При отсутствии реального поставщика возвращает поставщика по умолчаниюПо умолчанию можно прочесть поставщиков только за период расчета. Если в !stack_ini в секции [AppConfig] определить константу LoadProvidersToCalcFrom\u003dдд.мм.гггг, можно будет прочесть поставщиков за период с указанной даты до окончания периода расчета",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьПараметрыОтчета",
      "internalName": "GetReportInfo",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4722
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить информацию по отчету\n*\n* @Функция ПолучитьПараметрыОтчета(Строка имяОтчета)@\n*\n* @return объект с информацией об отчете\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСвойстваСоединения",
      "internalName": "SetConnectProperties",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1456
      },
      "briefDescription": "Функция УстановитьСвойстваСоединения( объект-соединение, атрибуты )",
      "detailedDescription": {
        "text": "Указанному соединению устанавливаются атрибуты Бит 3 \u003d\u003d 1 - нужны диагностические сообщения о неудачно выполненном запросе (которые посылает сервер) 0 - не нужны",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходГрупповогоСчетчикаПоГруппам",
      "internalName": "ValuesGroupCountersByUpService",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 615
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция РасходГрупповогоСчетчикаПоГруппам() Загружает данные о распределенном расходе по групповым счетчикам, без расхода по индивидуальным, за месяц расчета Критерием загрузки служит поле ДатаСоздает массив МГрРасход, индексами которого являются номера верхних групп услуг, а значения - сумма распределенных расходов \nгрупповых счетчиков по услугам соответствующей группы При отсутствии групповых счетчиков масcив будет пустой",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НаписаниеАдресногоУровня",
      "internalName": "AddressLevelShortName",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 770
      },
      "briefDescription": "Функция НаписаниеАдресногоУровня( тип уровня )",
      "detailedDescription": {
        "text": "Возвращает краткое название адресного уровня (соответствующее написанию в адресе) по его типу (значению в поле Тип таблицы Лицевые счета)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДиалогАдресногоУровня",
      "internalName": "AddressLevelDialogName",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 789
      },
      "briefDescription": "Функция ДиалогАдресногоУровня( тип уровня )",
      "detailedDescription": {
        "text": "Возвращает название окна диалога для редактирования записи адресного уровня по его типу (значению в поле Тип таблицы Лицевые счета)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КаталогБазы",
      "internalName": "GetBaseDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 880
      },
      "briefDescription": "Функция КаталогБазы()",
      "detailedDescription": {
        "text": "Возвращает полный путь к базе данных В конце гарантированно стоит слеш",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛицоП",
      "internalName": "ReadFaceCustomer",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 830
      },
      "briefDescription": "Функция ЛицоП()",
      "detailedDescription": {
        "text": "Для счетов - возвращает объект с записью из организации по связи Лицо1 из ближайшей родительской папки Для договоров - возвращает объект с записью из организации по связи Плательщик из ближайшей родительской папки Если текущая папки корневая или ни одна в восходящей иерархии не имеет установленной связи, возвращает Лицо0(). Объект содержит запись этой организации и предоставляет доступ к ее параметрам и банковским реквизитам Р_счет,Банк,БИК,КоррСчет",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КоррекцияДатЗаписей",
      "internalName": "DateCorrect",
      "sourceLocation": {
        "file": "Kvplata/source/arms.cpp",
        "line": 826
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция КоррекцияДатЗаписей( объект, список_полей [,задавать_вопрос] ) задавать_вопрос \u003d\u003d 1 - перед внесением записей и корректировкой дат в таблице будет задавать вопрос подтверждения операции значение по умолчанию - 1 Используется при внесении записей параметров, услуг, поставщиков на лицевые, услуг в состав льготы Обеспечивает исключение появления записей с одинаковыми ключами и пересекающимися датамиМожно передавать список полей сразделителем - точкой с запятой, что обеспечит максимальную гибкость Можно вместо списка полей передавать строку без точек с запятой: \"Параметры\", \"Услуги\", \"Поставщики\", \"Состав льготы\", \"Состояние счетчика\"Формат вызова со списком полей:\nдля параметров КоррекцияДатЗаписей( об, \"Виды-Параметры;Счет-Параметры;Объекты-Параметры;Документ-Параметры;Структура-Параметры;Организация-Параметры;Параметры-Договор\" );для параметров дома КоррекцияДатЗаписей( об, \"Дом-Параметры;Дом-Виды параметров\" )для услуг КоррекцияДатЗаписей( об, \"Счет-Услуги;Вид-Услуги;Состояние\" )для поставщиков КоррекцияДатЗаписей( об, \"Счет-Список поставщиков;Услуги-Список поставщиков\" );для услуг в составе льготы КоррекцияДатЗаписей( об, \"Льгота-Состав;Услуга-Состав льготы\" );для состояния счетчика: КоррекцияДатЗаписей( об, \"Счет-Счетчика состояние;Объект-Состояние\" );",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьКодБД",
      "internalName": "GetDBCode_script",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1583
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief\n*\n* @Функция ПолучитьКодБД()@\n*\n* @return Строка\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныйКореньАдресов",
      "internalName": "GetAccessAddressRootPos",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 671
      },
      "briefDescription": "Функция ДоступныйКореньАдресов()",
      "detailedDescription": {
        "text": "Возвращает номер записи доступного для редактирования реально имеющегося узла таблицы \"Лицевые счета\" Отслеживаются права только на районы, участки и населенные пункты, если права ограничены жестче, функция неприменима Если права на Адреса проживающих не указаны, а по умолчанию все доступно, или имеются права на редактирование раздела без названия ресурса Адреса проживающих, возвращает -10 Если есть права на редактирование разделов, но самих разделов нет, возвращает -1 Если нет прав на редактирование, возвращает -1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДатаВремя",
      "internalName": "GetDateTimeObject",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3554
      },
      "briefDescription": "Функция ДатаВремя( переменная любого типа ) - создает объект для работы с типом ДатаВремя (инициализирует входящим параметром)",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ФорматироватьДвоичноеПолеДиалога",
      "internalName": "FormatBinaryField",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 817
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ФорматироватьДвоичноеПолеДиалога( ИмяДиалога, ИмяПоля, МаксимальнаяДлинаСтроки ) порезать строковое двоичное поле на кусочки длиной не более step, разделенные символом перевода строки - \u0027\n\u0027",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Удалить",
      "internalName": "DeleteTableRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 560
      },
      "briefDescription": "Функция УдалитьЗапись( объект )",
      "detailedDescription": {
        "text": "Удаляет запись, содержащуюся в данном объекте, из таблицы или выборки, запись объекта инициализируется, в объект перечитываются все переменные",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛьготыКатегории",
      "internalName": "FillHelpNumByCat",
      "sourceLocation": {
        "file": "Kvplata/source/servcat.CPP",
        "line": 541
      },
      "briefDescription": "Функция ЛьготыКатегории( номер записи таблицы Категории льгот )",
      "detailedDescription": {
        "text": "Возвращает объект, который содержит элементы с именами - номерами льгот и значениями - номерами записей соответствующих льгот",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьFPT",
      "internalName": "GetFPT",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 1176
      },
      "briefDescription": "Функция ПрочитатьFPT( объект, имя файла FPT, имя поля )",
      "detailedDescription": {
        "text": "Должна получить объект - на базе таблицы DBF, имя файла FPT с путем и имя MEMO поля. Возвращает длинную строку, содержащий текст из данного MEMO-поля В случае ошибок может вернуть пустую строку, а может выдать сообщение об ошибке (если файл на самом деле не FPT или разрушен)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Договор",
      "internalName": "GetDogovorByLSAll",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 722
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Договор. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПользовательскиеФункции",
      "internalName": "GetAllUserFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 747
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Сообщить",
      "internalName": "MsgBox",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 73
      },
      "briefDescription": "Функция Сообщить( текст, флаги )",
      "detailedDescription": {
        "text": "флаги - необязательный параметр. Флаги пишутся в кавычках, может быть несколько и можно без разделителя. Возможные значения флагов : \"OK\", \"RETRY\", \"YES\", \"YES_ALL\", \"NO\", \"NO_ALL\", \"CANCEL\", \"OK_ALL\", \"ERROR_TITLE\", \"WARNING\", \"RED\". Пример: Сообщить( \"текст\", \"OK,RETRY,CANCEL,WARNING\" ); Если флаги функции были установлены, то она будет возвращать системные сообщения по нажатию на кнопки в виде строки. Значения могут быть: \"RETRY\", \"YES\", \"YES_ALL\", \"NO\", \"NO_ALL\", \"CANCEL\".",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыбратьДиск",
      "internalName": "GetDisk",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1181
      },
      "briefDescription": "Функция ВыбратьДиск( тип )",
      "detailedDescription": {
        "text": "Позволяет выбрать диск указанного типа 1 - floppy 2 - flash 4 - CD Допускается осуществлять выбор нескольких типов (коды типов нужно сложить) Если в системе нет таких устройств, вернет \"\", если оно одно - вернет букву его имени Если их несколько - предложит выбор из меню, при отказе от выбора вернет \"\", иначе - букву выбранного пункта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПроверитьОбмен",
      "internalName": "UserGetExcPress",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 284
      },
      "briefDescription": "Функция ПроверитьОбмен()",
      "detailedDescription": {
        "text": "Проверяет наличие словаря синхронизации",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьФайлВКодировке",
      "internalName": "WriteTxtObjFileEncoding",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 501
      },
      "briefDescription": "Функция ЗаписатьФайлВКодировке( кодировка, объект_файл, записываемые_строки_или_объекты_строки )",
      "detailedDescription": {
        "text": "Строки соединяются в определенной кодировке (\"UTF-16\"), после последней пишет CR/LF",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ИнформацияИзПрав",
      "internalName": "InfoFromRight",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 205
      },
      "briefDescription": "Функция ИнформацияИзПрав( имя_ресурса )",
      "detailedDescription": {
        "text": "Возвращает строку Раздел права на указанный ресурс При отсутствии прав на указанный ресурс возвращается пустая строка Если имеется несколько прав на указанный ресурс, будет возвращена строка из первого встреченного права на ресурс (они отсортированы по алфавиту строк в \"Раздел\")",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиЗаписьВыборки",
      "internalName": "FindInSelect",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 303
      },
      "briefDescription": "Функция НайтиЗаписьВыборки( объект )",
      "detailedDescription": {
        "text": "Поля связи можно установить прямо переменными в объекте Возвращает логический номер записи, если найдет, или -1, если не найдет или нет выборки у записи",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьВОбработчикДиалога",
      "internalName": "StoreVarToDialog",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1060
      },
      "briefDescription": "Функция ЗаписатьВОбработчикДиалога( имя_диалога, имя_переменной, значение [,имя_переменной2, значение2,...] )",
      "detailedDescription": {
        "text": "Создает в пользовательском обработчике указанного диалога новые переменные (если не было с таким именем) или изменяет значение существующих Возвращает 1, если есть диалог с указанным именем и у него есть пользовательский обработчика (т.е. операция присвоения выполнена), иначе - 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьЗначениеВыпадающегоСписка",
      "internalName": "ComboBoxSetValue",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2504
      },
      "briefDescription": "Функция УстановитьЗначениеВыпадающегоСписка( ИмяДиалога, ИмяСписка, СтрокаФильтра )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗакрытьФайл",
      "internalName": "FCloseFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 147
      },
      "briefDescription": "Функция ЗакрытьФайл( объект_файл )",
      "detailedDescription": {
        "text": "Сбрасывает изменения на диск, освобождает объект для использования с другим файлом",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Int_8",
      "internalName": "CreateInt8Token",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1816
      },
      "briefDescription": "Функция Int_8( число )",
      "detailedDescription": {
        "text": "Создает переменную, которая будет передаваться в COM-объект как VT_I1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьСекциюКакСтр",
      "internalName": "WriteSectionStr",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 206
      },
      "briefDescription": "Функция ЗаписатьСекцию( строка параметров, имя конфигурационного файла, имя секции )",
      "detailedDescription": {
        "text": "Из файла/базы удаляется ранее имевшаяся там секция с указанным именем, вместо нее записываются строки, получаемые делением строки параметров по знаку \"точка с запятой\" (строка параметров должна иметь вид: ${Имя}\u003d${Значение};${Имя}\u003d${Значение};...)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "DotNetArray",
      "internalName": "CreateDotNetArray",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1898
      },
      "briefDescription": "Функция DotNetArray( имя_класса, массив_объектов )",
      "detailedDescription": {
        "text": "или DotNetArray( Имя_класса, объект1, объект2, ... ) создает массив объектов заданного типа",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Реестр",
      "internalName": "CreateRegistry",
      "sourceLocation": {
        "file": "Kvplata/source/func_registry.cpp",
        "line": 108
      },
      "briefDescription": "Функция Реестр()",
      "detailedDescription": {
        "text": "Возвращает объект, предназначенный для доступа к реестру",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Размер",
      "internalName": "ArraySize",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 16
      },
      "briefDescription": "Функция Размер( переменная или выражение )",
      "detailedDescription": {
        "text": "У нее оставлено второе имя ДлинаСтроки Для массива возвращает число элементов, для обычной и длинной строки - ее длину, для прочих - длину текстового представления",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДлинаСтроки",
      "internalName": "ArraySize",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 16
      },
      "briefDescription": "Функция Размер( переменная или выражение )",
      "detailedDescription": {
        "text": "У нее оставлено второе имя ДлинаСтроки Для массива возвращает число элементов, для обычной и длинной строки - ее длину, для прочих - длину текстового представления",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыгрузитьФункции",
      "internalName": "WriteUserFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2553
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазрешитьБроузер",
      "internalName": "EnableDataView",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 478
      },
      "briefDescription": "Функция РазрешитьБроузер( имя окна, имя выборки )",
      "detailedDescription": {
        "text": "Разрешает указанный броузер, если на него даны права на редактирование, в заблокированном окне диалога",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Выражение",
      "internalName": "CreateExpression",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2205
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Создает новое выражение для запуска\n*\n* @Функция Выражение( Строка текст )@\n*\n* @param[in] текст текст выражения\n* @return новое выражение для запуска\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныеКорниВыборки",
      "internalName": "GetAccessSelectionRoots",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 622
      },
      "briefDescription": "Функция ДоступныеКорниВыборки( имя_ресурса, имя_главной_таблицы, имя_поля_иерархии, имя_текстового_поля_для_строки_иерархии[, права_доступа][, стартовый_корень] )",
      "detailedDescription": {
        "text": "Получает массив номеров доступных корней указанной выборки, см. выше",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетЛицевыхПоДокументу",
      "internalName": "CalcAccByDoc",
      "sourceLocation": {
        "file": "Kvplata/source/doc_common.cpp",
        "line": 1864
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетСальдо2",
      "internalName": "CalcSaldo2",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 409
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Если указана максимальная дата платежа текущего месяца, берутся не все платежи, а только те, у которых дата документа не превышает указанную Дополнительно вносятся сведения об оплате пени (услуга -1) без деления по месяцам и поставщикамфлаги - строковый аргумент, либо массив строк. Флаги должны начинаться с \"^\". флаг \"^П\" - сохранение пени флаг \"^О\" - отрицательные платежи не объединять при загрузке с положительными",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеГрупповыхСчетчиков",
      "internalName": "ObjectGroupState",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1532
      },
      "briefDescription": "Функция СостояниеГрупповыхСчетчиков( дата, услуга )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Макс",
      "internalName": "Max64",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 626
      },
      "briefDescription": "Функция Макс( БольшоеЧисло, БольшоеЧисло )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписьПоставщикаТекущегоЛицевого",
      "internalName": "GetProviderRecord",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1845
      },
      "briefDescription": "Функция ЗаписьПоставщикаТекущегоЛицевого( услуга, дата )",
      "detailedDescription": {
        "text": "Возвращает номер записи поставщика услуги, стоящей на текущем рассчитываемом лицевом счете (или одном из вышестоящих уровней) на указанную дату При отсутствии реального поставщика возвращает поставщика по умолчаниюПо умолчанию можно прочесть поставщиков только за период расчета. Если в !stack_ini в секции [AppConfig] определить константу LoadProvidersToCalcFrom\u003dдд.мм.гггг, можно будет прочесть поставщиков за период с указанной даты до окончания периода расчета",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Muzzle_xml_encode",
      "internalName": "Muzzle_xml_encode",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/XmlUtils.cpp",
        "line": 763
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Печатает элемент в строку xml\n*\n* @Функция Muzzle_xml_encode( Любое элемент )@\n*\n* @param[in] элемент элемент, который будет печататься в строку xml\n* @return Строка xml, созданная на основе элемента\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ДаНет",
      "internalName": "AskYesNo",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 262
      },
      "briefDescription": "Функция ДаНет( текст вопроса )",
      "detailedDescription": {
        "text": "Возвращает 1 при ответе \"Да\" и 0 при ответе \"Нет\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПостроительКомплектовБирт",
      "internalName": "CreateBirtOptimizer",
      "sourceLocation": {
        "file": "MuzzleJ/Source/FRWrapper.cpp",
        "line": 3086
      },
      "briefDescription": "Функция ПостроительКомплектовБирт( оптимизация )",
      "detailedDescription": {
        "text": "Возвращает объект, осуществляющий построение комплектов отчетов Birt",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Диспетчер",
      "internalName": "GetCurrentDispatcher",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3222
      },
      "briefDescription": "функция Диспетчер()",
      "detailedDescription": {
        "text": "создает объект для доступа к диспетчеру",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Int_16",
      "internalName": "CreateInt16Token",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1822
      },
      "briefDescription": "Функция Int_16( число )",
      "detailedDescription": {
        "text": "Создает переменную, которая будет передаваться в COM-объект как VT_I4",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьНабор",
      "internalName": "ClearContainer",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_REP.CPP",
        "line": 223
      },
      "briefDescription": "Функция ОчиститьНабор(Набор)",
      "detailedDescription": {
        "text": "Удаляет все переменные из набора",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗначениеВыпадающегоСписка",
      "internalName": "GetComboBoxSelectedItem",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2467
      },
      "briefDescription": "Функция ЗначениеВыпадающегоСписка( Имя_Диалога, Имя_ВыпСписка )",
      "detailedDescription": {
        "text": "Возвращает значение ключа выбранного элемента списка Если массив ключей не был задан или не выбрано значение, то вернет -1Массивы значений и ключей устанавливаются: 1) для ComboBox функцией ЗаполнитьВыпадающийСписок(Имя_Диалога, Имя_ВыпСписка, Массив_Значений, Массив_Ключей) 2) для ComboBoxSearchAddress запрос в ресурсе должен вернуть такие обязательные поля: row_id - значение ключа, Название - основное поле для отображения, n1 - дополнительное поле для отображения",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетВедомостиИндСчетчиков",
      "internalName": "CalcVedomInCounter",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 1642
      },
      "briefDescription": "Возвращает 1 при успешной работе, 0 - если расчет прерван пользователем",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокЗначенийПараметра",
      "internalName": "ValuesParam",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 1008
      },
      "briefDescription": "Функция СписокЗначенийПараметра( имя_параметра )",
      "detailedDescription": {
        "text": "Возвращает список значений параметра из ресурса в виде длинной строки, если имеется окно диалога для ввода параметра с выбором через перечисляемое поле. Если такого диалога нет или поле для ввода не перечисляемое, возвращается пустая строка",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеСчетчиковНаИнтервале",
      "internalName": "ObjectStateI",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1583
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция СостояниеСчетчиковНаИнтервале( номер_интервала, услуга [,первый_месяц_периода [, последний_месяц_периода]][,режим] ) Возвращает массив, характеризующий состояние счетчиков по указанным услугам/группам услуг на интервале с указанным номером В качестве номера услуги/группы может быть передано число или строка чисел, разделенных запятой Интервал определяется в пределах заданного периода Если опущены обе границы периода, периодом служит месяц расчета Если опущен последний месяц периода, период состоит из одного месяца, который указан как первый месяц периода Массив будет содержать следующие переменные: Состояние, Среднее, СписокСостоянийсостояние в указанном интервале Состояние Среднее СписокСостояний счетчиков нет 0 0 \"\" один счетчик его состояние его среднее строка с одним числом - состоянием несколько счетчиков в одном состоянии это состояние сумма средних список с одним числом - состоянием (в состоянии не 0 и не 1) несколько счетчиков в разнах состояниях ведущее состояние сумма средних список уникальных чисел через запятую (в состоянии не 0 и не 1)Сочетание состояний Ведущее 0 и 1 0 0 и 2 2 0 и 3 0 0 и иное иное \n1 и 2 2 1 и 3 1 1 и иное иное 2 и 3 2 2 и иное иноеАнализируется состояние индивидуальных и кустовых счетчиковРежим определяет, состояние каких счетчиков читается: 4 или опущен - индивидуальных и кустовых, 0-индивидуальных, 1-групповых, 2-кустовых, 3-групповых и кустовых",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Ассистент",
      "internalName": "GetStackAssistant",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3607
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Меню",
      "internalName": "AskMenuAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 467
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Меню. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьКаталог",
      "internalName": "FCreateDir",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 678
      },
      "briefDescription": "Функция СоздатьКаталог( путь, тихий_режим, отключить_Redirection )",
      "detailedDescription": {
        "text": "Создает указанный путь (он может содержать несколько несуществующих подкаталогов, в конце требуется \\) Если передан параметр тихий_режим \u003d\u003d 1, то сообщение об ошибке появляться не будет. Если передан параметр отключить_Redirection \u003d\u003d 1, то папки будут создаваться в строгом соответствии с переданным путём (актуально для C:\\Windows\\System32\\). Функция возвращает код ошибки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Дата",
      "internalName": "Text2DateFrmt",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 977
      },
      "briefDescription": "Функция Дата( строка, строка формата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьСФайлКодировкой",
      "internalName": "ReadObjFileEncoding",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 290
      },
      "briefDescription": "Функция ПрочитатьСФайлКодировкой( кодировка, объект_файл )",
      "detailedDescription": {
        "text": "Читает из файла строку c указанной кодировкой (UTF-8 или UTF-16) до обнаружения символа \"\\n\" Возвращает прочитанную строку, либо \" \" для отличия от конца файла При достижении конца файла или если файл не открыт, возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОбновитьСписокОтчетов",
      "internalName": "UpdateListReportAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 1307
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ОбновитьСписокОтчетов. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыборВОкне",
      "internalName": "LoadSelectWindow",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1859
      },
      "briefDescription": "Функция ВыборВОкне( имя окна, [номер записи курсора , имя выборки броузера, позиция связи] )",
      "detailedDescription": {
        "text": "Загружает окно с указанным именем, переводит курсор на указанную запись (если -1 или опущено - просто открывает окно). Если указана выборка - ставит на нее фильтр выбора записей, связанных по первому в текущем индексе выборки полю (это должно быть поле связи) с указанной главной записью Номер записи курсора (если требуется) должен обязательно стоять до имени выборки Далее переводит окно в модальный режим для осуществления выбора По окончании выбора возвращается объект с номерами выбранных записей При отказе от выбора возвращается пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасходГрупповогоСчетчикаПоУслугам",
      "internalName": "ValuesGroupCountersByService",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 603
      },
      "briefDescription": "Функция РасходГрупповогоСчетчикаПоУслугам()",
      "detailedDescription": {
        "text": "Загружает данные о распределенном расходе по групповым счетчикам, без расхода по индивидуальным, за месяц расчета Критерием загрузки служит поле ДатаСоздает массив МГрРасход, индексами которого являются номера услуг, а значения - распределенный расход групповых счетчиков по соответствующим услугам При отсутствии групповых счетчиков масcив будет пустой",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Деньги",
      "internalName": "ToMoney",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1009
      },
      "briefDescription": "Функция Деньги( переменная любого типа )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "sin",
      "internalName": "FuncSin",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2337
      },
      "briefDescription": "Функция sin(число)",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьТФайл",
      "internalName": "ReadTxtFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 204
      },
      "briefDescription": "Функция ПрочитатьТФайл( объект_файл )",
      "detailedDescription": {
        "text": "Читает из текстового файла строку длиной до 255 символов (если строка длиннее, ее нужно читать за несколько раз ) Если файл не открыт или достигнут конец файла, возвращает нулевую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПроигратьWAV",
      "internalName": "OurPlaySound",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2441
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "функция \"ПроигратьWAV\" функция \"ПроигратьАудио( имя_файла )\" файл можно указывать относительно каталога ресурсов, тогда он скопируется клиенту и там будет воспроизведен, также можно указывать файл на компьтере клиента через префикс \"CLIENT:\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПодСтрока",
      "internalName": "SubStrAll",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 483
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПодСтрока. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КвКорень",
      "internalName": "GetRoot",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2328
      },
      "briefDescription": "Функция КвКорень(число)",
      "detailedDescription": {
        "text": "или sqrt(число) Извлечение квадратного корня из числа",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "sqrt",
      "internalName": "GetRoot",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2328
      },
      "briefDescription": "Функция КвКорень(число)",
      "detailedDescription": {
        "text": "или sqrt(число) Извлечение квадратного корня из числа",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиИзвлечьЗаписьТаблицы",
      "internalName": "GetRecByInd",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/mtable_funcs.cpp",
        "line": 360
      },
      "briefDescription": "Функция НайтиИзвлечьЗаписьТаблицы( объект, имя индекса[, искать от[[,имена полей узлов][,длина ключа]] )",
      "detailedDescription": {
        "text": "Работает, как предыдущая, дополнительно считывает содержимое записи в объект при успешном поиске, при неуспешном запись объекта инициализируется Если имя_индекса - пустая строка, то возьмет первый из существующих",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетВедомости",
      "internalName": "CalcVedom",
      "sourceLocation": {
        "file": "KvplataCalc/source/KVPCALC.CPP",
        "line": 1513
      },
      "briefDescription": "Функция РасчетВедомости( ведомость, тип_ведомости )",
      "detailedDescription": {
        "text": "Выполняет перерасчет лицевых счетов, находящихся в указанной ведомости (ведомостях) ведомость - номер записи документа или массив номеров записей, индексы в которых являются номерами записей тип_ведомости - одна буква, определяющая тип документа: П - платежная ведомость И - ведомость индивидуальных счетчиков К - акты снятия качества по услугеВозвращает 1 при успешной работе, 0 - если расчет прерван пользователем",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "md5sum",
      "internalName": "GenerateMD5",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 316
      },
      "briefDescription": "Функция md5sum( строка )",
      "detailedDescription": {
        "text": "Возвращает хэш-сумму указанной строки по алгоритму md5 (записана в виде шестнадцатиричных чисел)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВСНД",
      "internalName": "CSaldoStartDebet",
      "sourceLocation": {
        "file": "Sbis32/source/b_handle.cpp",
        "line": 357
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СоздатьФайл",
      "internalName": "FCreateFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 76
      },
      "briefDescription": "Функция СоздатьФайл( путь с именем )",
      "detailedDescription": {
        "text": "Возвращает объект, связанный с данным файлом Существующий файл удаляется При невозможности создать файл создается пустой объект, для которого функция ПозицияВФайле или КонецФайла возвращает -1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Вниз",
      "internalName": "TextDown",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 868
      },
      "briefDescription": "Функция Вниз( строка )",
      "detailedDescription": {
        "text": "Возвращает строку (или длинную строку), в которой символы переведены в нижний регистр Тип возвращаемого результата определяется длиной строки (до 254 - обычная, больше - длинная)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Т16",
      "internalName": "Int64To16",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1040
      },
      "briefDescription": "Функция Т16( БольшоеЧисло )",
      "detailedDescription": {
        "text": "Возвращает шестнадцатиричное представление целой части числа",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЭтоКорень",
      "internalName": "IsRootAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1226
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ЭтоКорень. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПараметрСтрокой",
      "internalName": "ParamAsString",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 995
      },
      "briefDescription": "Функция ПараметрСтрокой( имя_параметра, значение_параметра )",
      "detailedDescription": {
        "text": "Преобразует числовое значение параметра в строку, если имеется окно диалога для ввода параметра с выбором через перечисляемое поле. Если такого диалога нет или поле для ввода не перечисляемое, возвращается числовое значение параметра",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВерсияФайла",
      "internalName": "GetStackFileVersion",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1505
      },
      "briefDescription": "Функция ВерсияФайла( имя_файла ) возвращает версию файла",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КопироватьПеременные",
      "internalName": "CopyObjectVars",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 195
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "КопироватьПеременные( объект-приемник, объект-источник, режим ) Копирует переменные и поля записи объекта-источника в переменные/поля записи объекта приемника в зависимости от состояний битов \"Режим\" Переменные объекта-источника копируются следующим образом:\nесли в объекте-приемнике имеется переменная с тем же именем, она копируется только при установленном бите 0 или 1 (число 1 или 2)если в объекте-приемнике имеется поле с таким именем, то переменная переносится в поле при установленном бите 0 или 2 (число 1 или 4) Если это поле иерархии, дополнительно пытается получить из источника переменную ИмяПоля_Узел (если получит, 0 превращает запись в лист, 1 - в узел, не получит - не изменяет) Если это поле условной связи пытается получить переменную ИмяПоля_Таблица, если получает, изменяет таблицу условной связиесли в объекте-приемнике нет ни переменной, ни поля, то переменная создается всегда\nПоля записи объекта-источника копируются следующим образом:\nесли в объекте-приемнике есть поле с таким именем, то:\nобычное поле переносится при установленном бите 0 или 1 (число 1 или 2)поля связи многие к одному - при установленном бите 5 (число 32)поля иерархии - при установленном бите 6 (число 64)поля связи один к одному - при установленном бите 7 (число 128)поля условной связи - при установленном бите 8 (число 256)\nесли в объекте-приемнике имеется переменная с тем же именем, то в нее переносится содержимое поля при установленном бите 0 или 4 (число 1 или 16), кроме двоичных полейесли в объекте-приемнике нет ни переменной, ни поля тогда создаются переменные:\nдля полей, приводимых к числу, строке, дате, времени - при \n установленном бите 0 или 3 (число 1 или 8)для полей связи многие к одному - при установленном бите 5 (число 32)для полей иерархии - при установленном бите 6 (число 64) (создаются две переменные - ИмяПоля (число) и ИмяПоля_Узел - число 0 или 1)для полей связи один к одному - при установленном бите 7 (число 128)для полей условной связи - при установленном бите 8 (число 256) ( создаются две переменные - ИмяПоля (число) и ИмяПоля_Таблица - строка )\n\nПри этом в записях объекта-источника и объекта-приемника для копирования рассматриваются следующие записи:\nесли не установлены биты 9 и 10 - используются записи целиком (включая все связанные таблицы)при установленном бите 9 (число 512) - только записи главной таблицыпри установленном бите 10 (число 1024) - только главная запись выборкипри установленных битах 9 и 10 (1024+512) - запись главной таблицы и главная запись выборки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СложитьЗаписи",
      "internalName": "AddRecords",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 1200
      },
      "briefDescription": "Функция СложитьЗаписи( объект-получатель, объект-источник )",
      "detailedDescription": {
        "text": "Добавляет к полям записи объекта-получателя одноименные поля объекта-источника, если у полей установлен флаг \"Суммируется по Ctrl-C\" Переменные в объекте-приемнике обновляются Если у полей нет записей - ошибок не возникает",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДоступныйКореньДокументов2",
      "internalName": "GetAccessDocRoot2",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 523
      },
      "briefDescription": "Функция ДоступныйКореньДокументов2( имя_выборки, тип_корневой_папки, тип_документа )",
      "detailedDescription": {
        "text": "Возвращает номер доступного для записи корня ведомостей в указанной выборке Если нет никаких ограничений, то возвращается номер папки самого верхнего уровня с указанным типом корневой папки (все документы данной выборки находятся в этой папке или вложенных в нее). Если такая папка недоступна, то возвращается номер записи папки с минимальным уровнем вложенности. Если же доступных для записи (редактирования) папок нет в принципе, то возвращается -1.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "JsonArray",
      "internalName": "CreateJsonArray",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Collection.cpp",
        "line": 2353
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Создает объект Коллекция, которая при переводе в JSON, станет массивом\n*\n* @Функция JsonArray([Строка тэг])@\n*\n* @param тэг используется при конвертации в xml формат в качестве тэга\n* @return Объект Коллекция, которая при переводе в JSON, станет массивом\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "Клиент_УдалитьЗначение",
      "internalName": "ClientRemoveRegValue",
      "sourceLocation": {
        "file": "Kvplata/source/func_registry.cpp",
        "line": 76
      },
      "briefDescription": "Функция Клиент_УдалитьЗначение( name )",
      "detailedDescription": {
        "text": "удаляет параметр с именем name в реестре клиента в секции JavaSoft/Prefs name - имя параметра",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗарегистрироватьИзменениеНачисленийДляОбмена",
      "internalName": "StoreNacChanging",
      "sourceLocation": {
        "file": "Kvplata/source/ChargeLog.cpp",
        "line": 91
      },
      "briefDescription": "Функция ЗарегистрироватьИзменениеНачисленийДляОбмена( позиция_лицевого, месяц, признак_ручных_изменений )",
      "detailedDescription": {
        "text": "Регистрирует выполнение расчета или перерасчета на лицевом с указанной позицией в указанном расчетном месяце признак_ручных_изменений - 0 для расчета или автоматического перерасчета, 1 - для ручных изменений",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТекДат",
      "internalName": "WorkDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 763
      },
      "briefDescription": "Функция ТекДат()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РабДат",
      "internalName": "WorkDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 763
      },
      "briefDescription": "Функция ТекДат()",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КодСимвола",
      "internalName": "AscCode",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 214
      },
      "briefDescription": "Функция КодСимвола( строка )",
      "detailedDescription": {
        "text": "Возвращает числовой код первого символа строки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Мин",
      "internalName": "MinDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 608
      },
      "briefDescription": "Функция Мин( Дата, Дата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПараметрыДоговора",
      "internalName": "GetDogovorData",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 622
      },
      "briefDescription": "Функция ПараметрыДоговора( объект-договор, дата )",
      "detailedDescription": {
        "text": "Читает параметры, установленные на договоре в таблице Свойства на указанную дату Возвращает объект, который содержит элемент ДатКнц (меньшая из двух дат - минимальная из дат окончания параметров, которые удалось найти, или минимальная из дат начала параметров, которые еще не действуют Кроме нее, будут объекты с именами - именами параметров и подэлементами 0,1,2,3, Примечание - соответственно символьное основное, основное, второе, третье значение и примечание Если передан объект без записи или с записью не из таблицы Документы, будет возвращен пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СистДат",
      "internalName": "CurrentDate",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 755
      },
      "briefDescription": "Функция СистДат()",
      "detailedDescription": {
        "text": "На эту функцию есть внешняя ссылка, за счет этого файл включается в сборку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Запустить",
      "internalName": "ExecAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1885
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция Запустить. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АктивнаяВкладка",
      "internalName": "GetNameActiveTabPage",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2773
      },
      "briefDescription": "Функция АктивнаяВкладка( имя_диалога, имя_набора_закладок )",
      "detailedDescription": {
        "text": "Возвращает имя активной вкладки в указанном наборе закладок указанного окна диалога Если нет такого окна диалога или такого набора закладок, возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОтключитьОбработчик",
      "internalName": "ClearHandle",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 565
      },
      "briefDescription": "Функция ОтключитьОбработчик( объект )",
      "detailedDescription": {
        "text": "Отключает обработчик у выборки, к которой принадлежит данный объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОткрытыйМесяц",
      "internalName": "GetOpenMonth",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 44
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция работает с двумя наборами параметров:\nОткрытыйМесяц( [код_задачи] ) возвращает открытый месяц для задачи с кодом код_задачи если параметр не указан - возвращает для текущей задачи При таком вызове административный режим, если включен, считается включенным для всех лицевыхОткрытыйМесяц( хэш-код, Закрытый месяц[, Месяц блокировки] ) возвращает открытый месяц для лицевого счета с указанным хэш-кодом с учетом стоящих на лицевом счете закрытого месяца и месяца блокировки, а также включения административного режима для группы, в которую входит данный лицевой",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СложитьДвоичныеДанные",
      "internalName": "AddBinaryObj",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 87
      },
      "briefDescription": "Функция СложитьДвоичныеДанные( строка_источник[,...] )",
      "detailedDescription": {
        "text": "Создает длинную строку из суммы строк-источников (длинных строк) Строки соединяются последовательно Основное назначение - соединение строк, содержащих нули внутри строки Возвращает длинную строку, содержащую двоичные данные",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Время",
      "internalName": "SetTime",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 876
      },
      "briefDescription": "Функция Время( часы, минуты, секунды )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиКвартиру",
      "internalName": "FindFlat",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 371
      },
      "briefDescription": "Функция НайтиКвартиру( объект_дом, номер, поле )",
      "detailedDescription": {
        "text": "Ищет данную квартиру. Первым аргументом должна получить объект с записью из таблицы Лицевые счета (такой возвращает функция НайтиДом) Номер-обязательно число, Поле-строка (в том числе \"\") При успешном поиске вернет объект, построенный на записи данной квартиры (из таблицы Лицевые счета). При неуспешном поиске вернет пустой объект без записи( проверять функцией ТипДанных - укажет, что нет записи или НомерЗаписи - вернет -1 ) Пустой объект также будет возвращен, если передан объект_дом без записи или с номером записи -1 (т.е.просто созданный объект)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "КопироватьОбъект",
      "internalName": "CopyObject",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 71
      },
      "briefDescription": "Функция КопироватьОбъект( объект )",
      "detailedDescription": {
        "text": "Создает именно копию объекта, т.е. он базируется на новой записи Если источник не является объектом, возвращается пустой объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДекодироватьСтроку",
      "internalName": "DecryptString",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 655
      },
      "briefDescription": "Функция ДекодироватьСтроку( строка, формат[, кодировка] )",
      "detailedDescription": {
        "text": "декодирует данные длинной строки из указанного формата \"формат\" указывает в каком виде переданы данные: 1 - base64 4 - в виде шестнадцатеричных чисел с пробелами 12 - в виде шестнадцатеричных чисел 15 - URLEncoded",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СостояниеСчетчиковДетально",
      "internalName": "ObjectStateDetail",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1659
      },
      "briefDescription": "Функция СостояниеСчетчиковДетально( [месяц_начала_периода [,месяц_окончания_периода]][, услуга или группа услуг] )",
      "detailedDescription": {
        "text": "Возвращает массив, характеризующий состояние индивидуальных и групповых счетчиков по указанной услуге (группе услуг) в течение указанного периода Если опущены обе границы периода, возвращается состояние счетчиков в месяце расчета Если опущен последний месяц периода, период состоит из одного месяца, который указан как первый месяц периода, именно в нем определяется число интервалов Если услуга опущена или указан 0 - по всем услугам Массив будет содержать подобъекты 1, 2, 3... по числу интервалов в данном периоде, на которых состояние хотя бы одного счетчика по данной услуге меняется. Интервалы отсортированы по возрастанию дат Кроме того, есть переменная ЧислоИнтервалов Внутри каждого подобъекта будут подобъекты с именами 1,2,3, а также переменные ЧислоОбъектов, ДатНач, ДатКнц Каждый подобъект счетчика содержит переменные: НачалоДействия, ОкончаниеДействия, ПозицияОбъекта, НомерУслуги, Состояние, Среднее, Тарифность, Разрядность, Коэффициент, Тип (\"И\" - индивидуальный, \"Г\" - групповой, \"К\" - кустовой)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВозобновитьПечать",
      "internalName": "StartPrint",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1094
      },
      "briefDescription": "Функция ВозобновитьПечать",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаполнитьВыпадающийСписок",
      "internalName": "FillComboBox",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2423
      },
      "briefDescription": "Функция ЗаполнитьВыпадающийСписок( Имя_Диалога, Имя_ВыпСписка, Массив_Значений[, Массив_Ключей] )",
      "detailedDescription": {
        "text": "Принимаются текстовые и числовые значения Если указан массив ключей, то он должен быть той же длины, что и массив значений и содержать в себе не повторяющиеся цифровые значения, которые будут сопоставлены значениям (подробнее - функция ЗначениеВыпадающегоСписка(...) )",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ДнейДействияСостояния",
      "internalName": "ObjectStateDaysCount",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 1770
      },
      "briefDescription": "Функция ДнейДействияСостояния( месяц, номера_услуг_или_групп [, значение1[, значение2...] )",
      "detailedDescription": {
        "text": "Возвращает число дней в указанном месяце (может быть передана любая дата), в которых объединенное состояние счетчиков (индивидуальных и кустовых) по указанным услугам/группам услуг (число или строка через запятую) имеет одно из указанных значений",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьОшибкиЗапускаПрограммы",
      "internalName": "GetStartErrors",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4537
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет получить ошибки, произлшедшие при старте программы\n*\n* @Функция ПолучитьОшибкиЗапускаПрограммы()@\n*\n* @return Список строк с текстом ошибок\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "СохранитьКонстанту",
      "internalName": "StoreConstP",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 238
      },
      "briefDescription": "Функция СохранитьКонстанту( Переменная )",
      "detailedDescription": {
        "text": "Вносит константу с именем переменной или заменяет ее значение В качестве значения используется значение переменной Если дата не указана, а истории нет, значение вносится на 01.01.1980, если история есть - на текущую дату",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Константа",
      "internalName": "StoreConstP",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 238
      },
      "briefDescription": "Функция СохранитьКонстанту( Переменная )",
      "detailedDescription": {
        "text": "Вносит константу с именем переменной или заменяет ее значение В качестве значения используется значение переменной Если дата не указана, а истории нет, значение вносится на 01.01.1980, если история есть - на текущую дату",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьОтчет",
      "internalName": "ExecutePrintRec",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2158
      },
      "briefDescription": "Функция ВыполнитьОтчет( имя_отчета [,базовый объект] [,кол-во копий] [,список_разделов] )",
      "detailedDescription": {
        "text": "Выполняет отчет с указанным именем базовый объект - массив или объект, на базе которого строится отчет (его запись (при наличии) используется как база для построителя отчетов, вложенные объекты и переменные будут доступны в отчете) кол-во копий - число список разделов - строка, содержащая имена разделов, подлежащих печати (при необходимости печати нескольких разделов имена указываются через запятую) Если такого отчета нет, возвращает 0. Иначе строит отчет и возвращает 1",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОстановитьПоток",
      "internalName": "StopThread",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Thread.cpp",
        "line": 1415
      },
      "briefDescription": "Функция ОстановитьПоток( id )",
      "detailedDescription": {
        "text": "id - идентификатор потока",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПараметрНаИнтервале",
      "internalName": "ParameterOnInterval",
      "sourceLocation": {
        "file": "KvplataCalc/source/CalcExecutor.cpp",
        "line": 901
      },
      "briefDescription": "Функция ПараметрНаИнтервале(ИмяПараметра, НомерИнтервала [,первый_месяц_периода [, последний_месяц_периода]])",
      "detailedDescription": {
        "text": "Возвращает основное числовое значение параметра на интервале с указанным номером (счет от 1 до значения, возвращаемого функцией КоличествоИнтервалов с теми же границами периода) Название может содержать суффикс .2 или .3 (для чтения соответственно второго и третьего значения параметра), Если опущены обе границы периода, номер интервала рассматривается в пределах месяца расчета Если опущен последний месяц периода, период состоит из одного месяца, который указан как первый месяц периода, именно в нем берется нужный интервал Если такого параметра нет или указан недопустимый номер интервала, возвращает 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СпроситьДаты",
      "internalName": "AskDateAll",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_REP.CPP",
        "line": 304
      },
      "briefDescription": "Функция СпроситьДаты()",
      "detailedDescription": {
        "text": "Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьДвоичныйФайл",
      "internalName": "ReadBinaryFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 411
      },
      "briefDescription": "Функция ПрочитатьДвоичныйФайл( объект_файл[, макс_длина_строки] )",
      "detailedDescription": {
        "text": "Читает содержимое двоичного файла в длинную строку Если указана макс_длина_строки, читает не более этого количества символов Возвращает длинную строку При достижении конца файла или если файл не открыт, возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПереместитьКурсор",
      "internalName": "MoveCursorAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2343
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПереместитьКурсор. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "HTMLВТекст",
      "internalName": "HtmlToPlainText",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 89
      },
      "briefDescription": "Функция HTMLВТекст( html, макс_размер_строки )",
      "detailedDescription": {
        "text": "Преобразовывает переданный html в текст с помощью библиотеки jsoup.jar",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПозицияВФайле",
      "internalName": "FFilePos",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 110
      },
      "briefDescription": "Функция ПозицияВФайле(объект_файл)",
      "detailedDescription": {
        "text": "Вернет -1 - файл не открыт, иначе - позицию в файле (счет от 0)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПравоНаРесурс",
      "internalName": "ResourceRight",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 168
      },
      "briefDescription": "Функция ПравоНаРесурс( имя_ресурса [,имя раздела] )",
      "detailedDescription": {
        "text": "Возвращает права на указанный раздел указанного ресурса в виде числа",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетЛицевогоПериод",
      "internalName": "Calc_LSP",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 468
      },
      "briefDescription": "Функция РасчетЛицевогоПериод( номер_записи, месяц_начала_периода, месяц_окончания_периода )",
      "detailedDescription": {
        "text": "Если месяц_начала_периода открыт, рассчитывает лицевой счет (или объект), соответствующий указанной записи, за период с месяц_начала_периода по месяц_окончания_периода включительно, и сохраняет результат в соответствующие месяцы Если же часть или все из месяцев периода закрыты, выполняет перерасчет за эти закрытые месяцы, сохраняя результат перерасчета в открытом месяце, затем рассчитывает открытые месяцы, сохраняя результат в соответствующем месяце, Если месяц month ранее начала работы программы, ничего не делает",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СессияБД",
      "internalName": "CreateDbSession",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 1195
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "BufferedReader",
      "internalName": "CreateBufferReader",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 981
      },
      "briefDescription": "Функция BufferedReader( запрос[, число извлекаемых записей в одном пакете][, типы параметров] )",
      "detailedDescription": {
        "text": "Основное назначение - выполнение Select, но может использоваться и для выполнения других команд (по одной, без объединения буфера в общую транзакцию) В отличие от Query, сразу читает все результаты запроса на локальную машину (они извлекаются с сервера пакетами указанного размера, но пакеты извлекаются все и сохраняются в памяти) В вызовах Объект.Следующий() данные из памяти переносятся в объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВерсияКлиента",
      "internalName": "ClientVersion",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3208
      },
      "briefDescription": "Функция ВерсияКлиента()",
      "detailedDescription": {
        "text": "Возвращает текущую версию клиента. Если программа запущена в WEB-режиме или нет регистрации - вернет 0;",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыполнитьЗапрос",
      "internalName": "ExecSQL",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1466
      },
      "briefDescription": "Функция ВыполнитьЗапрос( объект - соединение, строка запроса )",
      "detailedDescription": {
        "text": "Строка обычная или длинная При успешном выполнении запроса вернет 1, иначе - 0 Если соединение не открыто, выдаст на экран сообщение об ошибке",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СинхронизироватьИндексы",
      "internalName": "ConvertIndexes",
      "sourceLocation": {
        "file": "MuzzleJ/Source/db_handlers.cpp",
        "line": 872
      },
      "briefDescription": "функция СинхронизироватьИндексы( )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СрокДействияКонстанты",
      "internalName": "ConstantTo",
      "sourceLocation": {
        "file": "Kvplata/source/func_constant.cpp",
        "line": 54
      },
      "briefDescription": "Функция СрокДействияКонстанты( дата, имя константы )",
      "detailedDescription": {
        "text": "Возвращает, до какого числа действует указанная константа от указанной даты Если нет такой константы или она не действует на указанную дату, вернет 00.00.00",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "LTrim",
      "internalName": "LTrimPRG",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 221
      },
      "briefDescription": "Функция LTrim( строка )",
      "detailedDescription": {
        "text": "Удаляет пробелы и табуляции в начале строки",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Muzzle_json_decode",
      "internalName": "Muzzle_json_decode",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Json/Json_muzzle.cpp",
        "line": 19
      },
      "briefDescription": "Функция Muzzle_json_decode( строка,[кодировка],[флаг_массив] )",
      "detailedDescription": {
        "text": "разбирает строку и возвращает массив",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СНачКвартала",
      "internalName": "FirstCvart",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 304
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПостроительОтчета",
      "internalName": "CreateReporter",
      "sourceLocation": {
        "file": "MuzzleJ/Source/FRWrapper.cpp",
        "line": 2977
      },
      "briefDescription": "Функция ПостроительОтчета( имя_построителя_отчета)",
      "detailedDescription": {
        "text": "Возвращает объект, осуществляющий построение отчета через указанный инструмент Возможные варианты имен построителей - \"Fast Report\" и \"Open Office\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ОчиститьКонтекст",
      "internalName": "ClearContext",
      "sourceLocation": {
        "file": "Kvplata/source/func_cfg.cpp",
        "line": 569
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПереносДанных",
      "internalName": "MoveObjectVars",
      "sourceLocation": {
        "file": "Kvplata/source/func_vars.cpp",
        "line": 290
      },
      "briefDescription": "Функция ПереносДанных( объект-получатель, объект-источник )",
      "detailedDescription": {
        "text": "Переносит из источника в получатель все переменные и подобъекты Содержимое получателя предварительно удаляется Подобъекты из источника удаляются",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛицоАвтор",
      "internalName": "DocFaceA",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 981
      },
      "briefDescription": "Функция ЛицоАвтор()",
      "detailedDescription": {
        "text": "Возвращает объект с записью из таблицы сотрудники, соответствующей автору текущего документа (если запись текущего объекта содержит поле Автор), в противном случае - текущему пользователю",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЧитатьУдаленныеЗаписи",
      "internalName": "RemovedRead",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2377
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "ЧитатьУдаленныеЗаписи - устанавливает/снимает флаг чтения уделенных записей из dbf obj - объект таблица arg - 0 снимаем флаг чтения удаленных, иначе устанавливаем",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПолучитьВыделение",
      "internalName": "GetMarkPosAll",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 1237
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функция ПолучитьВыделение. Разбирает параметры и вызывает соответствующую функцию.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЗаписатьВЖурнал",
      "internalName": "WriteToJournal",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 3244
      },
      "briefDescription": "Функция WriteToJournal()",
      "detailedDescription": {
        "text": "Пишет сообщение лог в \"Журнал изменений\" comment - поле \"Комментарий\" act - поле \"Действие\" (перечисление с префиксом chg из SBISCNST.H) str - поле \"Позиция\"",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ВыбратьФайл",
      "internalName": "FSelectFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 741
      },
      "briefDescription": "Функция ВыбратьФайл( Заголовок[,маска][,признак записи, [расширение_по_умолчанию][,каталог_по_умолчанию] Запрос имени файла в окне с указанным заголовком Маска - расширения, разделенные точкой с запятой, комментарий отделяется запятой, например \"*.prn,Файлы печати (*.prn)",
      "detailedDescription": {
        "text": ";*.doc,Документы (*.doc)\" (В конец автоматически приписывается Все файлы(*.*)) Если маска опущена, это рассматривается как \"*.*,Все файлы (*.*)\" Если признак записи опущен или 0, это открытие файла, если 1 - сохранение (при сохранении выдается предупреждение о перезаписывании) если 2 - выбор множества файлов в каталоге, при этом будет создан массив с полными именами файлов Если не опущено расширение по умолчанию, оно используется (расширение по умолчанию - это только символы, которые приписываются к имени файла, *. перед ними писать не нужно) Для указания расширения по умолчанию обязательно указать признак записи (0 или 1) Если не опущен каталог по умолчанию, для выбора будет предложен этот каталог Чтобы иметь возможность указать каталог по умолчанию, обязательно указать признак записи (0 или 1) и расширение по умолчанию (или \"\", если не хотим указывать расширение по умолчанию) Если пользователь откажется от выбора, функция возвращает пустую строку Иначе функция возвращает выбранное имя файла с путем к нему Если не указывается расширение файла, используется конкретное расширение из маски, а если в маске *.* (или она опущена) - расширение по умолчанию",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТекущаяВыборка",
      "internalName": "GetActiveDataView",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2523
      },
      "briefDescription": "Функция ТекущаяВыборка()",
      "detailedDescription": {
        "text": "Возвращает имя текущей выборки, если нет выборки в фокусе - пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПроверитьТриггерыВБазе",
      "internalName": "CheckTriggers",
      "sourceLocation": {
        "file": "MuzzleJ/Source/db_handlers.cpp",
        "line": 626
      },
      "briefDescription": "функция ПроверитьТриггерыВБазе()",
      "detailedDescription": {
        "text": "Осуществляет проверку соответствия триггеров в базе триггерам, описанным в словарях Возвращает массив объектов со следующими полями: Таблица - имя таблицы для триггера или \"__FUNC\" для функции/процедуры ИмяОбъекта - имя триггера/функции Тип - тип объекта ( TRIGGER | FUNCTION | PROCEDURE ) Файл - имя файла с текстом объекта Действие - действие, которое нужно совершить над объектом: Добавление - есть в словарях, нет в базе Удаление - нет в словарях, есть в базе Обновление - в словарях версия объекта выше, чем в базе Включение - триггер в базе отключен Отключение - триггер в словарях отключен Создается драйвером - обновить триггеры синхронизации Перезапись - для всех остальных объектов СтараяВерсия - версия объекта в базе НоваяВерсия - версия объекта в словарях Заблокирован - если равно 1, то действие выполняться не будет.",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПрочитатьФайл",
      "internalName": "ReadAnyFile",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 359
      },
      "briefDescription": "Функция ПрочитатьФайл( объект_файл[, макс_длина_строки] )",
      "detailedDescription": {
        "text": "Читает из файла строку до обнаружения символа \"\\n\" Если указана макс_длина_строки, читает не более этого количества символов Возвращает обычную строку, если в ней не более 255 символов, иначе - длинную строку При достижении конца файла или если файл не открыт, возвращает пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ПараметрыШтрихКода",
      "internalName": "SetScanCodeParams",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/func_interface.cpp",
        "line": 2736
      },
      "briefDescription": "Функция ПараметрыШтрихКода( имя_окна_диалога, имя_элемента, символы_начала, символы_завершения )",
      "detailedDescription": {
        "text": "Устанавливает у элемента с указанным именем в данном окне указанные символы как символы начала и завершения штрих-кода Команду поймет только строка ввода символов штрих-кода, но проверки не производится, ошибки не возникнетСтрока символов может быть обычной или длинной, символы разделяются запятой Если одна из строк символов пустая, соответствующий параметры строки ввода символов штрих-кода не изменяетсяСимволы могут представлять собой одиночные буквы/цифры, управляющие клавиши, сочетания Ctrl+, Shift+, Alt+ с символами или управляющими клавишами В качестве управляющих клавиш воспринимаются: ESC, BACK, TAB, ENTER, SPACE, PGUP, PGDN, HOME, END, LEFT, RIGHT, UP, DOWN, INSERT, DELETE, F1..F12, клавиши на цифровой клавиатуре (NUM0..NUM9 NUM+ NUM- NUM* NUM/ NUM.) клавиши знаков (SIGN; SIGN+ SIGN. SIGN, SIGN- SIGN/ SIGN~ SIGN[ SIGN] SIGN\\ SIGN\u0027",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РазмерБуфера",
      "internalName": "SetBufferSize",
      "sourceLocation": {
        "file": "Kvplata/source/func_table.cpp",
        "line": 564
      },
      "briefDescription": "Функция РазмерБуфера( объект, значение )",
      "detailedDescription": {
        "text": "Устанавливает у таблицы, запись которой содержится в указанном объекте, буфер указанного размера (должен быть степенью 2, не более 65536) Функция может применяться только для новых таблиц, только формата DBF Вызов должен осуществляться до первой записи в таблицу",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СписокЗадач",
      "internalName": "GetListTask",
      "sourceLocation": {
        "file": "Kvplata/source/func_user_rights.cpp",
        "line": 1326
      },
      "briefDescription": "возвращает задачи из !task.ini в виде массива",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СправочникСтрока",
      "internalName": "ManualStringData",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 1049
      },
      "briefDescription": "Функция СправочникСтрока( код справочника, режим, параметр )",
      "detailedDescription": {
        "text": "Позволяет прочесть указанную строку справочника с данным кодом Режим - строка с разделителем слов - запятойПервое слово: позиция - как параметр передана числовая позиция строки код - как параметр передан кодПоследующие слова (если одно, функция возвращает переменную указанного типа, если несколько - возвращается объект с элементами указанного типа, совпадающими по именам со словами) код - строка - код строки справочника название - строка - название строки справочника значение - число - числовое значение в строке справочникаЕсли нет справочника с таким кодом или в нем нет искомой строки, возвращает пустую строку, когда запрошен один параметр, и пустой объект, когда несколько",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Char2Binary",
      "internalName": "Char2Binary",
      "sourceLocation": {
        "file": "Kvplata/source/func_string.cpp",
        "line": 879
      },
      "briefDescription": "Функция Char2Binary( строка )",
      "detailedDescription": {
        "text": "Преобразует строку в последовательность шестнадцатиричных символов (например, строка \"!#\" преобразуется в \"0x2123\") Тип возвращаемого результата определяется длиной полученной строки шестнадцатиричных символов, которая определяется, как удвоенная длина исходной строки + 2 - до 254 - обычная, больше - длинная",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НаборВОбъект",
      "internalName": "ContainerToExecObj",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_REP.CPP",
        "line": 262
      },
      "briefDescription": "Функция НаборВОбъект( Набор-источник )",
      "detailedDescription": {
        "text": "Переносит набор переменных в стандартный объект",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьСписокФлагов",
      "internalName": "SetListCheck",
      "sourceLocation": {
        "file": "MuzzleJ/Source/combobox.cpp",
        "line": 2379
      },
      "briefDescription": "Функция УстановитьСписокФлагов( Имя_Диалога, Имя_ВыпСписка, Массив_Значений )",
      "detailedDescription": {
        "text": "Для ComboBox устанавливает наличии галки Массив_Значений - ключ порядковый номер строки, значение 0 или 1 (есть или нет галка)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СвернутьУзлы",
      "internalName": "CollapseTreeItemID",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExplorerTree.cpp",
        "line": 1057
      },
      "briefDescription": "Функция СвернутьУзлы( имя_окна, имя_дерева, ID )",
      "detailedDescription": {
        "text": "сворачивает узлы дерева с ID равными ID",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "РасчетЛицевыхГС",
      "internalName": "CalcChargeOnGroupCounters",
      "sourceLocation": {
        "file": "KvplataCalc/source/doc_g_counters.CPP",
        "line": 978
      },
      "briefDescription": "Функция РасчетЛицевыхГС( месяц[, позиция документа | \u0027.\u0027] [, фильтр управления] )",
      "detailedDescription": {
        "text": "Может принимать следующий набор параметров: РасчетЛицевыхГС( месяц ) РасчетЛицевыхГС( месяц, \"(([Управление] \u0026 4) \u003c\u003e 0 AND ([Управление] \u0026 2) \u003d 0)\" ) - здесь отбрасываются из расчета лицевые, у которых стоит в Управлении \"Юр.Лица\" и не стоит \"Физ.Лица\" (проверка AND !!!) РасчетЛицевыхГС( месяц, позиция ) РасчетЛицевыхГС( месяц, позиция, \"(([Управление] \u0026 4) \u003c\u003e 0 AND ([Управление] \u0026 2) \u003d 0)\" ) РасчетЛицевыхГС( месяц, \u0027.\u0027 ) РасчетЛицевыхГС( месяц, \u0027.\u0027, \"(([Управление] \u0026 4) \u003c\u003e 0 AND ([Управление] \u0026 2) \u003d 0)\" )Если месяц открыт, выполняет расчет (без сальдо) за этот месяц всех лицевых из указанного группового счетчика (позиция документа), Если указана \u0027.\u0027 - список лицевых берется из TempTable (имеет смысл при вызове из правила деления группового счетчика, там TempTable уже заполнена списком лицевых (с иерархией) для текущего счетчика если нет ни позиции, ни \u0027.\u0027 или указать -10 - из всех групповых счетчиковЕсли указанный месяц закрыт, выполняет перерасчет данных лицевых счетов, помещая результат перерасчета в открытый месяцПри остановке расчета вернет \"Расчет прерван пользователем\"При успешном выполнении расчета вернет пустую строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "УстановитьФильтр",
      "internalName": "SetFiltr",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_seltable.cpp",
        "line": 786
      },
      "briefDescription": "Функция УстановитьФильтр( объект, код_фильтра [,параметры фильтра] )",
      "detailedDescription": {
        "text": "Устанавливает на выборку, которой принадлежит объект, фильтр указанного типа Распознаваемые типы: Код Тип Параметры 1 LinkTreeCondition 0 (или опущены) - стандартное отображение, 1 - развернуть по Ctrl-A, 2 - развернуть по Ctrl-B",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "АннулироватьКонтекстБД",
      "internalName": "InvalidateDBContext",
      "sourceLocation": {
        "file": "Sbis32/source/LICENSE.CPP",
        "line": 1534
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "* @brief Позволяет аннулировать предыдущее использование контекста (выбивает других пользователей с этим именем)\n*\n* @Функция АннулироватьКонтекстБД( БинарныеДанные контекстБД )@\n*\n* @param[in] контекстБД бинарные данные с контекстом для входа в бд\n*\n* @return Число 1\n*",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "name": "ПроверитьБлокировкуРесурса",
      "internalName": "TestLockRecord",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs2.cpp",
        "line": 573
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ТекстХэш",
      "internalName": "TextHash",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_longstring.cpp",
        "line": 399
      },
      "briefDescription": "Функция ТекстХэш( текст ) возвращает хэш-код переданного текста.",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "СессияВнешнейБД",
      "internalName": "CreateOutDbSession",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1769
      },
      "briefDescription": "Функция СессияВнешнейБД( строка подключения )",
      "detailedDescription": {
        "text": "Cоздается объект для выполнения запросов через ODBC",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЛицоГ",
      "internalName": "ReadFaceSender",
      "sourceLocation": {
        "file": "Kvplata/source/func_state.cpp",
        "line": 972
      },
      "briefDescription": "Функция ЛицоГ()",
      "detailedDescription": {
        "text": "Для счетов - возвращает объект с записью из организации по связи Лицо2 из ближайшей родительской папки Для договоров - возвращает объект с записью из организации по связи Грузополучатель из ближайшей родительской папки Если текущая папки корневая или ни одна в восходящей иерархии не имеет установленной связи, возвращает Лицо0(). Объект содержит запись этой организации и предоставляет доступ к ее параметрам и банковским реквизитам Р_счет,Банк,БИК,КоррСчет",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "RKeysOf",
      "internalName": "ObjectKeysReverseIterator",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/VARCOL.CPP",
        "line": 1416
      },
      "briefDescription": "Функция RKeysOf( объект )",
      "detailedDescription": {
        "text": "Возвращает обратный итератор по ключам объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "НайтиСКонца",
      "internalName": "FindRecWithBack",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 1802
      },
      "briefDescription": "Функция НайтиСКонца( объект, имя индекса )",
      "detailedDescription": {
        "text": "Поиск записи от конца таблицы, в которой содержащиеся в индексе поля имеют то значение, которое имеют поля объекта",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Выполнить",
      "internalName": "ExecuteRull",
      "sourceLocation": {
        "file": "Sbis32/source/print.cpp",
        "line": 188
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "Функции",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Дата2",
      "internalName": "Text2DateFrmt2",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 983
      },
      "briefDescription": "Функция Дата2( строка, строка формата )",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЧислоЛицевых",
      "internalName": "NumberAccounts",
      "sourceLocation": {
        "file": "Kvplata/source/FUNCTION.CPP",
        "line": 419
      },
      "briefDescription": "Функция ЧислоЛицевых( объект_квартира )",
      "detailedDescription": {
        "text": "Укажет, сколько лицевых счетов содержится внутри объекта-аргумента (он должен иметь запись из Лицевых счетов, но не обязательно квартиры, можно дома...) Если объект не содержит записи, она не из Лицевых счетов - вернет 0",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "ЕстьСоединение",
      "internalName": "IsConnected",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1444
      },
      "briefDescription": "Функция ЕстьСоединение( объект - соединение )",
      "detailedDescription": {
        "text": "Возвращает 1, если соединение есть, иначе 0 (была ошибка при открытии)",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "name": "Muzzle_json_encode",
      "internalName": "Muzzle_json_encode_static",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Json/Json_muzzle.cpp",
        "line": 51
      },
      "briefDescription": "Функция Muzzle_json_encode( массив )",
      "detailedDescription": {
        "text": "Конвертация входного массив в json строку",
        "isMarkdown": false
      },
      "revision": "trunk"
    }
  ],
  "entities": [
    {
      "methods": {
        "Закрыть": [
          {
            "name": "SyncObjectClose",
            "internalName": "SyncObjectClose",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 423
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Ждать": [
          {
            "name": "SyncObjectWait",
            "internalName": "SyncObjectWait",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 406
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "текстОшибки": {
          "name": "SyncObjectGetErrorMessage",
          "internalName": "SyncObjectGetErrorMessage",
          "sourceLocation": {
            "file": "Kvplata/source/func_proc.cpp",
            "line": 396
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "имя": {
          "name": "SyncObjectGetName",
          "internalName": "SyncObjectGetName",
          "sourceLocation": {
            "file": "Kvplata/source/func_proc.cpp",
            "line": 376
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "закрыт": {
          "name": "SyncObjectIsClosed",
          "internalName": "SyncObjectIsClosed",
          "sourceLocation": {
            "file": "Kvplata/source/func_proc.cpp",
            "line": 381
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "естьОшибка": {
          "name": "SyncObjectIsError",
          "internalName": "SyncObjectIsError",
          "sourceLocation": {
            "file": "Kvplata/source/func_proc.cpp",
            "line": 386
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "кодОшибки": {
          "name": "SyncObjectGetHresult",
          "internalName": "SyncObjectGetHresult",
          "sourceLocation": {
            "file": "Kvplata/source/func_proc.cpp",
            "line": 391
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "превышенИнтервал": {
          "name": "SyncObjectIsTimeout",
          "internalName": "SyncObjectIsTimeout",
          "sourceLocation": {
            "file": "Kvplata/source/func_proc.cpp",
            "line": 401
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "constructors": [],
      "name": "SyncObjectFuncs",
      "internalName": "SyncObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 428
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Освободить": [
          {
            "name": "MutexObjectRelease",
            "internalName": "MutexObjectRelease",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 510
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "MutexObjectFuncs",
      "internalName": "MutexObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 515
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Установить": [
          {
            "name": "EventObjectSet",
            "internalName": "EventObjectSet",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 614
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Сбросить": [
          {
            "name": "EventObjectReset",
            "internalName": "EventObjectReset",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 619
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "EventObjectFuncs",
      "internalName": "EventObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 624
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ЛицевыеЧтение": [
          {
            "name": "ReadCustomTempTable",
            "internalName": "ReadCustomTempTable",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 119
            },
            "briefDescription": "Функция Итератор.ЛицевыеЧтение( [Имя_временной_таблицы] )",
            "detailedDescription": {
              "text": "Устанавливает текущий набор лицевых, которые будут перебираться итератором Выполняется запрос на извлечение записей лицевых Если имя таблицы не указано, то запрашиваем из TempTable В заполненной таблице должны быть поля: row_id Numeric(10) // значение поля row_id извлеченной записи SORT Varchar(4000) // поле сортировки Если таблица постоянная( не начинается на # ), то должно быть ещё поле USERID Numeric(10) // ID пользователя (в таблице содержатся данные разных пользователей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Услуги": [
          {
            "name": "CreateServices",
            "internalName": "CreateServices",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 373
            },
            "briefDescription": "Функция Итератор.Услуги( Дата_начала_периода[, Дата_окончания_периода] )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к услугам, даты действия которых пересекаются с указанным периодом Если опущена Дата_окончания_периода, периодом является один день - Дата_начала_периода",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЛицевыеЗадач": [
          {
            "name": "PrepareTempTableTasks",
            "internalName": "PrepareTempTableTasks",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 185
            },
            "briefDescription": "Функция Итератор.ЛицевыеЗадач( НомерЗаписиЛицевого_или_МассивЗаписейЛицевых, условие_фильтрации_управление )",
            "detailedDescription": {
              "text": "Устанавливает текущий набор лицевых, которые будут перебираться итератором с дополнительным условием фильтрации по полю управление Заполняет списком лицевых TempTable строка условие_фильтрации_управление долждна быть передана без условия AND впереди и без указания каких либо таблиц (синонимов) иначе вызовет ошибку в запросе построения иерархии",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КарточкиРегистрации": [
          {
            "name": "CreateCardReg",
            "internalName": "CreateCardReg",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 582
            },
            "briefDescription": "Функция Итератор.КарточкиРегистрации( [Дата_начала_периода] [, Дата_окончания_периода ] [, Параметры] )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к записям таблицы \"Карточки регистрации\", действующим в указанный промежуток времени Если Дата_начала_периода опущена или имеет значение 00.00.00, выбираются все записи. Если опущена Дата_окончания_периода, она считается равной Дате_начала_периодаЕсли нет третьего параметра, выбираются только записи, в которых Дата прописки \u003c\u003d Дата_окончания_периода, ДатаВыписки \u003e\u003d Дата_начала_периода или пустая, Вид регистрации !\u003d 3Параметры определяют условия выбора дополнительных записей. Возможные присутствиующие значения в Параметрах и их описание: \"C\"(русская буква С) - исключается проверка по полю Вид регистрации, дополнительно выбираются карточки, у которых Дата прописки пустая, а Дата выписки \u003e\u003d Дата_начала_периода или пустая \"Д\" - вместе с карточками регистрации выбираются документы, досутп к которым осуществляется через вложенный объект Документ",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Перерасчеты": [
          {
            "name": "CreateRecalcs",
            "internalName": "CreateRecalcs",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 654
            },
            "briefDescription": "Функция Итератор.Перерасчеты( Дата_начала_периода[, Дата_окончания_периода] )",
            "detailedDescription": {
              "text": "Создание объекта, согласно списку полученных месяцев перерасчета обеспечивающего доступ к записям таблицы \"История лицевого\", попадающих в эти месяцы, \"Временное движение\", \"НПТариф\", \"НПЛьгота\", \"НКТариф\", \"НКЛьгота\" и связанные с ними записи таблицы \"Документ\" (акты качества) - по месяцам расчета, указанным при создании объекта. Список месяцев перерасчета получается из записей указанных выше таблиц начислений.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Платежи": [
          {
            "name": "CreatePayments",
            "internalName": "CreatePayments",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 408
            },
            "briefDescription": "Функция Итератор.Платежи( НачальныйМесяц[, КонечныйМесяц] )",
            "detailedDescription": {
              "text": "Создает объект, обеспечивающий доступ к записям таблицы Список оплаты за указанные расчетные месяцыЕсли опущен КонечныйМесяц, выбираются записи за один месяц",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Лицевые": [
          {
            "name": "PrepareTempTable",
            "internalName": "PrepareTempTable",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 23
            },
            "briefDescription": "Функция Итератор.Лицевые( НомерЗаписиЛицевого_или_МассивЗаписейЛицевых )",
            "detailedDescription": {
              "text": "Устанавливает текущий набор лицевых, которые будут перебираться итератором Заполняет списком лицевых TempTable",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Задолженность": [
          {
            "name": "CreateDebts",
            "internalName": "CreateDebts",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 531
            },
            "briefDescription": "Функция Итератор.Задолженность( Расчетный месяц[, Минимальное_число_месяцев_задолженности, Максимальное_число_месяцев_задолженности, Минимальная_сумма_задолженности] )",
            "detailedDescription": {
              "text": "Создает объект для доступа к сведениям о задолженности Если параметры не опущены, при наличии задолженности будет доступна одна запись, содержащая поля Сумма (общая сумма долга) и Месяцев (число месяцев долга) При этом, если Минимальная_сумма_задолженности \u003e 0, запись будет доступна только для лицевых с задолженностью не ниже этой суммы Если Минимальная_сумма_задолженности \u003c\u003d 0, но указаны Минимальное_число_месяцев_задолженности и Максимальное_число_месяцев_задолженности, запись будет доступна для лицевых, имеющих задолженность за указанное число месяцев Если при этом Минимальное_число_месяцев_задолженности \u003d\u003d 0, рассматривается задолженность от 1 месяца, если Максимальное_число_месяцев_задолженности \u003d\u003d 0, рассматривается задолженность за любое число месяцев, не менее Минимальное_число_месяцев_задолженности Если все параметры нулевые, запись будет доступна для всех лицевых, имеющих задолженностьЕсли опущены дополнительные параметры, выбираются все записи долгов по услугам, у которых Сумма \u003e 0. Каждая запись соответствует долгу по одной услуге за один месяц. Доступны поля Номер услуги, Месяц долга, Сумма, Поставщик (номер записи в таблице Организации) Записи отсортированы по Месяцу долга (по возрастанию), далее по поставщику, далее по номеру услуги",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Пользовательский": [
          {
            "name": "CreateUserQuery",
            "internalName": "CreateUserQuery",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 676
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Итератор.Пользовательский( текст запроса, массив параметров запроса[, имя запроса для отображения] ) Итератор.Пользовательский( текст запроса, типы параметров запроса , аргумент 1 запроса [,аргумент 2 запроса...] )Создает итератор с пользовательским запросом Запрос должен обязательно:\nизвлекать поля row_id и SORT таблицы TempTable именно под такими именами,в условии WHERE содержать проверку на TempTable.userid,в условии ORDER BY содержать сортировку по полю TempTable.SORT",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Плательщики": [
          {
            "name": "CreatePayers",
            "internalName": "CreatePayers",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 598
            },
            "briefDescription": "Функция Итератор.Плательщики()",
            "detailedDescription": {
              "text": "Создает объект для доступа к записям таблицы \"Карточки регистрации\", у которых установлен флаг \"Плательщик\" и установлена связь \"Место работы\" или заполнено поле \"Работа\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Завершить": [
          {
            "name": "FlushQuery",
            "internalName": "FlushQuery",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 239
            },
            "briefDescription": "Итератор.Завершить",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОбъектыЛицевого": [
          {
            "name": "CreateAccountObjects",
            "internalName": "CreateAccountObjects",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 632
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Итератор.ОбъектыЛицевого( ДатНач, ДатКнц [, параметры] ) Создание объекта для доступа к объектам лицевого, действующим в указанный период Параметры - строка, в которой имеют значение символы (русские):\nХ - создавать вложенный объект для доступа к характеристикам объекта (параметрам Номенклатуры)С - создавать вложенный объект для доступа к параметрам для счетчика (свойствам)П - создавать вложенный объект для доступа к показаниям счетчикаВ - выводить все поля таблицы Показания счетчиков",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СледующийЛицевой": [
          {
            "name": "NextAccountRecord",
            "internalName": "NextAccountRecord",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 233
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Итератор.СледующийЛицевой Вызывает переход к очередной записи таблицы Лицевые счета с типом Лицевой счет, записи промежуточных уровней пропускаются",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Компенсации": [
          {
            "name": "CreateCompensation",
            "internalName": "CreateCompensation",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 303
            },
            "briefDescription": "Функция Итератор.Компенсации( Начальный_расчетный_месяц [,Конечный_расчетный_месяц] [,Режим] )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к итогам компенсаций за указанный период Если опущен Конечный_расчетный_месяц - за один месяц Может быть указано любое число месяца Режим определяет способ подведения итогов Если он опущен или указана пустая строка - подводятся итоги с группированием Номер льготы, Номер услуги Если строка содержит русскую М, группирование начинается с Месяца расчета Если строка содержит \"Д\" - в группирование добавляется Документ (после Месяца расчета, при отсутствии - первым полем) Документ - это номер записи в таблице Льготы (по одному документу номер льготы всегда один и тот же, поэтому но группировка по номеру льготы требуется, чтобы было доступно это поле) Если строка содержит \"Н\" - в группирование добавляется Носитель (после Месяца расчета, при отсутствии - первым полем) Носитель - это поле Человек-Льгота в связанной таблице льготы (номер записи связанной таблицы Карточки регистрации), у одного носителя может быть несколько льгот Режимы \"Н\" и \"Д\" несовместимы, при наличии обеих букв будет выдана ошибка Дальше идет группирование по номеру льготы Если строка содержит \"П\" - в группирование добавляется Поставщик (после Номера льготы) Если строка содержит \"Т\" - в группирование добавляется ИспользованТариф (после Номера услуги)Возможные режимы и соответствующая группировка: \"\" - Номер льготы, Номер услуги \"M\" - Месяц расчета, Номер льготы, Номер услуги \"П\" - Номер льготы, Поставщик, Номер услуги \"Д\" - Документ, Номер льготы, Номер услуги \"Н\" - Носитель, Номер льготы, Номер услуги \"МП\" - Месяц расчета, Номер льготы, Поставщик, Номер услуги \"МД\" - Месяц расчета, Документ, Номер льготы, Номер услуги \"МН\" - Месяц расчета, Носитель, Номер льготы, Номер услуги \"ДП\" - Документ, Номер льготы, Поставщик, Номер услуги \"НП\" - Носитель, Номер льготы, Поставщик, Номер услуги \"МДП\" - Месяц расчета, Документ, Номер льготы, Поставщик, Номер услуги \"МНП\" - Месяц расчета, Носитель, Номер льготы, Поставщик, Номер услугиВ объекте доступны поля Льготы, ПЛьготы, КЛьготы, ИЛьготы - соответственно сумма компенсаций по тарифу, перерасчета копенсаций, компенсаций по качеству, итого льгот в пределах текущей группировки, ЛОбъем, ПЛОбъем, КЛОбъем, ИЛОбъем - соответствующие объемы, Льготников и Пользователей - число льготников и пользователей в пределах текущей группировки В качестве числа льготников выступает число уникальных документов, а при группировке по документу или носителю будет 1 В качестве числа пользователей выступает максимум от поля Пользователей в пределах текущей группировки Кроме того, доступны все поля группировки",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Сальдо": [
          {
            "name": "CreateBalance",
            "internalName": "CreateBalance",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 553
            },
            "briefDescription": "Функция Итератор.Сальдо( Расчетный месяц )",
            "detailedDescription": {
              "text": "Создает объект для доступа к элементам сальдо указанного месяца Выбираются все записи сальдо по услугам (в т.ч. переплат) Каждая запись соответствует долгу или переплате по одной услуге за один месяц. Доступны поля Номер услуги, Месяц долга, Сумма, Поставщик (номер записи в таблице Организации) Записи отсортированы по Месяцу долга (по возрастанию), далее по поставщику, далее по номеру услугиВ объекте доступны также две переменные Пени и Субсидии - соответствующее сальдо",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "История": [
          {
            "name": "CreateHistory",
            "internalName": "CreateHistory",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 498
            },
            "briefDescription": "Функция Итератор.История( [Дата_начала_периода[, Дата_окончания_периода]] )",
            "detailedDescription": {
              "text": "Создает объект, обеспечивающий доступ к записям таблицы История лицевогоЕсли Дата_начала_периода опущена или 00.00.00, выбираются все записи, иначе выбираются только записи, у которых ДатНач \u003c\u003d Дата_окончания_периода и ДатКнц \u003e\u003d Дата_начала_периода Если Дата_окончания_периода опущена, она считается равной Дате_начала_периода",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Начисления": [
          {
            "name": "CreateCharges",
            "internalName": "CreateCharges",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 250
            },
            "briefDescription": "Функция Итератор.Начисления( Начальный_расчетный_месяц [, Конечный_расчетный_месяц] [, СписокПолейДляГруппировки, СписокПолейДляСортировки] )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к результатам начислений за период от Начальный_расчетный_месяц до Конечный_расчетный_месяц Если Конечный_расчетный_месяц опущен, данные читаются за один месяц",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Поставщики": [
          {
            "name": "CreateProviders",
            "internalName": "CreateProviders",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 381
            },
            "briefDescription": "Функция Итератор.Поставщики( Дата_начала_периода[, Дата_окончания_периода] )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к поставщикам, даты действия которых пересекаются с указанным периодом Если опущена Дата_окончания_периода, периодом является один день - Дата_начала_периода",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Льготники": [
          {
            "name": "CreateLgotniki",
            "internalName": "CreateLgotniki",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 477
            },
            "briefDescription": "Функция Итератор.Льготники( Месяц_начала_периода [,Месяц_окончания_периода] )",
            "detailedDescription": {
              "text": "Создает объект, обеспечивающий доступ к записям таблицы Льготы и связанным с ними записям таблиц Карточки регистрации, Виды документов, НЛьгота, НПЛьгота, НКЛьгота.Выбираются только записи, у которых ДатНач \u003c\u003d ПоследнееЧисло(Месяц_окончания_периода) и ДатКнц \u003e\u003d Первое число Месяца_начала_периода. Если Месяц_окончания_периода опущен, берется ПоследнееЧисло( Месяц_начала_периода). Если в качестве даты начала периода указана 00.00.00, выбираются все записи из таблицы Льготы, начисления не выбираются",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЛицевыеДоговора": [
          {
            "name": "PrepareTempTableFromContract",
            "internalName": "PrepareTempTableFromContract",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 146
            },
            "briefDescription": "Функция Итератор.ЛицевыеДоговора( НомерЗаписиДоговора, Дата_Действия_Лицевых_Внутри_Договора )",
            "detailedDescription": {
              "text": "Устанавливает в качестве текущего набора лицевых, которые будут перебираться итератором, лицевые, входящие в договор на указанную дату Заполняет списком лицевых TempTable",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Параметры": [
          {
            "name": "CreateParameter",
            "internalName": "CreateParameter",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 320
            },
            "briefDescription": "Функция Итератор.Параметры( Дата )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к значениям параметров, действующих на указанную дату",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЛицевыеПодготовка": [
          {
            "name": "PrepareCustomTempTable",
            "internalName": "PrepareCustomTempTable",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 59
            },
            "briefDescription": "Функция Итератор.ЛицевыеПодготовка( НомерЗаписиЛицевого_или_МассивЗаписейЛицевых[, Имя_временной_таблицы][, фильтр] )",
            "detailedDescription": {
              "text": "Заполнение временной таблицы результатами иерархического запроса с доп. условием фильтрации Заполнение присходит только, если список узлов установлен непустой Если имя таблицы не указано, то заполняется TempTable Таблица-получатель, должна содержать следующие поля: row_id Numeric(10) // значение поля row_id извлеченной записи LEVEL Numeric(10) // уровень в иерархии USERID Numeric(10) // ID пользователя (в таблице содержатся данные разных пользователей SORT Varchar(4000) // поле сортировки",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "АдресЛицевогоПлотно": [
          {
            "name": "GetLSAddressShort",
            "internalName": "GetLSAddressShort",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 438
            },
            "briefDescription": "функция Итератор.АдресЛицевогоПлотно()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПоказанияСчетчиков": [
          {
            "name": "CreateMeterReading",
            "internalName": "CreateMeterReading",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 423
            },
            "briefDescription": "Функция Итератор.ПоказанияСчетчиков( Начало_периода [, Окончание_периода] )",
            "detailedDescription": {
              "text": "Создает объект, обеспечивающий доступ к показаниям счетчиков за указанный период Если опущена дата окончания периода - за один день",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextRecord",
            "internalName": "NextRecord",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 226
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Итератор.Следующий Вызывает переход к очередной записи таблицы Лицевые счета (без контроля типа)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВременноеДвижение": [
          {
            "name": "CreateVremMod",
            "internalName": "CreateVremMod",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 455
            },
            "briefDescription": "Функция Итератор.ВременноеДвижение( [Дата_начала_периода[, Дата_окончания_периода]] )",
            "detailedDescription": {
              "text": "Создает объект, обеспечивающий доступ к записям таблицы Временное движениеЕсли Дата_начала_периода опущена или 00.00.00, выбираются все записи, иначе выбираются только записи, у которых ДатНач \u003c\u003d Дата_окончания_периода и ДатКнц \u003e\u003d Дата_начала_периода Если Дата_окончания_периода опущена, она считается равной Дате_начала_периода",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Пени": [
          {
            "name": "CreateFine",
            "internalName": "CreateFine",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 612
            },
            "briefDescription": "Функция Итератор.Пени( Расчетный_месяц )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к пени Доступные поля ПениВход, ПениНач, ПениОпл, ПениИсх, ПениСторно",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Льготы": [
          {
            "name": "CreatePrivileges",
            "internalName": "CreatePrivileges",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
              "line": 390
            },
            "briefDescription": "Функция Итератор.Льготы( Дата_начала_периода[, Дата_окончания_периода] )",
            "detailedDescription": {
              "text": "Создание объекта для доступа к записям льгот, даты действия которых пересекаются с указанным периодом Если опущена Дата_окончания_периода, периодом является один день - Дата_начала_периода",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "AccountInteratorEntity",
      "internalName": "AccountIteratorFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/AccountIterator.cpp",
        "line": 692
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "AOMR_Reset",
            "internalName": "AOMR_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hAccountObjects.cpp",
              "line": 395
            },
            "briefDescription": "Функция ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВНачалоПоследних": [
          {
            "name": "AOMR_ResetLast",
            "internalName": "AOMR_ResetLast",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hAccountObjects.cpp",
              "line": 402
            },
            "briefDescription": "Функция ВНачалоПоследних()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СледующееПоследнее": [
          {
            "name": "AOMR_NextLast",
            "internalName": "AOMR_NextLast",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hAccountObjects.cpp",
              "line": 415
            },
            "briefDescription": "Функция СледующееПоследнее()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "AOMR_Next",
            "internalName": "AOMR_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hAccountObjects.cpp",
              "line": 409
            },
            "briefDescription": "Функция Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущийЭлемент": [
          {
            "name": "AOMR_CurrentItem",
            "internalName": "AOMR_CurrentItem",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hAccountObjects.cpp",
              "line": 421
            },
            "briefDescription": "Функция ТекущийЭлемент()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "AccountObjectMeterReadingEntity",
      "internalName": "AccountObjectsMeterReadingFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hAccountObjects.cpp",
        "line": 429
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ПолучитьСписокОтчетов": [
          {
            "name": "GetSelReportsNames",
            "internalName": "GetSelReportsNames",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4326
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет получить названия доступных отчетов\n*\n* @Функция ПолучитьСписокОтчетов(Бул дляСпискаЗаписей)@\n*\n* @param[in] дляЗаписи если true, то вернутся список отчетов для одной записи, иначе для списка записей\n*\n* @return список имен доступных отчетов\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПоля": [
          {
            "name": "SetFields",
            "internalName": "SetFields",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4272
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить поиск вхождения указанного текста по указанным полям\n*\n* @Функция УстановитьПоля( Строка|Объект поля )@\n*\n* @param[in] поля если строка, то список имен полей через запятую (пробелы имеют значения);\n* если обьект то в качестве полей беруться все текстовые значения этого объекта\n* @return 1, если поля установлены, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "Печать": [
          {
            "name": "SelPrint",
            "internalName": "SelPrint",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4346
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет напечатать отчет по выборке\n*\n* @Функция Печать(Строка имяОтчета, Бул печататьЗаписей [, Объект параметры])@\n*\n* @param[in] имяОтчета имя отчета\n* @param[in] печататьЗаписей если true, то печататься будет запись, иначе вся выборка\n* @param[in] параметры параметры отчета\n*\n* @return 1, если отчет построен, 0 - иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "выборка": {
          "name": "GetSelection",
          "internalName": "GetSelection",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 4256
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить выборку\n*\n* @Свойство выборка@\n*\n* @return SelectionObject выборка\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "ресурс": {
          "name": "GetResourceInfo",
          "internalName": "GetResourceInfo",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 4385
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "Свойство ресурс\n\nПозволяет получить описание данного объекта из ресурса",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "имя": {
          "name": "GetName",
          "internalName": "GetName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 4242
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @class ApiBrowser\n* @brief Класс для работы с выборкой\n*\n* @Класс ApiBrowser@\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "SelectionEntity",
      "constructors": [],
      "name": "ApiBrowserEntity",
      "internalName": "ApiBrowserFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4405
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "apiBrowser": {
          "name": "GetApiBrowserFromObjectView",
          "internalName": "GetApiBrowserFromObjectView",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 78
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "ViewObjectEntity",
      "constructors": [],
      "name": "ApiBrowserObjectEntity",
      "internalName": "ApiBrowserObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 97
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "УвеличитьНомер": [
          {
            "name": "BirtROAddNumber",
            "internalName": "BirtROAddNumber",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 3014
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод УвеличитьНомер Если задано свойство МАКС_НОМЕР, то при его достижении вызывается КонецКомплекта, а затем НачалоКомплекта",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОбщиеДанные": [
          {
            "name": "BirtAddAnyData",
            "internalName": "BirtAddAnyData",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 3051
            },
            "briefDescription": "Метод ОбщиеДанные( объект, имя данных )",
            "detailedDescription": {
              "text": "принимает массив с данными для добавления в отдельный источник данных",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "НачалоЭкспорта": [
          {
            "name": "BirtROStartExport",
            "internalName": "BirtROStartExport",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 3037
            },
            "briefDescription": "Метод НачалоЭкспорта( имя_файла )",
            "detailedDescription": {
              "text": "создает на сервере файл с именем имя_файла и начинает экспорт данных в виде xml",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Логотип": [
          {
            "name": "BirtLogo",
            "internalName": "BirtLogo",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 3060
            },
            "briefDescription": "Метод Логотип( строка Base64 )",
            "detailedDescription": {
              "text": "принимает картинку в виде Base64",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "НачалоКомплекта": [
          {
            "name": "BirtROStartSpool",
            "internalName": "BirtROStartSpool",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2984
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод НачалоКомплекта отмечает начало формирования комплекта документов",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСвойство": [
          {
            "name": "BirtROSetProperty",
            "internalName": "BirtROSetProperty",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 3029
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод УстановитьСвойство принимает свойства: ОПТИМИЗАЦИЯ - 1-включена(шаблоны должны поддерживать оптимизацию), 0 - выключена МАКС_НОМЕР - максимальный номер при достижении которого функцией УвеличитьНомер вызывается КонецКомплекта, а затем НачалоКомплекта ПРЕДПРОСМОТР - комплект выводится на предпросмотр, если он pdf ПЕЧАТЬ - отправка комплекта на печать после формирования ПРИНТЕР - имя принтера для печати PDF_ФАЙЛ - имя pdf-файла для формирования комплекта в один файл ПАПКА_КОМПЛЕКТОВ - папка на клиенте для формирования файлов комплекта",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КонецЭкспорта": [
          {
            "name": "BirtROEndExport",
            "internalName": "BirtROEndExport",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 3044
            },
            "briefDescription": "Метод КонецЭкспорта()",
            "detailedDescription": {
              "text": "завершает экспорт данных в файл, начатый вызовом метода НачалоЭкспорта",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Каталог": [
          {
            "name": "BirtTempFolder",
            "internalName": "BirtTempFolder",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2943
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КонецКомплекта": [
          {
            "name": "BirtROStopSpool",
            "internalName": "BirtROStopSpool",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2997
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод КонецКомплекта Метод Завершить формирует комплект документов и выводит на предпросмотр/на печать/в файл",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "BirtReportOptimizerEntity",
      "internalName": "BirtReportOptimizerFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/FRWrapper.cpp",
        "line": 3071
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "СнятьВсеОтметки": [
          {
            "name": "BrowserClearSelect",
            "internalName": "BrowserClearSelect",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1614
            },
            "briefDescription": "снять все отметки",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущаяЗапись": [
          {
            "name": "BrowserGetCurrentRecord",
            "internalName": "BrowserGetCurrentRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1633
            },
            "briefDescription": "возвращает текущую запись выборки",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОтметитьВсеЗаписи": [
          {
            "name": "BrowserSelectAll",
            "internalName": "BrowserSelectAll",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1608
            },
            "briefDescription": "отметить все записи",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ИнвертироватьОтметки": [
          {
            "name": "BrowserInvertSelect",
            "internalName": "BrowserInvertSelect",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1620
            },
            "briefDescription": "инвертировать отметки",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗапуститьТаймер": [
          {
            "name": "BrowserStartTimer",
            "internalName": "BrowserStartTimer",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1672
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функця Browser.ЗапуститьТаймер( период_запуска, имя_функции ) запустить таймер у браузера",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОтметитьТекущуюЗапись": [
          {
            "name": "BrowserSelectCurrent",
            "internalName": "BrowserSelectCurrent",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1602
            },
            "briefDescription": "отметить текущую запись",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОстановитьТаймер": [
          {
            "name": "BrowserStopTimer",
            "internalName": "BrowserStopTimer",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1679
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функця Browser.ОстановитьТаймер() остановить таймер у браузера",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "НомерОтмеченнойЗаписи": [
          {
            "name": "BrowserGetMarkedNo",
            "internalName": "BrowserGetMarkedNo",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1653
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "возвращает номер очередной выделенной записи или -1, если выделенных записей нет",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Запись": [
          {
            "name": "BrowserGetRecord",
            "internalName": "BrowserGetRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1626
            },
            "briefDescription": "возвращает запись выборки по индексу",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "НомерЗаписиЛ": {
          "name": "BrowserGetRecNo",
          "internalName": "BrowserGetRecNo",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1580
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "BrowserObject \nлогический номер записи",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "КоличествоЗаписей": {
          "name": "BrowserGetRecCount",
          "internalName": "BrowserGetRecCount",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1640
          },
          "briefDescription": "возвращает число записей в выборке",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ЗаписьОтмеченаФ": {
          "name": "BrowserGetRecordMarkedPhis",
          "internalName": "BrowserGetRecordMarkedPhis",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1665
          },
          "briefDescription": "возвращает отмечена ли указанная запись (физический номер)",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "НомерЗаписиФ": {
          "name": "BrowserGetRealRecNo",
          "internalName": "BrowserGetRealRecNo",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1591
          },
          "briefDescription": "физический номер записи",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Права": {
          "name": "BrowserGetRights",
          "internalName": "BrowserGetRights",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1692
          },
          "briefDescription": "Права на браузер",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "КоличествоОтмеченных": {
          "name": "BrowserGetMarkRecCount",
          "internalName": "BrowserGetMarkRecCount",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1646
          },
          "briefDescription": "возвращает число отмеченных записей в выборке",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ЗаписьОтмечена": {
          "name": "BrowserGetRecordMarked",
          "internalName": "BrowserGetRecordMarked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1659
          },
          "briefDescription": "возвращает отмечена ли указанная запись (логический номер)",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "НомерЗаписиЛ": {
          "name": "BrowserSetRecNo",
          "internalName": "BrowserSetRecNo",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1585
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "НомерЗаписиФ": {
          "name": "BrowserSetRealRecNo",
          "internalName": "BrowserSetRealRecNo",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1596
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "BrowserEntity",
      "internalName": "BrowserObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1701
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Картинка": {
          "name": "GetObjBtnImage",
          "internalName": "GetObjBtnImage",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1001
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "ButtonObject \nчтение свойства \"Картинка\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Картинка": {
          "name": "SetObjBtnImage",
          "internalName": "SetObjBtnImage",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1007
          },
          "briefDescription": "установка свойства \"Картинка\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ButtonEntity",
      "internalName": "ButtonObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1016
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ЧтениеСчетчиков": [
          {
            "name": "Calc_GetCounters",
            "internalName": "Calc_GetCounters",
            "sourceLocation": {
              "file": "KvplataCalc/source/func_calc.cpp",
              "line": 262
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта расчета ЧтениеСчетчиков( месяц ) Читает все показания счетчиков, у которых расчетный месяц - указанный Возвращает массив с индексами 10000, 10001, 10002... Каждый элемент массива соответствует одной записи показаний счетчиков Внутри каждого подобъекта переменные:\nТип (1-показание индивидуального счетчика, 4 - показание группового счетчика)ПозицияПоказания (row_id показания в таблице Показания счетчиков);Платеж (row_id row_id платежа в Списке оплаты, с которым связано данное показание счетчика или -1, если счетчик не в платеже);Ведомость (row_id ведомости в таблице Документ, с которой связан данный счетчик);ПозицияСчетчика (row_id счетчика в таблице Список объектов);НомерУслугиНомерТарифаДата (дата снятия показания);РасчМесяц (месяц, в котором выполняется начисление по данному счетчику);Месяцев (значение поля СчМесяцев);ТипВвода;Тарифность (общее число тарифов по данному счетчику);Показание;Расход0 (это поле Расход);Расход (это поле Итоговый расход);ДополнительныйРасход;ЗаводскойНомер (счетчика)\nФункцию следует вызывать только после об.Выполнить()",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЧтениеСостоянияСчетчиков": [
          {
            "name": "Calc_ReadCountersState",
            "internalName": "Calc_ReadCountersState",
            "sourceLocation": {
              "file": "KvplataCalc/source/func_calc.cpp",
              "line": 323
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта расчета ЧтениеСостоянияСчетчиков( месяц[, услуга] ) Возвращает массив, характеризующий состояние счетчиков по указанной услуге (группе услуг) в течение указанного месяца Если услуга опущена или указан 0 - по всем услугам Массив будет содержать подобъекты 1, 2, 3... по числу интервалов в данном месяце, на которых состояние хотя бы одного счетчика по данной услуге меняется. Интервалы отсортированы по возрастанию дат Кроме того, есть переменная ЧислоИнтервалов Внутри каждого подобъекта будут подобъекты с именами 1,2,3, а также переменные ЧислоОбъектов, ДатНач, ДатКнц Каждый подобъект счетчика содержит переменные: ПозицияОбъекта, НомерУслуги, Состояние, Среднее, Тарифность, Разрядность, Коэффициент",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Лицевой": [
          {
            "name": "GoToAcc",
            "internalName": "GoToAcc",
            "sourceLocation": {
              "file": "KvplataCalc/source/func_calc.cpp",
              "line": 233
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта расчета Лицевой() Выполняет переход на ближайший лицевой счет из числа ранее загруженных для расчета, хранящихся в объекте, у которого вызвана данная функция (если уже стоим на лицевом счете, никуда не сместимся) Возвращает номер записи этого лицевого или -1, если достигнут конец списка",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановкаСчетчиков": [
          {
            "name": "Calc_SetCounters",
            "internalName": "Calc_SetCounters",
            "sourceLocation": {
              "file": "KvplataCalc/source/func_calc.cpp",
              "line": 284
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Не доделана Функция объекта расчета УстановкаСчетчиков( месяц, массив - источник ) Заменяет имеющиеся в объекте расчета показания счетчиков за указанный расчетный месяц на переданные (все ранее имевшиеся показания за данный месяц удаляются) Принимает второй аргумент в формате, возвращенном ЧтениеСчетчиков, т.е. это должен быть массив со вложенными массивами Внутри каждого вложенного массива обязательно должны быть переменные НомерУслуги и Расход, в противном случае такой вложенный массив игнорируется Из каждого вложенного массива, в котором данные переменные присутствуют, создается показание счетчиков, в качестве расчетного месяца будет указан первый аргумент функции Дополнительно во вложенном массиве могут присутствовать переменные: Имя переменной Значение при отсутствии Дата (дата показания) первый аргумент функции НомерТарифа 0 Тарифность (общее число тарифов по данному счетчику) 1 Месяцев 1 ПозицияСчетчика (row_id счетчика в таблице Список объектов) -1",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЧтениеПлатежей": [
          {
            "name": "Calc_ReadPay",
            "internalName": "Calc_ReadPay",
            "sourceLocation": {
              "file": "KvplataCalc/source/func_calc.cpp",
              "line": 309
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта расчета ЧтениеПлатежей( месяц ) Читает все платежи, у которых расчетный месяц - указанный Возвращает массив с индексами 10000, 10001, 10002... Каждый элемент массива соответствует одной записи платежа, платежа по услуге, сторно или оплате пени Внутри каждого подобъекта переменные:\nВедомость - номер записи платежной ведомости в таблице ДокументИсточник - номер записи источника платежаПлатеж - номер записи в списке оплатыДокументаДата - дата на платежной ведомостиДокументаСрок - поле Срок на платежной ведомостиЗа - месяц, за который платеж, 00.00.00, если не указанПо - месяц, по который платеж, 00.00.00, если не указанПлатежнаяГруппаДата - дата платежаРасчМесяц - расчетный месяц в Списке оплатыФлаги - флаги платежа (1 - не начислять пени, 2 - сторнировать пени)Тип - 0 - собственно платеж, 1 - платеж по услуге, 2 - стороно пени, 3 - оплата пениДетальныйПлатеж - номер записи \"Оплата по видам\" (0 - основной платеж)Услуга - номер услуги при платеже по услуге, 0 - платеж, сторно или оплата пениСумма - сумма платежа, платежа по услуге, сторно или оплаты пени",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выполнить": [
          {
            "name": "Calc_Do",
            "internalName": "Calc_Do",
            "sourceLocation": {
              "file": "KvplataCalc/source/func_calc.cpp",
              "line": 166
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта расчета Выполнить( расчетный_месяц [, row_id лицевого счета] [, дополнительный объект][, \".\"] ) Выполняет расчет одного лицевого по ранее загруженным данным для расчета, хранящимся в объекте, у которого вызвана данная функцияЕсли опущен row_id лицевого счета, выполняется расчет очередного лицевого счета из числа загруженных в объект Если не опущен row_id, но он равен 0, результат тот же Если он \u003e0 - выполняется расчет лицевого счета с таким row_id, при этом источник прокручивается от текущей позиции до конца, затем идет поиск от начала Если он \u003c 0 - источник сразу сбрасывается в начало, далее идет поиск лицевого с таким row_id (знак меняется на +)Если указан дополнительный объект, перед выполнением расчета все переменные копируются, а объекты переносятся из него в исполнитель расчета (все будут доступны при расчете лицевого, после завершения расчета объекты будут уничтожены)Если указана строка \".\", после выполнения расчета не производится переход к следующему лицевому счету, иначе - производится Если указана строка \"0\", то в массив добавляются элементы с нулевыми суммамиВозвращает массив с определенными (наименование см. ниже) вложенными подмассивами. Вложенные массивы имеют имена 10001, 10002... Внутри каждого вложенного массива элементы НомерУслуги, Поставщик (номер записи поставщика), Сумма (знак +), Объем (знак+), Тариф (значение ИспользованТариф), Аналитика1, Аналитика2 Наименование подмассивов: У - расчет услуг, элемент массива дополнительно содержит переменные: НомерЛьготы, Документ (номер записи документа на льготы) и Пользователей Вложенные массивы в У упорядочены по номеру услуги, далее - поставщик, далее - величина тарифа Л - расчет льгот, элемент массива дополнительно содержит переменные: Вложенные массивы в Л упорядочены по номеру льготы, далее - номеру услуги, далее - поставщик, далее - номер записи документа на льготы, далее - величина тарифа К - расчет качества по начислениям, элемент массива дополнительно содержит переменные: Акт (номер записи документа) КЛ - расчет качества по компенсациям, элемент массива дополнительно содержит переменные: НомерЛьготы, Акт (номер записи документа), Документ (номер записи в таблице Льготы), Пользователей С(русская) - исходящее сальдо, элемент массива дополнительно содержит переменные: МесяцДолга, ФлагиПереплаты СП - исходящее сальдо пени, элемент массива дополнительно содержит переменные: За, МесяцДолга, ДатаПлатежа, МесяцРасчета, Источник, Платеж, Тип, ФлагиПереплаты УП - расчет пени, элемент массива дополнительно содержит переменные: За, МесяцДолга, МесяцРасчета, Источник, Платеж, Тип, ФлагиПереплатыКроме того, в массиве будут переменные Результат и ПозицияЛицевого Результат \u003d -1, если:\nв таблице нет лицевых счетов,запрошен расчет за месяц, за который не загружены данные Результат \u003d -2, если запрошен расчет лицевого, которого нет в источнике, либо запрошен расчет очередного лицевого, а их в источнике больше нет Результат \u003d 1, если расчет прошел успешно, конец источника данных не достигнут или не требуется перемещаться к следующему лицевому Результат \u003d 2, если расчет прошел успешно, больше в источнике нет лицевых счетов\nПозицияЛицевого при успешном выполнении расчета (т.е. если Результат \u003d\u003d 1 или 2) будет содержать row_id рассчитанного лицевого счета",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "Calc2Entity",
      "internalName": "CalcFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/func_calc.cpp",
        "line": 345
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ДобавитьПениНачисления": [
          {
            "name": "AddFineChargeResultAccount",
            "internalName": "AddFineChargeResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1811
            },
            "briefDescription": "ДобавитьПениНачисления",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьВходящиеПерерасчетыКомпенсаций": [
          {
            "name": "SetHelpInPrevResultAccount",
            "internalName": "SetHelpInPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1913
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьПениНачисления": [
          {
            "name": "GetFineChargeResultAccount",
            "internalName": "GetFineChargeResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1642
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - ПолучитьПениНачисления Чтение начисления пени Возвращает объект с вложенными массивами с именами 10000, 10001 и т.д., в каждом из вложенных массивов - переменные За, МесяцДолга, ДатаПлатежа, НомерУслуги, Поставщик, УК, ДоговорУК, Сумма, Источник, Платеж, Тип, КолДней, СуммаПлатежа, Ставка",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьКачествоПоНачислениям": [
          {
            "name": "GetServQualityResultAccount",
            "internalName": "GetServQualityResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1548
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - КачествоПоНачислениям Чтение качества по начислениям Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, ДоговорУК, Сумма, Объем, Тариф, Аналитика1, Аналитика2, За (месяц, за который перерасчет), Акт (номер записи документа)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьАктыКачества": [
          {
            "name": "GetQualitySourceAccount",
            "internalName": "GetQualitySourceAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1879
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьСохраненныеПениНачисления": [
          {
            "name": "GetFineSavedChargeResultAccount",
            "internalName": "GetFineSavedChargeResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1653
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьВходящиеПерерасчетыНачислений": [
          {
            "name": "GetServInPrevResultAccount",
            "internalName": "GetServInPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1593
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьКачествоПоКомпенсациям": [
          {
            "name": "GetHelpQualityResultAccount",
            "internalName": "GetHelpQualityResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1562
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - КачествоПоКомпенсациям Чтение качества по компенсациям из хранящихся в буфере результатов расчета Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, ДоговорУК, Сумма, Объем, Тариф, Аналитика1, Аналитика2, НомерЛьготы, Документ (номер записи в таблице Льготы), Пользователей, За (месяц, за который перерасчет), Акт (номер записи документа)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьКачествоПоНачислениям": [
          {
            "name": "AddServQualityResultAccount",
            "internalName": "AddServQualityResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1769
            },
            "briefDescription": "ДобавитьКачествоПоНачислениям",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПениНачисления": [
          {
            "name": "SetFineChargeResultAccount",
            "internalName": "SetFineChargeResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1748
            },
            "briefDescription": "УстановитьПениНачисления",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьПерерасчетКомпенсации": [
          {
            "name": "AddHelpPrevResultAccount",
            "internalName": "AddHelpPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1790
            },
            "briefDescription": "ДобавитьПерерасчетКомпенсации",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьРучныеПерерасчетыНачислений": [
          {
            "name": "SetManualServPrevResultAccount",
            "internalName": "SetManualServPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1718
            },
            "briefDescription": "УстановитьРучныеПерерасчетыНачислений",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьВходящиеПерерасчетыНачислений": [
          {
            "name": "SetServInPrevResultAccount",
            "internalName": "SetServInPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1903
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьПерерасчетыКомпенсаций": [
          {
            "name": "GetHelpPrevResultAccount",
            "internalName": "GetHelpPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1583
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - ПерерасчетыКомпенсаций Чтение перерасчета компенсаций Возвращает объект с вложенными массивами с именами 10000, 10001 и т.д., в каждом из вложенных массивов - переменные НомерЛьготы, НомерУслуги, Поставщик, ДоговорУК, Документ, Сумма, Объем, Тариф, Аналитика1, Аналитика2, Пользователей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьПениСальдо": [
          {
            "name": "GetFineRestsResultAccount",
            "internalName": "GetFineRestsResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1631
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - ПолучитьПениСальдо Чтение исходящего сальдо пени Возвращает объект с вложенными массивами с именами 10000, 10001 и т.д., в каждом из вложенных массивов - переменные За, МесяцДолга, МесяцРасчета, НомерУслуги, Поставщик, УК, ДоговорУК, Сумма, Источник, Платеж, Тип, ФлагиПереплаты",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПерерасчетыНачислений": [
          {
            "name": "SetServPrevResultAccount",
            "internalName": "SetServPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1712
            },
            "briefDescription": "УстановитьПерерасчетыНачислений",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьСальдо": [
          {
            "name": "AddRestsResultAccount",
            "internalName": "AddRestsResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1797
            },
            "briefDescription": "ДобавитьСальдо",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьВходящиеПерерасчетыКомпенсаций": [
          {
            "name": "GetHelpInPrevResultAccount",
            "internalName": "GetHelpInPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1607
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьКомпенсацииСДатами": [
          {
            "name": "GetHelpDateResultAccount",
            "internalName": "GetHelpDateResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1536
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьКачествоПоНачислениям": [
          {
            "name": "SetServQualityResultAccount",
            "internalName": "SetServQualityResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1700
            },
            "briefDescription": "УстановитьКачествоПоНачислениям",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьДелениеПлатежа": [
          {
            "name": "SetDivPayResultAccount",
            "internalName": "SetDivPayResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1834
            },
            "briefDescription": "УстановитьДелениеПлатежа",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьКачествоПоКомпенсациям": [
          {
            "name": "SetHelpQualityResultAccount",
            "internalName": "SetHelpQualityResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1706
            },
            "briefDescription": "УстановитьКачествоПоКомпенсациям",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьДелениеПлатежа": [
          {
            "name": "AddDivPayResultAccount",
            "internalName": "AddDivPayResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1817
            },
            "briefDescription": "ДобавитьДелениеПлатежа",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьПерерасчетНачисления": [
          {
            "name": "AddServPrevResultAccount",
            "internalName": "AddServPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1783
            },
            "briefDescription": "ДобавитьПерерасчетНачисления",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьНачисления": [
          {
            "name": "GetServResultAccount",
            "internalName": "GetServResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1504
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - Начисления Чтение начислений Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, ДоговорУК, Сумма, Объем, Тариф, Аналитика1, Аналитика2",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПениСальдо": [
          {
            "name": "SetFineRestsResultAccount",
            "internalName": "SetFineRestsResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1742
            },
            "briefDescription": "УстановитьПениСальдо",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСальдо": [
          {
            "name": "SetRestsResultAccount",
            "internalName": "SetRestsResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1736
            },
            "briefDescription": "УстановитьСальдо",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СжатьСальдоПоШагам": [
          {
            "name": "MergeRests",
            "internalName": "MergeRests",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1923
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьДелениеПлатежа": [
          {
            "name": "GetDivPayResultAccount",
            "internalName": "GetDivPayResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1664
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьНачисления": [
          {
            "name": "SetServResultAccount",
            "internalName": "SetServResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1688
            },
            "briefDescription": "УстановитьНачисления",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДелитьПлатежиПени": [
          {
            "name": "DivPaysPeni",
            "internalName": "DivPaysPeni",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1934
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьКачествоПоКомпенсациям": [
          {
            "name": "AddHelpQualityResultAccount",
            "internalName": "AddHelpQualityResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1776
            },
            "briefDescription": "ДобавитьКачествоПоКомпенсациям",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьПерерасчетыНачислений": [
          {
            "name": "GetServPrevResultAccount",
            "internalName": "GetServPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1572
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - ПерерасчетыНачислений Чтение перерасчета начислений Возвращает объект с вложенными массивами с именами 10000, 10001 и т.д., в каждом из вложенных массивов - переменные НомерУслуги, Поставщик, ДоговорУК, Сумма, Объем, Тариф, Аналитика1, Аналитика2",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьНачисления": [
          {
            "name": "AddServResultAccount",
            "internalName": "AddServResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1755
            },
            "briefDescription": "ДобавитьНачисления",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьКомпенсации": [
          {
            "name": "SetHelpResultAccount",
            "internalName": "SetHelpResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1694
            },
            "briefDescription": "УстановитьКомпенсации",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПерерасчетыКомпенсаций": [
          {
            "name": "SetHelpPrevResultAccount",
            "internalName": "SetHelpPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1724
            },
            "briefDescription": "УстановитьПерерасчетыКомпенсаций",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьСальдо": [
          {
            "name": "GetRestsResultAccount",
            "internalName": "GetRestsResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1620
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьПениСальдо": [
          {
            "name": "AddFineRestsResultAccount",
            "internalName": "AddFineRestsResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1804
            },
            "briefDescription": "ДобавитьПениСальдо",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобавитьКомпенсации": [
          {
            "name": "AddHelpResultAccount",
            "internalName": "AddHelpResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1762
            },
            "briefDescription": "ДобавитьКомпенсации",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьКомпенсации": [
          {
            "name": "GetHelpResultAccount",
            "internalName": "GetHelpResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1523
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - Компенсации Чтение компенсаций Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, ДоговорУК, Сумма, Объем, Тариф, Аналитика1, Аналитика2, НомерЛьготы, Документ (номер записи в таблице Льготы), Пользователей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьРучныеПерерасчетыКомпенсаций": [
          {
            "name": "SetManualHelpPrevResultAccount",
            "internalName": "SetManualHelpPrevResultAccount",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1730
            },
            "briefDescription": "УстановитьРучныеПерерасчетыКомпенсаций",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "CalcResultAccountEntity",
      "internalName": "CalcResultFuncsAccount",
      "sourceLocation": {
        "file": "KvplataCalc/source/UpdateCalc.cpp",
        "line": 1966
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Начисления": [
          {
            "name": "GetServResult",
            "internalName": "GetServResult",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1411
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - Начисления Чтение начислений из хранящихся в буфере результатов расчета Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, Сумма, Объем, Тариф, Аналитика1, Аналитика2",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КачествоПоКомпенсациям": [
          {
            "name": "GetHelpQualityResult",
            "internalName": "GetHelpQualityResult",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1451
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - КачествоПоКомпенсациям Чтение качества по компенсациям из хранящихся в буфере результатов расчета Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, Сумма, Объем, Тариф, Аналитика1, Аналитика2, НомерЛьготы, Документ (номер записи в таблице Льготы), Пользователей, За (месяц, за который перерасчет), Акт (номер записи документа)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КачествоПоНачислениям": [
          {
            "name": "GetServQualityResult",
            "internalName": "GetServQualityResult",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1437
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - КачествоПоНачислениям Чтение качества по начислениям из хранящихся в буфере результатов расчета Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, Сумма, Объем, Тариф, Аналитика1, Аналитика2, За (месяц, за который перерасчет), Акт (номер записи документа)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Компенсации": [
          {
            "name": "GetHelpResult",
            "internalName": "GetHelpResult",
            "sourceLocation": {
              "file": "KvplataCalc/source/UpdateCalc.cpp",
              "line": 1424
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта - Компенсации Чтение компенсаций из хранящихся в буфере результатов расчета Возвращает объект с индексами - номерами записей лицевых счетов, далее индексы 0,1,2..., далее переменные - параметры, вставляемые в запрос: Лицевой - номер записи лицевого, Месяц, НомерУслуги, Поставщик - номер записи поставщика, Сумма, Объем, Тариф, Аналитика1, Аналитика2, НомерЛьготы, Документ (номер записи в таблице Льготы), Пользователей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "CalcResultEntity",
      "internalName": "CalcResultFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/UpdateCalc.cpp",
        "line": 1460
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Помечен": {
          "name": "GetCheckBoxCheckedArrayProxy",
          "internalName": "GetCheckBoxCheckedArrayProxy",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 957
          },
          "briefDescription": "чтение свойства \"Помечен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "CheckBoxesEntity",
      "internalName": "CheckBoxesObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 967
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Помечен": {
          "name": "GetObjCheckBoxChecked",
          "internalName": "GetObjCheckBoxChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1049
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "CheckBoxObject \nчтение свойства \"Помечен\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Помечен": {
          "name": "SetObjCheckBoxChecked",
          "internalName": "SetObjCheckBoxChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1055
          },
          "briefDescription": "установка свойства \"Помечен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "ButtonEntity",
      "constructors": [],
      "name": "CheckBoxEntity",
      "internalName": "CheckBoxObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1064
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Прочитать": [
          {
            "name": "ClipboardGetData",
            "internalName": "ClipboardGetData",
            "sourceLocation": {
              "file": "Kvplata/source/func_clipboard.cpp",
              "line": 45
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Записать": [
          {
            "name": "ClipboardSetData",
            "internalName": "ClipboardSetData",
            "sourceLocation": {
              "file": "Kvplata/source/func_clipboard.cpp",
              "line": 40
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "ClipboardEntity",
      "internalName": "ClipboardObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/func_clipboard.cpp",
        "line": 54
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "СписокСКлючами": [
          {
            "name": "SetObjComboItemsAndKeys",
            "internalName": "SetObjComboItemsAndKeys",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 736
            },
            "briefDescription": "функция СписокСКлючами( массив_ключей, массив_строк )",
            "detailedDescription": {
              "text": "устанавливает список строк с ключевыми значениями из массивов",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Значение": [
          {
            "name": "GetObjComboValue",
            "internalName": "GetObjComboValue",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 709
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "возвращает значение элемента (при отсутствии аргументов) если передана строка, будет найдено значение по имени, если передано число, будет найдено значение по индексу",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Фильтр": [
          {
            "name": "SetObjComboFilter",
            "internalName": "SetObjComboFilter",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 749
            },
            "briefDescription": "установить фильтр",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СписокСтрок": [
          {
            "name": "GetObjComboItemsAsString",
            "internalName": "GetObjComboItemsAsString",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 671
            },
            "briefDescription": "функция СписокСтрок( разделитель )",
            "detailedDescription": {
              "text": "возвращает список строк комбобокса в виде строки с разделителем",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСписокСтрок": [
          {
            "name": "SetObjComboItemsAsString",
            "internalName": "SetObjComboItemsAsString",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 678
            },
            "briefDescription": "функция УстановитьСписокСтрок( список_строка, разделитель )",
            "detailedDescription": {
              "text": "устанавливает список строк комбобокса. Передается строка, разделенная разделителем",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ИндексПоИмени": [
          {
            "name": "GetObjComboIndexByName",
            "internalName": "GetObjComboIndexByName",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 742
            },
            "briefDescription": "возвращает индекс элемента по имени",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Список": {
          "name": "GetObjComboItemsAsArray",
          "internalName": "GetObjComboItemsAsArray",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 685
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "чтение свойства \"Список\" возвращает список строк комбобокса в виде массива",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "КлючПоИндексу": {
          "name": "GetObjComboKeyByIndex",
          "internalName": "GetObjComboKeyByIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 701
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "чтение свойства \"КлючПоИндексу\" возвращает ключевое значение элемента списка строк комбобокса по индексу, ключевые значения должны быть заданы функцией \"СписокСКдючами\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ИндексЭлемента": {
          "name": "GetObjComboItemIndex",
          "internalName": "GetObjComboItemIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 658
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "ComboBoxObject \nчтение свойства \"ИндексЭлемента\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Список": {
          "name": "SetObjComboItemsAsArray",
          "internalName": "SetObjComboItemsAsArray",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 693
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "установка свойства \"Список\" устанавливает список строк комбобокса из массива",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ИндексЭлемента": {
          "name": "SetObjComboItemIndex",
          "internalName": "SetObjComboItemIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 664
          },
          "briefDescription": "установка свойства \"ИндексЭлемента\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ComboBoxEntity",
      "internalName": "ComboBoxObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 762
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "Reset",
            "internalName": "Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hCompensation.cpp",
              "line": 18
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Итератор \"Компенсации\" \nФункция ВНачало()",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "Next",
            "internalName": "Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hCompensation.cpp",
              "line": 25
            },
            "briefDescription": "Функция Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЕстьДанные": [
          {
            "name": "DataExist",
            "internalName": "DataExist",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hCompensation.cpp",
              "line": 31
            },
            "briefDescription": "Функция ЕстьДанные()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "CompensationEntity",
      "internalName": "CompensationFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hCompensation.cpp",
        "line": 39
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "РежимСтрокЮникод": [
          {
            "name": "SetComObjectUnicode",
            "internalName": "SetComObjectUnicode",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 948
            },
            "briefDescription": "Функция РежимСтрокЮникод( режим )",
            "detailedDescription": {
              "text": "режим \u003d 0 - юникод режим выключен режим \u003d 1 - юникод режим включен для получаемых из COM-объекта строк режим \u003d 2 - юникод режим включен для передаваемых в COM-объект строк режим \u003d 3 - юникод режим включен для получаемых и передаваемых из/в COM-объект(а) строк",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекстОшибки": [
          {
            "name": "GetComObjectLastException",
            "internalName": "GetComObjectLastException",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 938
            },
            "briefDescription": "Функция ТекстОшибки()",
            "detailedDescription": {
              "text": "возвращает текст ошибки последней выполненной команды",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьОбработчик": [
          {
            "name": "SetComObjectHandler",
            "internalName": "SetComObjectHandler",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 816
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Класс объекта, вставляемого в Executor, обеспечивающего доступ к com-объектам \nФункция УстановитьОбработчик( имя события, имя функции ) Устанавливает указанную функцию (из PRG) в качестве обработчика указанного события текущего объекта (вызов только в форме об.УстановитьОбработчик) Вернет 1 при успешно установленном обработчике и 0, если установить обработчик не удается",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОжиданиеСобытия": [
          {
            "name": "WaitObject",
            "internalName": "WaitObject",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 888
            },
            "briefDescription": "Функция ОжиданиеСобытия( имя события )",
            "detailedDescription": {
              "text": "Если у текущего объекта в disp-интерфейсе обратного вызова имеется событие с именем eventName, работа программы приостанавливается до возникновения этого события Если такого события нет, просто ничего не делает",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСвойство": [
          {
            "name": "SetComObjectProperty",
            "internalName": "SetComObjectProperty",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 918
            },
            "briefDescription": "Функция УстановитьСвойство( имя свойства, параметры )",
            "detailedDescription": {
              "text": "Устанавливает значение свойству с указанным именем Используется для свойств, имеющих параметры, например об.Cell(1,2) \u003d 3 В вызове передаются сначала параметры свойства, последним аргументом - устанавливаемое значение",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УдалитьОбработчик": [
          {
            "name": "RemoveComObjectHandler",
            "internalName": "RemoveComObjectHandler",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 839
            },
            "briefDescription": "Функция УдалитьОбработчик( имя события )",
            "detailedDescription": {
              "text": "Удаляет обработчик события с указанным именем текущего объекта (вызов только в форме об.УдалитьОбработчик)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СтатусОбъекта": [
          {
            "name": "GetComObjectLastResult",
            "internalName": "GetComObjectLastResult",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 931
            },
            "briefDescription": "Функция СтатусОбъекта()",
            "detailedDescription": {
              "text": "возвращает результат последней выполненной команды",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "ComEntity",
      "internalName": "ComFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 958
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Внести": [
          {
            "name": "InsRecord",
            "internalName": "InsRecord",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 217
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" Внести( позиция, установить_признак_модификации, установить_запрет_изменений, устанавливаемый_ROWID ) Вносит запись во внутреннюю выборку, копируя поля из объекта Если позиция \u003c 0, запись вносится в конец выборки, 0 - в начало выборки, иначе - перед элементом с указанным номером. Если pos больше числа элементов в выборке - в конец Если установить_признак_модификации !\u003d 0, устанавливается признак модификации, иначе - сбрасывается Установить_запрет_изменений определяет возможность изменений в строке:\n0 - изменения разрешены1 - изменения запрещены, но может быть получено временное разрешение по F3 (прекращается при завершении редактирования строки)2 - изменения запрещены в принципе Если устанавливаемый_ROWID \u003e\u003d-1, он сохраняется как позиция записи в базе, иначе позиция записи в базе не меняется\nВозвращает логическую позицию вставленной записи или -1 при невозможности вставки",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Удалить": [
          {
            "name": "RemoveRecord",
            "internalName": "RemoveRecord",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 288
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" Удалить( логическая_позиция_удаляемой_записи ) Выполняет удаление записи во внутренней выборке на указанной логической позиции (row_id переносится в массив удаленных записей, если не -1)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УдалитьЗаписи": [
          {
            "name": "Empty",
            "internalName": "Empty",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 408
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта сетка УдалитьЗаписи() Удаляет все записи из выборки и массива удаленных записей, не затрагивая базу",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РазрешитьСтолбцы": [
          {
            "name": "EnableColumns",
            "internalName": "EnableColumns",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 368
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" РазрешитьСтолбцы( имя_поля[,имя поля 2...] ) Разрешает редактирование полей, в которых отображаются указанные имена полей (строка или длинная строка через запятую) Выдает ошибку при указании несуществующих полей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Заменить": [
          {
            "name": "ReplRecord",
            "internalName": "ReplRecord",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 232
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" Заменить( логическая_позиция_заменяемой_записи, установить_признак_модификации, устанавливаемый_ROWID ) Заменяет запись во внутренней выборке на указанной логической позиции на новую, копируя поля из объекта Если установить_признак_модификации !\u003d 0, устанавливается признак модификации, иначе - сбрасывается Если устанавливаемый_ROWID \u003e\u003d-1, он сохраняется как позиция записи в базе, иначе позиция записи в базе не меняется",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПереместитьКурсор": [
          {
            "name": "MoveCursor",
            "internalName": "MoveCursor",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 436
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта сетка ПереместитьКурсор( номер строки, номер столбца ) Перемещает курсор сетки на указанные номера. Если номер \u003d\u003d -1, то данная позиция строки или столбца не меняется",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДопустимыеФункции": [
          {
            "name": "SetOptions",
            "internalName": "SetOptions",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 105
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" ДопустимыеФункции( список_допустимых_функций ) Устанавливает или запрещает возможности DataGrid список_допустимых_функций - строка через запятую, которая может содержать: +вставка - разрешить вставку записей по Insert -вставка - запретить вставку записей по Insert +удаление - разрешить удаление записей по Delete -удаление - запретить удаление записей по Delete +правка - разрешить редактирование ячеек -правка - запретить редактирование ячеек",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДоступКЗаписи": [
          {
            "name": "SetRowEditMode",
            "internalName": "SetRowEditMode",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 400
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта сетка ДоступКЗаписи( номер_записи, режим ) Изменяет права доступа к записи номер_записи, а если передать -1 - ко всем имеющимся записям Если режим\u003d\u003d 2, устанавливается доступ только на чтение с запретом открытия доступа на запись нажатием F3 Если режим\u003d\u003d 1, устанавливается доступ только на чтение (может быть открыт доступ на запись по F3) Если режим\u003d\u003d 0, открывается доступ на запись",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗапретитьСтолбцы": [
          {
            "name": "DisableColumns",
            "internalName": "DisableColumns",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 338
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" ЗапретитьСтолбцы( имена_полей ) Запрещает редактирование полей, в которых отображаются указанные имена полей (строка или длинная строка через запятую) Выдает ошибку при указании несуществующих полей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Завершить": [
          {
            "name": "Commit",
            "internalName": "Commit",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 299
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" Завершить Очищает массив удаленных записей, сбрасывает флаг модификации у всех записей внутренней выборки",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "МодифицированнаяЗапись": [
          {
            "name": "ReadModifiedRecord",
            "internalName": "ReadModifiedRecord",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 165
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" МодифицированнаяЗапись( логическая_позиция ) Читает из выборки DataGrid первую модифицированную запись, у которой логическая позиция \u003e\u003d указанной (можно указывать \u003e\u003d 0) Возвращает логическую позицию записи, следующей за прочитанной, если находит такую запись, поля записи будут в самом объекте Возвращаемое значение \u003e 0 Одновременно в объекте будут установлены переменные row_id и Модифицирована (0 или 1) Возвращает 0, если не удается найти такую запись (в этом случае row_id\u003d-1 Модифицирована\u003d0)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаменитьПоля": [
          {
            "name": "ReplFields",
            "internalName": "ReplFields",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 241
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" ЗаменитьПоля( логическая_позиция_заменяемой_записи, поле, значение [,поле2, значение2...] ) Заменяет указанные поля в записи во внутренней выборке на указанной логической позиции, не изменяя остальные поля и не меняя признак модификации",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Сброс": [
          {
            "name": "Init",
            "internalName": "Init",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 199
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" Сброс() Инициализирует внутреннюю запись",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПозицияКурсора": [
          {
            "name": "CursorPos",
            "internalName": "CursorPos",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 421
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта сетка ПозицияКурсора( возврат_столбца ) Возвращает позицию курсора в сетке. Если возврат_столбца !\u003d 0, то вернет номер столбца, иначе номер строки Считает от 0. Если нет выделения - вернет -1",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЧислоЗаписей": [
          {
            "name": "Count",
            "internalName": "Count",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 131
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" ЧислоЗаписей() Возвращает имеющееся число записей в выборке",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СписокЗначений": [
          {
            "name": "Set_MenuInputList",
            "internalName": "Set_MenuInputList",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 311
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" СписокЗначений( имя_поля, список_значений_для_записи, список_значений_для_выбора_в_меню ) Устанавливает указанные списки значений в элементе для редактирования указанного поля и в коллекции. Список_значений_для_записи определяет перевод числовых значений в текст при отображении строки, список_значений_для_выбора_в_меню - при редактировании поля Поле должно быть перечисляемым, но проверки на это не производится Список значений - строка или длинная строка, значения должен идти друг за другом через разделитель \u0027\n\u0027",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УдаленнаяЗапись": [
          {
            "name": "ReadDeletedRecord",
            "internalName": "ReadDeletedRecord",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 191
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" УдаленнаяЗапись( позиция_в_массиве_удаленных ), Читает из массива удаленных записей row_id удаленной записи из элемента с указанной логической позицией. Нумерация элементов в массиве от 0. Возвращает row_id удаленной записи, если элемент с такой позицией есть Возвращает -1, если элемента с такой позицией нет",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Запись": [
          {
            "name": "ReadRecord",
            "internalName": "ReadRecord",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
              "line": 141
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"Сетка\" Запись( логическая_позиция ) Читает запись из выборки DataGrid по логической позиции, нумерация от 0 Возвращает 1, если запись с такой позицией есть, т.е. извлечена, поля записи будут в самом объекте Одновременно в объекте будут установлены переменные row_id и Модифицирована (0 или 1) Возвращает 0, если записи с такой позицией нет (в этом случае row_id\u003d-1 Модифицирована\u003d0)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "DataGridEntity",
      "internalName": "DataGridObjFuncs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/DataGrid/DataGrid_Muzzle.cpp",
        "line": 455
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ДобГод": [
          {
            "name": "DateTimeObjectAddYear",
            "internalName": "DateTimeObjectAddYear",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3583
            },
            "briefDescription": "Добавить год ДобГод()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобДень": [
          {
            "name": "DateTimeObjectAddDay",
            "internalName": "DateTimeObjectAddDay",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3597
            },
            "briefDescription": "Добавить день ДобДень()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобМесяц": [
          {
            "name": "DateTimeObjectAddMonth",
            "internalName": "DateTimeObjectAddMonth",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3590
            },
            "briefDescription": "Добавить месяц ДобМесяц()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Получить": [
          {
            "name": "DateTimeObjectGet",
            "internalName": "DateTimeObjectGet",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3569
            },
            "briefDescription": "Добавить Получить()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          },
          {
            "name": "DateTimeObjectFormatGet",
            "internalName": "DateTimeObjectFormatGet",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3575
            },
            "briefDescription": "Добавить Получить( формат )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобЧасы": [
          {
            "name": "DateTimeObjectAddHour",
            "internalName": "DateTimeObjectAddHour",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3604
            },
            "briefDescription": "Добавить часы ДобЧасы()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобМинуты": [
          {
            "name": "DateTimeObjectAddMinute",
            "internalName": "DateTimeObjectAddMinute",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3611
            },
            "briefDescription": "Добавить минуты ДобМинуты()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобСекунды": [
          {
            "name": "DateTimeObjectAddSecond",
            "internalName": "DateTimeObjectAddSecond",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3618
            },
            "briefDescription": "Добавить секунды ДобСекунды()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекДатВремя": [
          {
            "name": "DateTimeObjectCurrentDateTime",
            "internalName": "DateTimeObjectCurrentDateTime",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3632
            },
            "briefDescription": "ТекДатВремя()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДобМСекунды": [
          {
            "name": "DateTimeObjectAddMilliseconds",
            "internalName": "DateTimeObjectAddMilliseconds",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 3625
            },
            "briefDescription": "Добавить мсекунды ДобМСекунды()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "DateTimeEntity",
      "internalName": "DateTimeObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 3736
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "НачатьТранзакцию": [
          {
            "name": "StartSessionTransaction",
            "internalName": "StartSessionTransaction",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 1025
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Query": [
          {
            "name": "CreateSessionQuery",
            "internalName": "CreateSessionQuery",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 998
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ФиксироватьТранзакцию": [
          {
            "name": "CommitSessionTransaction",
            "internalName": "CommitSessionTransaction",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 1037
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Command": [
          {
            "name": "CreateSessionCommand",
            "internalName": "CreateSessionCommand",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 1016
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "BufferedReader": [
          {
            "name": "CreateSessionBufferReader",
            "internalName": "CreateSessionBufferReader",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 1007
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Ошибка": [
          {
            "name": "SessionError",
            "internalName": "SessionError",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 1059
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОткатитьТранзакцию": [
          {
            "name": "RollbackSessionTransaction",
            "internalName": "RollbackSessionTransaction",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 1048
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "DbSessionEntity",
      "internalName": "DbSessionObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 1067
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Сброс": [
          {
            "name": "ResetDebtPointer",
            "internalName": "ResetDebtPointer",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 583
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Объект для доступа к долгам для распределения платежа \nМетод Сброс() Обеспечивает извлечение элементов сальдо от начала",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextDebt",
            "internalName": "NextDebt",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 595
            },
            "briefDescription": "Метод Следующий()",
            "detailedDescription": {
              "text": "Извлекает очередной элемент долгов (от позиции указателя) Если таких элементов сальдо больше нет, вернет 0, а в коллекции Позиция \u003d -1 Если есть - возвращает данные долга, в Позиция - число \u003e\u003d0 Смещает указатель в массиве сальдо на элемент, следующий за возвращенным (либо ставит на конец массива, если возвращать нечего)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Исключить": [
          {
            "name": "RemoveDebt",
            "internalName": "RemoveDebt",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 654
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ШагДеления": [
          {
            "name": "SetDivideStep",
            "internalName": "SetDivideStep",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 627
            },
            "briefDescription": "Функция ШагДеления( Строка с набором долгов )",
            "detailedDescription": {
              "text": "Сохраняет очередной шаг деления В строке/длинной строке передаются позиции долгов (полученные из объекта Долг) через точку с запятой",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "DebtItemEntity",
      "internalName": "DebtItemFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/RESTS0.CPP",
        "line": 670
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВыполнитьВыражение": [
          {
            "name": "DebugExecExpression",
            "internalName": "DebugExecExpression",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1945
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Выполняет указанное выражение. Если выполнение успешно, то вернет резултат выполнения, иначе пустую строку.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПерейтиВКорень": [
          {
            "name": "DebugInRoot",
            "internalName": "DebugInRoot",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1952
            },
            "briefDescription": "Переходит в корень отладчика",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьФильтр": [
          {
            "name": "DebugSetFilter",
            "internalName": "DebugSetFilter",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1938
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "DebugBrowserObject \nустанавливает фильтр отображаемых переменных, пустое значение снимает фильтр",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "BrowserEntity",
      "constructors": [],
      "name": "DebugBrowserEntity",
      "internalName": "DebugBrowserObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1961
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Сообщить": [
          {
            "name": "DispSendMessage",
            "internalName": "DispSendMessage",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2860
            },
            "briefDescription": "функция Сообщить( ид_клиента, сообщение )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПерезапуститьПрограмму": [
          {
            "name": "DispRestartSpy",
            "internalName": "DispRestartSpy",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2892
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗапуститьПрограмму": [
          {
            "name": "DispStartSpy",
            "internalName": "DispStartSpy",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2882
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОстановитьПрограмму": [
          {
            "name": "DispStopSpy",
            "internalName": "DispStopSpy",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2887
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Обновить": [
          {
            "name": "DispRefresh",
            "internalName": "DispRefresh",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2848
            },
            "briefDescription": "функция Обновить()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПередатьДанные": [
          {
            "name": "DispSendData",
            "internalName": "DispSendData",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2866
            },
            "briefDescription": "функция ПередатьДанные( ид_клиента, объект_с_данными )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Остановить": [
          {
            "name": "DispStopClient",
            "internalName": "DispStopClient",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2854
            },
            "briefDescription": "функция Остановить( ид_клиента )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Клиенты": {
          "name": "DispGetClients",
          "internalName": "DispGetClients",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2838
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "DispatcherObject \nчтение свойства \"Клиенты\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ПрограммыАвтозапуска": {
          "name": "DispGetSpies",
          "internalName": "DispGetSpies",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2873
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "constructors": [],
      "name": "DispatcherEntity",
      "internalName": "DispatcherObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2901
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "РежимСтрокЮникод": [
          {
            "name": "SetUnicodeDotNet",
            "internalName": "SetUnicodeDotNet",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 1575
            },
            "briefDescription": "Функция РежимСтрокЮникод( режим )",
            "detailedDescription": {
              "text": "режим \u003d 0 - юникод режим выключен режим \u003d 1 - юникод режим включен для получаемых из DotNet-объекта строк режим \u003d 2 - юникод режим включен для передаваемых в DotNet-объект строк режим \u003d 3 - юникод режим включен для получаемых и передаваемых из/в DotNet-объект(а) строк",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекстОшибки": [
          {
            "name": "GetLastExceptionDotNet",
            "internalName": "GetLastExceptionDotNet",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 1557
            },
            "briefDescription": "Функция ТекстОшибки()",
            "detailedDescription": {
              "text": "возвращает описание ошибки, возникшей при выполнении последней выполненной команды",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТихийРежим": [
          {
            "name": "SetQuietModeDotNet",
            "internalName": "SetQuietModeDotNet",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 1564
            },
            "briefDescription": "Функция ТихийРежим( 0 или 1 )",
            "detailedDescription": {
              "text": "устанавливает или снимает тихий режим для объекта",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЕстьОшибка": [
          {
            "name": "IsExceptionDotNet",
            "internalName": "IsExceptionDotNet",
            "sourceLocation": {
              "file": "MuzzleJ/Source/comobj.cpp",
              "line": 1550
            },
            "briefDescription": "Функция ЕстьОшибка()",
            "detailedDescription": {
              "text": "возвращает 1 при наличии ошибки, 0 при отсутствии",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "DotNetEntity",
      "internalName": "DotNetFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/comobj.cpp",
        "line": 1585
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ОтменаРедактирования": [
          {
            "name": "CancelEditEditorsBrows",
            "internalName": "CancelEditEditorsBrows",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1944
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РазрешитьСтроку": [
          {
            "name": "EnableRow",
            "internalName": "EnableRow",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1955
            },
            "briefDescription": "Функция объекта \"РедактируемаяТаблица\" РазрешитьСтроку( номер записи строки )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РазрешитьСтолбцы": [
          {
            "name": "EnableColumns",
            "internalName": "EnableColumns",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1876
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"РедактируемаяТаблица\" РазрешитьСтолбцы( имена_полей ) Разрешает редактирование полей, в которых отображаются указанные имена полей (строка или длинная строка через запятую) Выдает ошибку при указании несуществующих полей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПереместитьКурсор": [
          {
            "name": "MoveCursor",
            "internalName": "MoveCursor",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1784
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"РедактируемаяТаблица\" ПереместитьКурсор( номер строки, номер столбца ) Перемещает курсор EditorsBrows на указанные номера. Если номер \u003d\u003d -1, то данная позиция строки или столбца не меняется",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаполнитьВыпадающийСписок": [
          {
            "name": "FillComboBoxEB",
            "internalName": "FillComboBoxEB",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1909
            },
            "briefDescription": "Функция ЗаполнитьВыпадающийСписок( Имя_Поля, Массив_Значений, Массив_Ключей )",
            "detailedDescription": {
              "text": "Принимаются текстовые и числовые значения массив ключей, должен быть той же длины, что и массив значений и содержать в себе не повторяющиеся цифровые значения, которые будут сопоставлены значениям (подробнее - функция ЗначениеВыпадающегоСписка(...) )",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДопустимыеФункции": [
          {
            "name": "SetOptions",
            "internalName": "SetOptions",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1744
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"РедактируемаяТаблица\" ДопустимыеФункции( список_допустимых_функций ) Устанавливает или запрещает возможности EditorsBrows список_допустимых_функций - строка через запятую, которая может содержать: +вставка - разрешить вставку записей по Insert -вставка - запретить вставку записей по Insert +удаление - разрешить удаление записей по Delete -удаление - запретить удаление записей по Delete",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗапретитьСтолбцы": [
          {
            "name": "DisableColumns",
            "internalName": "DisableColumns",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1846
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"РедактируемаяТаблица\" ЗапретитьСтолбцы( имена_полей ) Запрещает редактирование полей, в которых отображаются указанные имена полей (строка или длинная строка через запятую) Выдает ошибку при указании несуществующих полей",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗначениеВыпадающегоСписка": [
          {
            "name": "GetComboBoxSelectedItemEB",
            "internalName": "GetComboBoxSelectedItemEB",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1936
            },
            "briefDescription": "Функция ЗначениеВыпадающегоСписка( Имя_ВыпСписка )",
            "detailedDescription": {
              "text": "Возвращает значение ключа выбранного элемента списка Если массив ключей не был задан или не выбрано значение, то вернет -1Массивы значений и ключей устанавливаются: для ComboBox функцией ЗаполнитьВыпадающийСписок( Имя_ВыпСписка, Массив_Значений, Массив_Ключей)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗапретитьСтроку": [
          {
            "name": "DisableRow",
            "internalName": "DisableRow",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1962
            },
            "briefDescription": "Функция объекта \"РедактируемаяТаблица\" ЗапретитьСтроку( номер записи строки )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СписокЗначений": [
          {
            "name": "Set_MenuInputList",
            "internalName": "Set_MenuInputList",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1819
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"РедактируемаяТаблица\" СписокЗначений( имя_поля, список_значений_для_записи, список_значений_для_выбора_в_меню ) Устанавливает указанные списки значений в элементе для редактирования указанного поля. Список_значений_для_записи определяет перевод числовых значений в текст при отображении строки, список_значений_для_выбора_в_меню - при редактировании поля Поле должно быть перечисляемым, но проверки на это не производится Список значений - строка или длинная строка, значения должен идти друг за другом через разделитель \u0027\n\u0027",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СохранитьРедактируемуюЗапись": [
          {
            "name": "SaveEditingRec",
            "internalName": "SaveEditingRec",
            "sourceLocation": {
              "file": "MuzzleJ/Source/EditorsBrows.cpp",
              "line": 1766
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция объекта \"РедактируемаяТаблица\" СохранитьРедактируемуюЗапись() Сохраняет текущую редактируемую запись EditorsBrows При невозможности завершить редактирование ячейки возвращает -1;",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "EditorBrowsEntity",
      "internalName": "EditorsBrowsObjFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/EditorsBrows.cpp",
        "line": 1794
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "КлючевыеСлова": [
          {
            "name": "EditorSetKeywords",
            "internalName": "EditorSetKeywords",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1546
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "EditorObject \nпередача данных для хайлайтера",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "EditorEntity",
      "internalName": "EditorObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1555
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "РаскрытаГруппа": [
          {
            "name": "IsOpenItem",
            "internalName": "IsOpenItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/ExpandBar.cpp",
              "line": 436
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РазвернутьИтем": [
          {
            "name": "ExpandedItem",
            "internalName": "ExpandedItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/ExpandBar.cpp",
              "line": 424
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СвернутьИтем": [
          {
            "name": "CollapsedItem",
            "internalName": "CollapsedItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/ExpandBar.cpp",
              "line": 430
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СвернутьПанель": [
          {
            "name": "CollapsedItem",
            "internalName": "CollapsedItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/ExpandBar.cpp",
              "line": 430
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РазвернутьПанель": [
          {
            "name": "ExpandedItem",
            "internalName": "ExpandedItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/ExpandBar.cpp",
              "line": 424
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "ExpandBar2Entity",
      "internalName": "ExpandBarObjFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/ExpandBar.cpp",
        "line": 447
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ДобавитьДиалог": [
          {
            "name": "AddDialogInExpandBar",
            "internalName": "AddDialogInExpandBar",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2351
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "добавление диалога в ExpandBar ДобавитьДиалог( id, узелДерева, имяДиалога, имяДиалогаПоУмолчанию )",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СкрытьВсеДиалоги": [
          {
            "name": "HideAllDialogsInExpandBar",
            "internalName": "HideAllDialogsInExpandBar",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2367
            },
            "briefDescription": "скрыть все диалоги",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "РаскрытыйЭлемент": {
          "name": "GetExpandBarExpandItem",
          "internalName": "GetExpandBarExpandItem",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2343
          },
          "briefDescription": "чтение свойства \"РаскрытыйЭлемент\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "PanelEntity",
      "constructors": [],
      "name": "ExpandBarEntity",
      "internalName": "ExpandBarObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2376
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Очистить": [
          {
            "name": "ResetExpression",
            "internalName": "ResetExpression",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 2076
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Очищает результат и текст ошибки\n*\n* @Функция Очистить()@\n*\n* @return 1\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПроброситьОшибку": [
          {
            "name": "Rethrow",
            "internalName": "Rethrow",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 2091
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Пробрасывает ошибку, если она было\n*\n* @Функция ПроброситьОшибку()@\n*\n* @return 1\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "Выполнить": [
          {
            "name": "ExecuteExpression",
            "internalName": "ExecuteExpression",
            "sourceLocation": {
              "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
              "line": 2062
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Запускает выражение\n*\n* @Функция Выполнить()@\n*\n* @return 1, если выполнение закончилось без ошибок, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "текст": {
          "name": "GetExpressionText",
          "internalName": "GetExpressionText",
          "sourceLocation": {
            "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
            "line": 2163
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить и установить текст выражения\n*\n* @Свойство текст@\n*\n* @return текст выражения\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "результат": {
          "name": "GetExpressionResult",
          "internalName": "GetExpressionResult",
          "sourceLocation": {
            "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
            "line": 2106
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить результат выполнения выражения\n*\n* @Свойство результат@\n*\n* @return результат выполнения выражения\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "ошибка": {
          "name": "GetExpressionError",
          "internalName": "GetExpressionError",
          "sourceLocation": {
            "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
            "line": 2120
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить ошибку выполнения выражения\n*\n* @Свойство ошибка@\n*\n* @return ошибка\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "текстОшибки": {
          "name": "GetExpressionErrorText",
          "internalName": "GetExpressionErrorText",
          "sourceLocation": {
            "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
            "line": 2135
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить текст ошибки выполнения выражения\n*\n* @Свойство текстОшибки@\n*\n* @return текст ошибки выполнения выражения\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "вызванаОшибка": {
          "name": "GetExpressionAbortCalled",
          "internalName": "GetExpressionAbortCalled",
          "sourceLocation": {
            "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
            "line": 2149
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить, привело ли к ошибке вызов функции Ошибка\n*\n* @Свойство вызванаОшибка@\n*\n* @return 1, если ошибке привел вызов функции Ошибка, и 0 иначе\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "текст": {
          "name": "SetExpressionText",
          "internalName": "SetExpressionText",
          "sourceLocation": {
            "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
            "line": 2168
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "constructors": [],
      "name": "ExpressionEntity",
      "internalName": "ExpressionObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/Funcs/VARFUNCS.CPP",
        "line": 2177
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Позиция": [
          {
            "name": "FileObjectSetPosition",
            "internalName": "FileObjectSetPosition",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1666
            },
            "briefDescription": "Смещает позицию указателя в файле.",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Закрыть": [
          {
            "name": "FileObjectClose",
            "internalName": "FileObjectClose",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1572
            },
            "briefDescription": "Закрыть файл",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьСтроку": [
          {
            "name": "FileObjectWriteLn",
            "internalName": "FileObjectWriteLn",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1598
            },
            "briefDescription": "Записать data в файл и добавить в конце \\r\\n.",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПрочитатьТекст": [
          {
            "name": "FileObjectReadText",
            "internalName": "FileObjectReadText",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1642
            },
            "briefDescription": "Прочитать count_bytes из файла в текстовом режиме",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Создать": [
          {
            "name": "FileObjectCreate",
            "internalName": "FileObjectCreate",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1566
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "FileObject methods \nСоздать или открыть файл с соответствие с режимом mode",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РазмерБуфераЗаписи": [
          {
            "name": "FileObjectWriteBufSize",
            "internalName": "FileObjectWriteBufSize",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1630
            },
            "briefDescription": "Установить размер буфера данных",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Копировать": [
          {
            "name": "FileObjectCopy",
            "internalName": "FileObjectCopy",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1678
            },
            "briefDescription": "Копирует в новый файл",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПоследняяОшибка": [
          {
            "name": "FileObjectGetLastError",
            "internalName": "FileObjectGetLastError",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1654
            },
            "briefDescription": "Возвращает ошибку, возникшую при выполнении последнего действия",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Прочитать": [
          {
            "name": "FileObjectRead",
            "internalName": "FileObjectRead",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1636
            },
            "briefDescription": "Прочитать count_bytes из файла",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьТекстВБуфер": [
          {
            "name": "FileObjectWriteTextBuf",
            "internalName": "FileObjectWriteTextBuf",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1618
            },
            "briefDescription": "Записать текст в буфер. Данные будут записаны в файл при переполнении буфера",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗавершитьЗапись": [
          {
            "name": "FileObjectFlush",
            "internalName": "FileObjectFlush",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1660
            },
            "briefDescription": "Принудительно записывает буфер данных в файл",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьСтрокуВБуфер": [
          {
            "name": "FileObjectWriteLnBuf",
            "internalName": "FileObjectWriteLnBuf",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1624
            },
            "briefDescription": "Записать строку в буфер и добавить в конце \\r\\n. Данные будут записаны в файл при переполнении буфера",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Записать": [
          {
            "name": "FileObjectWrite",
            "internalName": "FileObjectWrite",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1578
            },
            "briefDescription": "Записать data в файл",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Размер": [
          {
            "name": "FileObjectSize",
            "internalName": "FileObjectSize",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1672
            },
            "briefDescription": "Возвпащает размер файла.",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьТекст": [
          {
            "name": "FileObjectWriteText",
            "internalName": "FileObjectWriteText",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1592
            },
            "briefDescription": "Записать data в файл",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПрочитатьСтроку": [
          {
            "name": "FileObjectReadLn",
            "internalName": "FileObjectReadLn",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1648
            },
            "briefDescription": "Прочитать из файла строку, заканчивающуюся на \n.",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьВБуфер": [
          {
            "name": "FileObjectWriteBuf",
            "internalName": "FileObjectWriteBuf",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1604
            },
            "briefDescription": "Записать data в буфер. Данные будут записаны в файл при переполнении буфера",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "FileEntity",
      "internalName": "FileObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1686
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Источник": [
          {
            "name": "FRWrapperCreateFormat",
            "internalName": "FRWrapperCreateFormat",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2791
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод Источник( имя, описание ) Создает источник данных с указанным форматом Описание источника может содержать произвольное сочетание\nимен существующих объектов (в этом случае в источник включаются все элементы объектов, в т.ч. поля записей, причем поля связи вносятся как целые числа, вложенные объекты игнорируются, в качестве имен полей источника используются имена переменных или полей записи, вложенные подобъекты игнорируются)имен существующих переменных (в качестве имени поля источника используется имя переменной)строковых констант, не содержащих запятых, после которых идет существующая переменная или вторая константа, в этом случае в качестве имени поля в источнике используется содержимое первой константы (строковой), а тип берется из переменной (на объекты не распространяется) или второй константыстроковых констант, содержимое которых имеет вид \"имя1,тип1,имя2,тип2,...\" , допустимые типы A - строка переменной длины (до 255 симоволов), An - текст фиксированной длины (не более 255 симоволов), M - строка без ограничения длины, S - целое, I - большое целое, N - вещественное, Nn - вещественное, с определенным количеством символов после запятой D - дата, $ - деньги Данные в источник не передаются",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Добавить": [
          {
            "name": "AddData",
            "internalName": "AddData",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2811
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Добавить( имя источника данных, данные ) Добавляет в источник данных новую запись. Поля записи заполняются переданными данными. Передаваться могут:\nобъекты (заполнение производится из переменных и полей записи объекта) - переносятся данные в одноименные с полями записи и переменными объекта поля источника данныхимена переменных - заполняются поля источника данных, одноименные с переменнымистроковые константы, за которыми стоят имена переменных или константы - заполняются поля источника данных, имя которых определяется строковой константой, значение - содержимым переменной или второй константы Если для некоторых полей источника данных не будет передано значений, эти поля инициализируются. Если будут переданы значения для несуществующих полей источника данных, эти значения будут проигнорированы",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "FRDataSetContainerEntity",
      "internalName": "FRDataSetContainerFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/FRWrapper.cpp",
        "line": 1619
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Источник": [
          {
            "name": "FRWrapperCreateFormat",
            "internalName": "FRWrapperCreateFormat",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2791
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод Источник( имя, описание ) Создает источник данных с указанным форматом Описание источника может содержать произвольное сочетание\nимен существующих объектов (в этом случае в источник включаются все элементы объектов, в т.ч. поля записей, причем поля связи вносятся как целые числа, вложенные объекты игнорируются, в качестве имен полей источника используются имена переменных или полей записи, вложенные подобъекты игнорируются)имен существующих переменных (в качестве имени поля источника используется имя переменной)строковых констант, не содержащих запятых, после которых идет существующая переменная или вторая константа, в этом случае в качестве имени поля в источнике используется содержимое первой константы (строковой), а тип берется из переменной (на объекты не распространяется) или второй константыстроковых констант, содержимое которых имеет вид \"имя1,тип1,имя2,тип2,...\" , допустимые типы A - строка переменной длины (до 255 симоволов), An - текст фиксированной длины (не более 255 симоволов), M - строка без ограничения длины, S - целое, I - большое целое, N - вещественное, Nn - вещественное, с определенным количеством символов после запятой D - дата, $ - деньги Данные в источник не передаются",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "НачалоЭкспорта": [
          {
            "name": "BirtFRStartExport",
            "internalName": "BirtFRStartExport",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2928
            },
            "briefDescription": "Метод НачалоЭкспорта( имя_файла )",
            "detailedDescription": {
              "text": "создает на сервере файл с именем имя_файла и начинает экспорт данных в виде xml",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Отчет": [
          {
            "name": "RunFR",
            "internalName": "RunFR",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2906
            },
            "briefDescription": "Метод Отчет()",
            "detailedDescription": {
              "text": "Запускает ранее указанный (через Имя(...)) отчет на выполнение",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Имя": [
          {
            "name": "SetTemplateName",
            "internalName": "SetTemplateName",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2760
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Методы, поддерживаемые объектом отчета \nМетод Имя( имя_шаблона ) Устанавливает имя файла, служащего шаблоном для построения отчета (нужно указывать полный путь)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Данные": [
          {
            "name": "SetSingleData",
            "internalName": "SetSingleData",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2830
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод Данные( имя источника, поля ) Создает источник данных с указанным именем и сразу вносит одну запись Формат определяется переданным набором полей. Могут передаваться\nотдельные переменные (поле получает имя этой переменной и значение из нее),объекты (вставляется набор полей - по одному на каждое поле в записи объекта (имя и значение берутся у поля) и по одному на каждую переменную (имена и значения берутся у переменных), для вложенных подобъектов создается строковая переменная с именем этого подобъекта, для полей связи создаются целочисленные полястроковые константы, за которыми идет константа или переменная имя поля берется из константы, значение - из второй константы или переменной (если это будет объект, создастся строка) Все переменные должны существовать.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСвойство": [
          {
            "name": "SetPropertyOffice",
            "internalName": "SetPropertyOffice",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2920
            },
            "briefDescription": "Метод УстановитьСвойство",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выборка": [
          {
            "name": "SetSelectData",
            "internalName": "SetSelectData",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2887
            },
            "briefDescription": "Метод Выборка( имя источника данных, объект с выборкой )",
            "detailedDescription": {
              "text": "Устанавливает указанному источнику в качестве источника данных выборку, полученную ранее через вызов Query или BufferedReader",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КонецЭкспорта": [
          {
            "name": "BirtFREndExport",
            "internalName": "BirtFREndExport",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2935
            },
            "briefDescription": "Метод КонецЭкспорта()",
            "detailedDescription": {
              "text": "завершает экспорт данных в файл, начатый вызовом метода НачалоЭкспорта",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Дизайнер": [
          {
            "name": "DesignFR",
            "internalName": "DesignFR",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2914
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод Дизайнер Запускает редактор ранее указанного (через Имя(...)) бланка отчета",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Добавить": [
          {
            "name": "AddData",
            "internalName": "AddData",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2811
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Добавить( имя источника данных, данные ) Добавляет в источник данных новую запись. Поля записи заполняются переданными данными. Передаваться могут:\nобъекты (заполнение производится из переменных и полей записи объекта) - переносятся данные в одноименные с полями записи и переменными объекта поля источника данныхимена переменных - заполняются поля источника данных, одноименные с переменнымистроковые константы, за которыми стоят имена переменных или константы - заполняются поля источника данных, имя которых определяется строковой константой, значение - содержимым переменной или второй константы Если для некоторых полей источника данных не будет передано значений, эти поля инициализируются. Если будут переданы значения для несуществующих полей источника данных, эти значения будут проигнорированы",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Каталог": [
          {
            "name": "BirtTempFolder",
            "internalName": "BirtTempFolder",
            "sourceLocation": {
              "file": "MuzzleJ/Source/FRWrapper.cpp",
              "line": 2943
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "FRWrapperEntity",
      "internalName": "FRWrapperFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/FRWrapper.cpp",
        "line": 2954
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "GO_Reset",
            "internalName": "GO_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hcharges_group.cpp",
              "line": 195
            },
            "briefDescription": "Функция ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СбросЗаписей": [
          {
            "name": "GO_ResetRecord",
            "internalName": "GO_ResetRecord",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hcharges_group.cpp",
              "line": 209
            },
            "briefDescription": "Функция СбросЗаписей()",
            "detailedDescription": {
              "text": "- подготовка к чтению отдельных извлеченных записей, имеющих текущее значение у поля группировки",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "GO_Next",
            "internalName": "GO_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hcharges_group.cpp",
              "line": 202
            },
            "briefDescription": "Функция Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Поле": [
          {
            "name": "GO_Field",
            "internalName": "GO_Field",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hcharges_group.cpp",
              "line": 225
            },
            "briefDescription": "Функция Поле(имя)",
            "detailedDescription": {
              "text": "Читает значение из любого поля в извлеченной записи (обязательно использовать для чтения поля, одноименного с подчиненной записью, остальные поля доступны и просто по имени)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СледующаяЗапись": [
          {
            "name": "GO_NextRecord",
            "internalName": "GO_NextRecord",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hcharges_group.cpp",
              "line": 216
            },
            "briefDescription": "Функция СледующаяЗапись()",
            "detailedDescription": {
              "text": "Извлечение очередной записи, перенос данных в запись объекта, переход к следующей записи",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "GroupEntity",
      "internalName": "GroupObjectFunctions",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hcharges_group.cpp",
        "line": 252
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Количество": {
          "name": "GroupItemCount",
          "internalName": "GroupItemCount",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2154
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "чтение свойства \"Количество\" возвращает количество элементов в группе",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Элементы": {
          "name": "GroupItems",
          "internalName": "GroupItems",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2139
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "GroupObject \nчтение свойства \"Элементы\" заполняет список элементами группы",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Элемент": {
          "name": "GroupItemByIndex",
          "internalName": "GroupItemByIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2146
          },
          "briefDescription": "чтение свойства \"Элемент\" по индексу",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "GroupViewEntity",
      "internalName": "GroupViewObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2163
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Поставщик": [
          {
            "name": "ProviderByServiceNumber",
            "internalName": "ProviderByServiceNumber",
            "sourceLocation": {
              "file": "KvplataCalc/source/hServices.cpp",
              "line": 230
            },
            "briefDescription": "Функция Итератор.Поставщики.Поставщик( номер_услуги )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "HierarchicalProvidersEntity",
      "internalName": "HierarchicalProvidersFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/hServices.cpp",
        "line": 58
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "InBegin",
            "internalName": "InBegin",
            "sourceLocation": {
              "file": "KvplataCalc/source/hServices.cpp",
              "line": 163
            },
            "briefDescription": "Функция Итератор.Услуги.ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextItem",
            "internalName": "NextItem",
            "sourceLocation": {
              "file": "KvplataCalc/source/hServices.cpp",
              "line": 169
            },
            "briefDescription": "Функция Итератор.Услуги.Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущийЭлемент": [
          {
            "name": "CurrentItem",
            "internalName": "CurrentItem",
            "sourceLocation": {
              "file": "KvplataCalc/source/hServices.cpp",
              "line": 175
            },
            "briefDescription": "Функция Итератор.Услуги.ТекущийЭлемент()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "HierarchicalServicesEntity",
      "internalName": "HierarchicalServicesFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/hServices.cpp",
        "line": 44
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВыполнитьСкрипт": [
          {
            "name": "ExecuteScript",
            "internalName": "ExecuteScript",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3062
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьАдрес": [
          {
            "name": "SetURL",
            "internalName": "SetURL",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3057
            },
            "briefDescription": "устанавливает URL адрес браузеру",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "HtmlBrowserEntity",
      "internalName": "HtmlBrowserObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3071
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВставитьHTML": [
          {
            "name": "InsertHTML",
            "internalName": "InsertHTML",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3093
            },
            "briefDescription": "вставляет html-фрагмент в редактор",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "HtmlEditorEntity",
      "internalName": "HtmlEditorObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3102
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Очистить": [
          {
            "name": "ImageViewClear",
            "internalName": "ImageViewClear",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3130
            },
            "briefDescription": "Очистить изображение",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Трансформировать": [
          {
            "name": "ImageViewTransform",
            "internalName": "ImageViewTransform",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3124
            },
            "briefDescription": "Трансформировать изображение",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Показать": [
          {
            "name": "ImageViewShow",
            "internalName": "ImageViewShow",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3118
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "ImageViewObject \nПоказать изображение",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ImageViewEntity",
      "internalName": "ImageViewObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3139
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ПрочитатьЧисло": [
          {
            "name": "IniFileObjectReadDouble",
            "internalName": "IniFileObjectReadDouble",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1845
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьСтроку": [
          {
            "name": "IniFileObjectWriteString",
            "internalName": "IniFileObjectWriteString",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1817
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Присваивает значение указанному ключу. Если секйия и/или ключ отсутствуют, то они будут созданы.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Сохранить": [
          {
            "name": "IniFileObjectFlush",
            "internalName": "IniFileObjectFlush",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1803
            },
            "briefDescription": "Скидывает все изменения на диск.",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПрочитатьЦелое": [
          {
            "name": "IniFileObjectReadLong",
            "internalName": "IniFileObjectReadLong",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1840
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьЧисло": [
          {
            "name": "IniFileObjectWriteDouble",
            "internalName": "IniFileObjectWriteDouble",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1827
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Модифицирован": [
          {
            "name": "IniFileObjectIsModify",
            "internalName": "IniFileObjectIsModify",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1852
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Возвращает были ли модифицированы данные после последнего чтения или записи",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьЦелое": [
          {
            "name": "IniFileObjectWriteLong",
            "internalName": "IniFileObjectWriteLong",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1822
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Переименовать": [
          {
            "name": "IniFileObjectRename",
            "internalName": "IniFileObjectRename",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1810
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Меняет имя INI файла и, при необходимости, считывает его содержимое",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЕстьСекция": [
          {
            "name": "IniFileObjectSectionExists",
            "internalName": "IniFileObjectSectionExists",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1752
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "IniFileObject methods \nВозвращает существует ли указанная секция",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УдалитьКлюч": [
          {
            "name": "IniFileObjectDeleteKey",
            "internalName": "IniFileObjectDeleteKey",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1797
            },
            "briefDescription": "Удаляет указанный ключ",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЕстьЗначение": [
          {
            "name": "IniFileObjectValueExists",
            "internalName": "IniFileObjectValueExists",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1758
            },
            "briefDescription": "Возвращает существует ли значение у указанного ключа",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Очистить": [
          {
            "name": "IniFileObjectClear",
            "internalName": "IniFileObjectClear",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1785
            },
            "briefDescription": "Очищает и удаляет все секции",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Секции": [
          {
            "name": "IniFileObjectReadSections",
            "internalName": "IniFileObjectReadSections",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1764
            },
            "briefDescription": "Читает список секций в файле",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Ключи": [
          {
            "name": "IniFileObjectReadSection",
            "internalName": "IniFileObjectReadSection",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1771
            },
            "briefDescription": "Возвращает список ключей в секции",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УдалитьСекцию": [
          {
            "name": "IniFileObjectEraseSection",
            "internalName": "IniFileObjectEraseSection",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1791
            },
            "briefDescription": "Удаляет указанную секцию",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПрочитатьСтроку": [
          {
            "name": "IniFileObjectReadString",
            "internalName": "IniFileObjectReadString",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1835
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Читает значение ключа указанной секции. Если указанный ключ не будет найден, либо значение невозможно преобразовать в нужный тип, то будет возвращено значение по умолчанию.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Значения": [
          {
            "name": "IniFileObjectReadSectionValues",
            "internalName": "IniFileObjectReadSectionValues",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
              "line": 1778
            },
            "briefDescription": "Возвращает список элементов секции",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "IniFileEntity",
      "internalName": "IniFileObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/func_file.cpp",
        "line": 1860
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Загрузить": [
          {
            "name": "JsLoad",
            "internalName": "JsLoad",
            "sourceLocation": {
              "file": "MuzzleJ/Source/JSObject.cpp",
              "line": 14
            },
            "briefDescription": "Функция JsObject.Загрузить( имя_модуля )",
            "detailedDescription": {
              "text": "Загружает в память все модули скрипта имя_модуля*.js Загрузка происходит из всех каталогов PRG",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РежимСтрокЮникод": [
          {
            "name": "JsSetUnicode",
            "internalName": "JsSetUnicode",
            "sourceLocation": {
              "file": "MuzzleJ/Source/JSObject.cpp",
              "line": 66
            },
            "briefDescription": "Функция РежимСтрокЮникод( режим )",
            "detailedDescription": {
              "text": "режим \u003d 0 - юникод режим выключен режим \u003d 1 - юникод режим включен для получаемых из DotNet-объекта строк режим \u003d 2 - юникод режим включен для передаваемых в DotNet-объект строк режим \u003d 3 - юникод режим включен для получаемых и передаваемых из/в DotNet-объект(а) строк",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекстОшибки": [
          {
            "name": "JsErrorText",
            "internalName": "JsErrorText",
            "sourceLocation": {
              "file": "MuzzleJ/Source/JSObject.cpp",
              "line": 56
            },
            "briefDescription": "Функция JsObject.ТекстОшибки()",
            "detailedDescription": {
              "text": "Возвращает текст ошибки. Если ошибки нет - вернет пустую строку",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьДанные": [
          {
            "name": "JsWrite",
            "internalName": "JsWrite",
            "sourceLocation": {
              "file": "MuzzleJ/Source/JSObject.cpp",
              "line": 42
            },
            "briefDescription": "Функция JsObject.ЗаписатьДанные( данные1[, данные2][, данные3]... )",
            "detailedDescription": {
              "text": "Записывает в скрипт данные",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЕстьОшибка": [
          {
            "name": "JsIsError",
            "internalName": "JsIsError",
            "sourceLocation": {
              "file": "MuzzleJ/Source/JSObject.cpp",
              "line": 49
            },
            "briefDescription": "Функция JsObject.ЕстьОшибка()",
            "detailedDescription": {
              "text": "Возвращает 0 - если нет ошибки; \u003e 0 - есть ошибка.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выполнить": [
          {
            "name": "JsExec",
            "internalName": "JsExec",
            "sourceLocation": {
              "file": "MuzzleJ/Source/JSObject.cpp",
              "line": 24
            },
            "briefDescription": "Функция JsObject.Выполнить( имя_функции или исполняемый_код[, имя_функции_события] )",
            "detailedDescription": {
              "text": "Выполняет указанную функцию или фрагмент кода. Если не указана функция_событие, то возврат происходит после выполнения скрипта, иначе возврат происходит сразу, а после окончания выполнения скрипта вызывается функция_событие, куда передается результат выполнения скрипта",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "JsFuncsEntity",
      "internalName": "JsFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/JSObject.cpp",
        "line": 75
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Картинка": {
          "name": "GetObjLabelImage",
          "internalName": "GetObjLabelImage",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 609
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "LabelExObject \nчтение свойства \"Картинка\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Картинка": {
          "name": "SetObjLabelImage",
          "internalName": "SetObjLabelImage",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 615
          },
          "briefDescription": "установка свойства \"Картинка\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "LabelEntity",
      "internalName": "LabelObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 624
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "Lgotniki_Reset",
            "internalName": "Lgotniki_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hLgotniki.cpp",
              "line": 321
            },
            "briefDescription": "\"ВНачало\"",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "Lgotniki_Next",
            "internalName": "Lgotniki_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hLgotniki.cpp",
              "line": 328
            },
            "briefDescription": "\"Следующий\"",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "LgotnikiEntity",
      "internalName": "LgotnikiObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hLgotniki.cpp",
        "line": 336
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Предыдущий": [
          {
            "name": "PrevItem",
            "internalName": "PrevItem",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hLgotniki.cpp",
              "line": 135
            },
            "briefDescription": "Функция Предыдущий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "LgotnikiPassportEntity",
      "internalName": "LgotnikiPassportFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hLgotniki.cpp",
        "line": 143
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "УстановитьКартинку": [
          {
            "name": "ListBoxSetImage",
            "internalName": "ListBoxSetImage",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1327
            },
            "briefDescription": "установка картинки для элемента",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Удалить": [
          {
            "name": "ListBoxDelete",
            "internalName": "ListBoxDelete",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1321
            },
            "briefDescription": "Удалить строку по индексу",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Очистить": [
          {
            "name": "ListBoxClear",
            "internalName": "ListBoxClear",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1297
            },
            "briefDescription": "Очистить список строк",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Заменить": [
          {
            "name": "ListBoxReplace",
            "internalName": "ListBoxReplace",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1315
            },
            "briefDescription": "Заменить строку в указанную позицию",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Вставить": [
          {
            "name": "ListBoxInsert",
            "internalName": "ListBoxInsert",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1309
            },
            "briefDescription": "Вставить строку в указанную позицию",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СнятьПометки": [
          {
            "name": "ListBoxClearChecked",
            "internalName": "ListBoxClearChecked",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1154
            },
            "briefDescription": "снять свойство \"Помечен\" для всех элементов",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ИндексПоИмени": [
          {
            "name": "GetObjListBoxIndexByName",
            "internalName": "GetObjListBoxIndexByName",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1284
            },
            "briefDescription": "индекс элемента по имени",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Добавить": [
          {
            "name": "ListBoxAdd",
            "internalName": "ListBoxAdd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1303
            },
            "briefDescription": "Добавить строку",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УбратьВсеКартинки": [
          {
            "name": "ListBoxResetAllImage",
            "internalName": "ListBoxResetAllImage",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1333
            },
            "briefDescription": "убрать все картинки",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПометитьВсе": [
          {
            "name": "ListBoxCheckedAll",
            "internalName": "ListBoxCheckedAll",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 1148
            },
            "briefDescription": "установить свойство \"Помечен\" для всех элементов",
            "detailedDescription": {
              "text": "ListBoxObject",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Количество": {
          "name": "GetObjListBoxItemCount",
          "internalName": "GetObjListBoxItemCount",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1291
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "чтение свойства \"Количество\" возвращает количество элементов в группе",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Данные": {
          "name": "GetObjListBoxData",
          "internalName": "GetObjListBoxData",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1244
          },
          "briefDescription": "чтение свойства \"Данные\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Помечен": {
          "name": "GetObjListBoxChecked",
          "internalName": "GetObjListBoxChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1251
          },
          "briefDescription": "чтение свойства \"Помечен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Элементы": {
          "name": "GetObjListBoxItems",
          "internalName": "GetObjListBoxItems",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1266
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "чтение свойства \"Элементы\" заполняет список элементами группы",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ИндексЭлемента": {
          "name": "GetObjListBoxItemIndex",
          "internalName": "GetObjListBoxItemIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1273
          },
          "briefDescription": "Индекс выделенного элемента",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Элемент": {
          "name": "GetObjListBoxItemByIndex",
          "internalName": "GetObjListBoxItemByIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1258
          },
          "briefDescription": "чтение свойства \"Элемент\" по индексу",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "ИндексЭлемента": {
          "name": "SetObjListBoxItemIndex",
          "internalName": "SetObjListBoxItemIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1278
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ListBoxEntity",
      "internalName": "ListBoxObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1342
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "DOC_Reset",
            "internalName": "DOC_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hCardReg.cpp",
              "line": 54
            },
            "briefDescription": "Функция ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущийЭлемент": [
          {
            "name": "DOC_CurrentItem",
            "internalName": "DOC_CurrentItem",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hCardReg.cpp",
              "line": 67
            },
            "briefDescription": "Функция ТекущийЭлемент()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Предыдущий": [
          {
            "name": "DOC_Next",
            "internalName": "DOC_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hCardReg.cpp",
              "line": 61
            },
            "briefDescription": "Функция Предыдущий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "ManDocumentEntity",
      "internalName": "DOC_Funcs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hCardReg.cpp",
        "line": 75
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Прочитать": [
          {
            "name": "ReadItem",
            "internalName": "ReadItem",
            "sourceLocation": {
              "file": "Kvplata/source/func_lsinfo.cpp",
              "line": 82
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "NacEntity",
      "internalName": "NacObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/func_lsinfo.cpp",
        "line": 135
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ЕстьСоединение": [
          {
            "name": "OutDbIsConnected",
            "internalName": "OutDbIsConnected",
            "sourceLocation": {
              "file": "Kvplata/source/FUNC_SQL.CPP",
              "line": 1737
            },
            "briefDescription": "Функция ЕстьСоединение()",
            "detailedDescription": {
              "text": "Возвращает 1, если соединение есть, иначе 0 (была ошибка при открытии)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Query": [
          {
            "name": "OutDbCreateSessionQuery",
            "internalName": "OutDbCreateSessionQuery",
            "sourceLocation": {
              "file": "Kvplata/source/FUNC_SQL.CPP",
              "line": 1744
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция BufferedReader/Query Для выполнения запросов",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "BufferedReader": [
          {
            "name": "OutDbCreateSessionQuery",
            "internalName": "OutDbCreateSessionQuery",
            "sourceLocation": {
              "file": "Kvplata/source/FUNC_SQL.CPP",
              "line": 1744
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция BufferedReader/Query Для выполнения запросов",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "OutDbSessionEntity",
      "internalName": "OutDbSessionObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1760
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Раскрыть": [
          {
            "name": "PanelExpand",
            "internalName": "PanelExpand",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2254
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "PanelObject \nфункция Раскрыть() раскрывает панель при наличии такой возможности",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Свернуть": [
          {
            "name": "PanelCollapse",
            "internalName": "PanelCollapse",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2267
            },
            "briefDescription": "функция Свернуть()",
            "detailedDescription": {
              "text": "сворачивает панель при наличии такой возможности",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Раскрытый": {
          "name": "PanelExpanded",
          "internalName": "PanelExpanded",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2260
          },
          "briefDescription": "чтение свойства \"Раскрытый\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "GroupViewEntity",
      "constructors": [],
      "name": "PanelEntity",
      "internalName": "PanelObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2277
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "InBegin",
            "internalName": "InBegin",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hPrivileges.cpp",
              "line": 55
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "prg-функции",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextItem",
            "internalName": "NextItem",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hPrivileges.cpp",
              "line": 64
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущийЭлемент": [
          {
            "name": "CurrentItem",
            "internalName": "CurrentItem",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hPrivileges.cpp",
              "line": 72
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "PrivilegesEntity",
      "internalName": "HierarchicalPrivelegesFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hPrivileges.cpp",
        "line": 45
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Завершить": [
          {
            "name": "TerminateProc",
            "internalName": "TerminateProc",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 236
            },
            "briefDescription": "функция Объект.Завершить()",
            "detailedDescription": {
              "text": "завершает запущенный ранее процесс",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Запустить": [
          {
            "name": "StartProc",
            "internalName": "StartProc",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 222
            },
            "briefDescription": "функция Объект.Запустить( флаг_ожидания )",
            "detailedDescription": {
              "text": "запускает процесс с командой внутри; при флаг_ожидания \u003d\u003d 1 - дожидается окончания его выполнения",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПроцессИд": [
          {
            "name": "GetProcId",
            "internalName": "GetProcId",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 215
            },
            "briefDescription": "функция Объект.ПроцессИд()",
            "detailedDescription": {
              "text": "возвращает pid процесса",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КодЗавершения": [
          {
            "name": "GetExitCode",
            "internalName": "GetExitCode",
            "sourceLocation": {
              "file": "Kvplata/source/func_proc.cpp",
              "line": 252
            },
            "briefDescription": "функция Объект.КодЗавершения()",
            "detailedDescription": {
              "text": "возвращает код завершения процесса, если вернула 259 - означает, что процесс еще работает если вернула -1 - какая то внетренняя ошибка при вызове функции",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "ProcessEntity",
      "internalName": "FuncProcess",
      "sourceLocation": {
        "file": "Kvplata/source/func_proc.cpp",
        "line": 260
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Шагнуть": [
          {
            "name": "ProgressBarStepIt",
            "internalName": "ProgressBarStepIt",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2567
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция \"Шагнуть\" смещает позицию прогресса на величину \"Шаг\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          },
          {
            "name": "ProgressBarStepBy",
            "internalName": "ProgressBarStepBy",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2574
            },
            "briefDescription": "Функция \"Шагнуть( дельта )",
            "detailedDescription": {
              "text": "\" смещает позицию прогресса на величину \"дельта\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Позиция": {
          "name": "GetProgressBarPosition",
          "internalName": "GetProgressBarPosition",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2554
          },
          "briefDescription": "Чтение свойства \"Позиция\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Шаг": {
          "name": "GetProgressBarStep",
          "internalName": "GetProgressBarStep",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2542
          },
          "briefDescription": "Чтение свойства \"Шаг\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Максимум": {
          "name": "GetProgressBarMax",
          "internalName": "GetProgressBarMax",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2530
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "ProgressBarObject \nЧтение свойства \"Максимум\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Позиция": {
          "name": "SetProgressBarPosition",
          "internalName": "SetProgressBarPosition",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2560
          },
          "briefDescription": "Установка свойства \"Позиция\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Шаг": {
          "name": "SetProgressBarStep",
          "internalName": "SetProgressBarStep",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2548
          },
          "briefDescription": "Установка свойства \"Шаг\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Максимум": {
          "name": "SetProgressBarMax",
          "internalName": "SetProgressBarMax",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2536
          },
          "briefDescription": "Установка свойства \"Максимум\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ProgressBarEntity",
      "internalName": "ProgressBarObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2583
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Помечен": {
          "name": "GetObjRadioChecked",
          "internalName": "GetObjRadioChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1098
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "RadioButtonObject \nчтение свойства \"Помечен\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Помечен": {
          "name": "SetObjRadioChecked",
          "internalName": "SetObjRadioChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 1104
          },
          "briefDescription": "установка свойства \"Помечен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "ButtonEntity",
      "constructors": [],
      "name": "RadioButtonEntity",
      "internalName": "RadioButtonObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 1113
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "Recalcs_Reset",
            "internalName": "Recalcs_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 973
            },
            "briefDescription": "Функция ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "Recalcs_Next",
            "internalName": "Recalcs_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 980
            },
            "briefDescription": "Функция Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "RecalcsEntity",
      "internalName": "RecalcsFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
        "line": 988
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "RecalcAccountHistory_Reset",
            "internalName": "RecalcAccountHistory_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 191
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"ВНачало\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "RecalcAccountHistory_Next",
            "internalName": "RecalcAccountHistory_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 200
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"Следующий\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "RecalcAccountHistoryEntity",
      "internalName": "RecalcAccountHistoryFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
        "line": 208
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "RecalcActs_Reset",
            "internalName": "RecalcActs_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 840
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"ВНачало\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "RecalcActs_Next",
            "internalName": "RecalcActs_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 849
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"Следующий\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "RecalcActsEntity",
      "internalName": "RecalcActsFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
        "line": 857
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "RecalcServices_Reset",
            "internalName": "RecalcServices_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 688
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"ВНачало\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "RecalcServices_Next",
            "internalName": "RecalcServices_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 697
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"Следующий\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "RecalcServicesEntity",
      "internalName": "RecalcServicesFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
        "line": 705
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "RecalcVremMod_Reset",
            "internalName": "RecalcVremMod_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 421
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"ВНачало\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "RecalcVremMod_Next",
            "internalName": "RecalcVremMod_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
              "line": 430
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "\"Следующий\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "RecalcVremModEntity",
      "internalName": "RecalcVremModFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hRecalcs.cpp",
        "line": 438
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ЗакрытыйПериод": [
          {
            "name": "IsProxyClosedPeriod",
            "internalName": "IsProxyClosedPeriod",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 326
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Проверяет, является ли запись в закрытом периоде\n*\n* @Функция ЗакрытыйПериод(Дата открытыйМесяц)@\n*\n* @param[in] открытыйМесяц открытый месяц\n* @return 1, если запись в закрытом периоде, и 0 - иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "номерЗаписи": {
          "name": "GetRecordPos",
          "internalName": "GetRecordPos",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 259
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @class RecordProxy\n* @brief Класс для работы с записью\n*\n* @Класс RecordProxy@\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "названиеКаталога": {
          "name": "GetDirectoryName",
          "internalName": "GetDirectoryName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 292
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить название каталога для записей-разделов\n*\n* @Свойство названиеКаталога@\n*\n* @return название каталога\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "этоКаталог": {
          "name": "IsDirectory",
          "internalName": "IsDirectory",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 278
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет проверить является ли запись разделом\n*\n* @Свойство этоКаталог@\n*\n* @return 1, если раздел, и 0 иначе\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "толькоЧтение": {
          "name": "IsProxyReadOnly",
          "internalName": "IsProxyReadOnly",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 306
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить и установить, является ли запись только для чтения\n*\n* @Свойство толькоЧтение@\n*\n* @return 1, если запись запрещено изменять, 0 - иначе\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "номерЗаписи": {
          "name": "SetRecordPos",
          "internalName": "SetRecordPos",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 264
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "толькоЧтение": {
          "name": "SetProxyReadOnly",
          "internalName": "SetProxyReadOnly",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 311
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "constructors": [],
      "name": "RecordProxyEntity",
      "internalName": "RecordProxyFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 334
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Разрушить": [
          {
            "name": "RecDialogDispose",
            "internalName": "RecDialogDispose",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2724
            },
            "briefDescription": "объект.Разрушить()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выполнить": [
          {
            "name": "RecDialogEditDlg",
            "internalName": "RecDialogEditDlg",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2712
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "объект.Выполнить() Вызывает на экран окно диалога, ранее созданное через СоздатьДиалог Возвращает 1, если в диалоге выбрано \"Сохранить\", и 0 при отмене",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Браузер": {
          "name": "GetObjBrowser",
          "internalName": "GetObjBrowser",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2704
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "RecDialogObject \nчтение свойства \"Браузер\"",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "GroupViewEntity",
      "constructors": [],
      "name": "RecDialogEntity",
      "internalName": "RecDialogObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2739
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Клиент_ЗапроситьЗначение": [
          {
            "name": "ClientGetRegValue",
            "internalName": "ClientGetRegValue",
            "sourceLocation": {
              "file": "Kvplata/source/func_registry.cpp",
              "line": 61
            },
            "briefDescription": "Функция Клиент_ЗапроситьЗначение( name, def_value )",
            "detailedDescription": {
              "text": "возвращает значение сохраненное в реестр клиента в секции JavaSoft/Prefs name - имя параметра def_value - значение по умолчанию, возвращаемое, если параметр не будет найден.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Клиент_УдалитьЗначение": [
          {
            "name": "ClientRemoveRegValue",
            "internalName": "ClientRemoveRegValue",
            "sourceLocation": {
              "file": "Kvplata/source/func_registry.cpp",
              "line": 76
            },
            "briefDescription": "Функция Клиент_УдалитьЗначение( name )",
            "detailedDescription": {
              "text": "удаляет параметр с именем name в реестре клиента в секции JavaSoft/Prefs name - имя параметра",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Клиент_УстановитьЗначение": [
          {
            "name": "ClientSetRegValue",
            "internalName": "ClientSetRegValue",
            "sourceLocation": {
              "file": "Kvplata/source/func_registry.cpp",
              "line": 69
            },
            "briefDescription": "Функция Клиент_УстановитьЗначение( name, value )",
            "detailedDescription": {
              "text": "возвращает значение сохраненное в реестр клиента в секции JavaSoft/Prefs name - имя параметра value - сохраняемое значение парметра",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗапроситьЗначение": [
          {
            "name": "GetRegValue",
            "internalName": "GetRegValue",
            "sourceLocation": {
              "file": "Kvplata/source/func_registry.cpp",
              "line": 22
            },
            "briefDescription": "Функция ЗапроситьЗначение( дескриптор_ключа, имя_подключа, имя_параметра )",
            "detailedDescription": {
              "text": ". Читает значение параметра из реестра.Дескриптор_ключа может принимать одно из следующий значений: HKEY_CLASSES_ROOT 0 HKEY_CURRENT_USER 1 HKEY_LOCAL_MACHINE 2 HKEY_USERS 3Имя_подключа - полное имя раздела, например \"Software\\Microsoft\\Windows\\DWM\" Имя_параметра - параметр, значение которого нужно прочесть, если имя_параметра пустая строка, то будет возвращено значение \"По умолчанию\".",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "RegistryEntity",
      "internalName": "RegistryFunctions",
      "sourceLocation": {
        "file": "Kvplata/source/func_registry.cpp",
        "line": 98
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Сброс": [
          {
            "name": "ResetSaldoPointer",
            "internalName": "ResetSaldoPointer",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 441
            },
            "briefDescription": "Метод Сброс()",
            "detailedDescription": {
              "text": "Обеспечивает извлечение элементов сальдо от начала",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextSaldoItem",
            "internalName": "NextSaldoItem",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 469
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Метод Следующий( услуга, поставщик, УК, договор ) Извлекает очередной элемент сальдо (от позиции указателя), отвечающий запрошенным критериям:\nесли услуга \u003e0 - указанная услуга (или услуга из указанной группы),если поставщик !\u003d -1 - указанный поставщик,если УК !\u003d -1 - указанная УК,если договор !\u003d -1 - указанный договор с УК Если находит такой элемент, возвращает 1, обновляет переменные:Месяц - Расчетный месяцФактМесяц - Фактический месяц долга (для вновь формируемой записи определяется месяцем расчета для расчетов и месяцем перерасчета для перерасчетов, для долгов совпадает с Месяц)Тип - 0 - входящее сальдо или 1 - начисление/перерасчетНомерУслугиПоставщикУКДоговорУКФлагиПереплатыСуммаОбъем\nЕсли таких элементов сальдо больше нет, вернет 0 Смещает указатель в массиве сальдо на элемент, следующий за возвращенным (либо ставит на конец массива, если возвращать нечего)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СписокПоставщиков": [
          {
            "name": "ProviderList",
            "internalName": "ProviderList",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 512
            },
            "briefDescription": "Метод СписокПоставщиков()",
            "detailedDescription": {
              "text": "Возвращает список поставщиков, имеющихся в долгах, в виде массива, индексы и элементы которого - номера записей организаций",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СписокДоговоров": [
          {
            "name": "ContractList",
            "internalName": "ContractList",
            "sourceLocation": {
              "file": "KvplataCalc/source/RESTS0.CPP",
              "line": 498
            },
            "briefDescription": "Метод СписокДоговоров()",
            "detailedDescription": {
              "text": "Возвращает список договоров УК, имеющихся в долгах, в виде массива, индексы и элементы которого - номера записей договоров",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "SaldoItemEntity",
      "internalName": "SaldoItemFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/RESTS0.CPP",
        "line": 532
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Планировка": [
          {
            "name": "SashFormLayout",
            "internalName": "SashFormLayout",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2673
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "SashFormObject \nВыполнить перепланировку расположения детей. Применяется в том случае, когда необходимо показать/скрыть одного из детей и затем перерисовать все объекты.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "GroupViewEntity",
      "constructors": [],
      "name": "SashFormEntity",
      "internalName": "SashFormObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2682
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Команда": [
          {
            "name": "SelPutCmd",
            "internalName": "SelPutCmd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4073
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет вызвать команду\n*\n* @Функция Команда( Число|Строка команда [, Строка выражение] )@\n*\n* @param[in] команда команда или имя команды\n* @return Если событие вызвано, значение, которое вернул обработчик, иначе NULL\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСмещение": [
          {
            "name": "SetRecordsOffset",
            "internalName": "SetRecordsOffset",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3718
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить смещение и размер страницы для пагинации\n*\n* @Функция УстановитьСмещение( [Число смещениеСтраницы, [Число размерСтраницы]] )@\n*\n* @param[in] смещениеСтраницы смещение страницы (отсчет от 0); если не задан, то 0\n* @param[in] размерСтраницы размер страницы (0 - выключить пагинацию); если не задан, то размер\n* страницы не изменяется, если был установлен ранее, иначе устанавливается значение по умолчанию\n* @return 1, если пагинация установлена, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьИтоговуюЗапись": [
          {
            "name": "SetTotalRecord",
            "internalName": "SetTotalRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4109
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить итоговую запись\n*\n* @Функция УстановитьИтоговуюЗапись( Объект запись )@\n*\n* @param[in] запись объект с итоговой записью\n* @return 1.0\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьРаздел": [
          {
            "name": "SetDirectory",
            "internalName": "SetDirectory",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3444
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить номер родительской записи\n*\n* @Функция УстановитьРаздел( Число номерЗаписи )@\n*\n* @param[in] номерЗаписи номер родительской записи\n* @return 1, если раздел установлен, 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "НовыйРаздел": [
          {
            "name": "InitDirectory",
            "internalName": "InitDirectory",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3229
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Устанавливает текущей запись-раздел с полями по-умолчанию; для не иерархических ничего не делает\n* \n* @Функция НовыйРаздел()@\n* \n* @return 1, если запись инициализирована, и 0, если нет\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ВызватьСобытие": [
          {
            "name": "InvokeEvent",
            "internalName": "InvokeEvent",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4045
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет вызвать событие в пользовательском обработчике\n*\n* @Функция ВызватьСобытие( Строка событие [, ОбъектСПараметрами] )@\n*\n* @param[in] событие имя события\n* @return Если событие вызвано, значение, которое вернул обработчик, иначе NULL\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПараметрыАПИ": [
          {
            "name": "SetHandlerParams",
            "internalName": "SetHandlerParams",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4028
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить обьект Параметры для пользовательского обработчика\n*\n* @Функция УстановитьПараметрыАПИ( Объект ОбъектСПараметрами )@\n*\n* @param[in] ОбъектСПараметрами Параметры для пользовательского обработчика\n* @return 1.0\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "РазвернутьИерархию": [
          {
            "name": "ExpandHierarchy",
            "internalName": "ExpandHierarchy",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3514
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Разворачивает иерархию в иерархической выборке\n*\n* @Функция РазвернутьИерархию()@\n*\n* @return 1, если иерархия развернута, 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПагинацию": [
          {
            "name": "SetPagination",
            "internalName": "SetPagination",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3678
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить номер и размер страницы для пагинации\n*\n* @Функция УстановитьПагинацию( [Число номерСтраницы, [Число размерСтраницы]] )@\n*\n* @param[in] номерСтраницы номер страницы (отсчет от 1); если не задан, то 1\n* @param[in] размерСтраницы размер страницы (0 - выключить пагинацию); если не задан, то размер\n* страницы не изменяется, если был установлен ранее, иначе устанавливается значение по умолчанию\n* @return 1, если пагинация установлена, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьНомерПоПорядку": [
          {
            "name": "GetLogicPos",
            "internalName": "GetLogicPos",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3184
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Возвращает номер по порядку в выборке записи с указанным номером записи(начиная с 0)\n* \n* @Функция ПолучитьНомерПоПорядку( [Число номерЗаписи] )@\n* \n* @param[in] номерЗаписи номер записи для поиска; если не задан, берется из текущей записи\n* @return номер по порядку в выборке записи с указанным номером записи или -1, если запись не найдена\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "НоваяЗапись": [
          {
            "name": "InitRecord",
            "internalName": "InitRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3214
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Устанавливает текущей запись с полями по-умолчанию\n* \n* @Функция НоваяЗапись()@\n* \n* @return 1, если запись инициализирована, и 0, если нет\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПолеСвязи": [
          {
            "name": "SetLinkFieldName",
            "internalName": "SetLinkFieldName",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3368
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить имя поля связи\n*\n* @Функция УстановитьПолеСвязи( Строка имяПоля )@\n*\n* @param[in] имяПоля имя поля записи\n* @return 1, если поле установлено, 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСортировку": [
          {
            "name": "SetSorting",
            "internalName": "SetSorting",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3544
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить сортировку\n*\n* @Функция УстановитьСортировку( Строка|Объект поляСортировки )@\n*\n* @param[in] поляСортировки если передана строка, то имена полей через запятую; можно указывать после имени поля :DESC или :ASC\n* (Например: название:DESC); если Объект - то каждый элемент должен содержать поля \"поле\" и \"поВозрастанию\"\n* @return 1, если корень установлен, 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ВнестиЗапись": [
          {
            "name": "InsertRecord",
            "internalName": "InsertRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3259
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief вносит новую запись или раздел\n* \n* @Функция ВнестиЗапись()@\n* \n* @return имя первого невалидного поля, если встретилось, и 1, если запись внесена, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПроверитьПраво": [
          {
            "name": "CheckRights",
            "internalName": "CheckRights",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3932
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет проверить указанное право на выборку\n*\n* @Функция ПроверитьПраво( Строка право [, Число бросатьИсключение] )@\n*\n* @param[in] право имя права; Возможные значения: ПРОСМОТР, VIEW, РЕДАКТИРОВАНИЕ, EDIT, УДАЛЕНИЕ,\n* DELETE, РЕДАКТИРОВАНИЕ ГРУПП, EDIT GROUP, УДАЛЕНИЕ ГРУПП, DELETE GROUP\n* @param[in] бросатьИсключение если не равна 0, то пользователю будет показано сообщение с\n* стандартным текстом о нехватке указанного права, если такого права нет; Если не указано, то 0\n* @return 1, если право доступно пользователю, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "КопироватьЗапись": [
          {
            "name": "CopyRecord",
            "internalName": "CopyRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3245
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Создает копию текущей записи\n*\n* @Функция КопироватьЗапись()@\n*\n* @return 1, если запись скопирована, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьКорень": [
          {
            "name": "SetRoot",
            "internalName": "SetRoot",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3478
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить номер корневой записи, если он указан, иначе устанавливает\n* текущей директорией корень выборки(Аналогично: выборка.УстановитьРаздел(выборка.корень))\n*\n* @Функция УстановитьКорень( [Число номерЗаписи] )@\n*\n* @param[in] номерЗаписи номер корневой записи\n* @return 1, если корень установлен, 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ОчиститьЗапись": [
          {
            "name": "ClearRecord",
            "internalName": "ClearRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3169
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Устанавливает текущей пустую запись\n* \n* @Функция ОчиститьЗапись()@\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ЗагрузитьЗапись": [
          {
            "name": "LoadRecord",
            "internalName": "LoadRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3142
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Загружает и устанавливает текущей запись с указанным номером записи\n* \n* @Функция ЗагрузитьЗапись( [Число номерЗаписи] )@\n* \n* @param[in] номерЗаписи номер записи для загрузки; если не задан, берется из текущей записи\n* @return 1, если запись загружена, и 0, если нет такой записи\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьЗапрос": [
          {
            "name": "SetUserQuery",
            "internalName": "SetUserQuery",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3887
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить запрос в выборку\n*\n* @Функция УстановитьЗапрос( Строка|Объект параметры )@\n*\n* @param[in] параметры если передана строка, то она будет использована, как есть, в качестве запроса,\n*    если передали объект, то будет вызвано пользовательское событие \u0027Запрос\u0027, с переданным параметром\n*    в качестве \u0027Параметры\u0027, и возвращенная строка будет использована в качестве запроса\n* @return 1, если запрос установлен, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УдалитьЗапись": [
          {
            "name": "DeleteRecord",
            "internalName": "DeleteRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3308
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Удаляет запись без предворительной загрузки\n* \n* @Функция УдалитьЗапись( [Число номерЗаписи] )@\n* \n* @param[in] номерЗаписи номер записи для удаления; если не задан, берется из текущей записи\n* @return 1, если запись удалена, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьБыстрыйПоиск": [
          {
            "name": "SetQuickSearch",
            "internalName": "SetQuickSearch",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3803
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить поиск вхождения указанного текста по указанным полям\n*\n* @Функция УстановитьБыстрыйПоиск( Строка|Объект поля, Строка текст )@\n*\n* @param[in] поля если строка, то список имен полей для поиска через запятую (пробелы имеют значения);\n* если обьект то в качестве полей беруться все текстовые значения этого объекта\n* @param[in] текст текст для поиска\n* @return 1, если поиск установлен, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "СохранитьЗапись": [
          {
            "name": "UpdateRecord",
            "internalName": "UpdateRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3283
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Сохраняет запись с отслеживанием измененных полей в текущей записи\n* \n* @Функция СохранитьЗапись()@\n* \n* @return имя первого невалидного поля, если встретилось, и 1, если запись сохранена, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьИтоговуюЗапись": [
          {
            "name": "GetTotalRecord",
            "internalName": "GetTotalRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4124
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет получить итоговую запись\n*\n* @Функция ПолучитьИтоговуюЗапись()@\n*\n* @return 1.0, если итоговая запись получена, и 0.0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПоискПоПолям": [
          {
            "name": "SetFieldsSearch",
            "internalName": "SetFieldsSearch",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3756
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить поиск по значениям указанных полей\n*\n* @Функция УстановитьПоискПоПолям( [Строка поля] )@\n*\n* @param[in] поля список имен полей для поиска через запятую (пробелы имеют значения)\n* @return 1, если поиск установлен, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьСвязь": [
          {
            "name": "SetLink",
            "internalName": "SetLink",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3399
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет установить номер главной записи\n*\n* @Функция УстановитьСвязь( Число номерЗаписи )@\n*\n* @param[in] номерЗаписи номер главной записи\n* @return 1, если связь установлено, 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьЗапись": [
          {
            "name": "GetRecordByNum",
            "internalName": "GetRecordByNum",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3113
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Устанавливает текущей запись с указанным порядковым номером\n* \n* @Функция ПолучитьЗапись( [Число номерПоПорядку] )@\n* \n* @param[in] номерПоПорядку порядковый номер записи в выборке; если не задан запрашивается следующая\n* запись от текущей\n* @return 1, если запись получена, и 0, если нет такой записи\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПроверитьПравоНаПоле": [
          {
            "name": "GetFieldRights",
            "internalName": "GetFieldRights",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3978
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Позволяет проверить право на поле\n*\n* @Функция ПроверитьПравоНаПоле( Строка имяПоля, Строка право [, Число бросатьИсключение] )@\n*\n* @param[in] имяПоля имя поля\n* @param[in] право имя права; Возможные значения: ПРОСМОТР, VIEW, РЕДАКТИРОВАНИЕ, EDIT\n* @param[in] бросатьИсключение если не равна 0, то пользователю будет показано сообщение с\n* стандартным текстом о нехватке указанного права, если такого права нет; Если не указано, то 0\n* @return 1, если право доступно пользователю, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПараметрыФильтра": [
          {
            "name": "SetFilterParams",
            "internalName": "SetFilterParams",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3857
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Устанавливает параметры фильтра\n*\n* @Функция УстановитьПараметрыФильтра( [парам1 [, парам2 [, парам3...]]])@\n*\n* @param[in] парам1 окончание строки Where, например, \" поле1\u003d :2 AND поле2 between :3 and :4\" (параметры начинаются с :2)\n* @param[in] парам2 строка типов параметров через запятую, например \"S,D,D\"\n* @param[in] парам3 значения параметров\n* @return 1, если параметры установлены, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "ПереместитьЗапись": [
          {
            "name": "MoveRecord",
            "internalName": "MoveRecord",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 3338
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "* @brief Перемещает запись в указанную папку\n*\n* @Функция ПереместитьЗапись()@\n*\n* @return 1, если запись перемещена, и 0 иначе\n*",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "запись": {
          "name": "GetRecord",
          "internalName": "GetRecord",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3032
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @class SelectionObject\n* @brief Класс для работы с выборкой\n*\n* @Класс SelectionObject@\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "полеСвязи": {
          "name": "GetLinkFieldName",
          "internalName": "GetLinkFieldName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3352
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить имя поля связи\n*\n* @Свойство полеСвязи@\n*\n* @return имя поля связи или пустая строка, если связь не установлена\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "размерСтраницы": {
          "name": "GetPageSize",
          "internalName": "GetPageSize",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3656
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить и установить размер страницы (0 - выключить пагинацию)\n*\n* @Свойство размерСтраницы@\n*\n* @return размер страницы\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "раздел": {
          "name": "GetDirectory",
          "internalName": "GetDirectory",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3429
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить номер родительской записи\n*\n* @Свойство раздел@\n*\n* @return номер родительской записи\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "естьИтоговаяЗапись": {
          "name": "GetHasTotalRecord",
          "internalName": "GetHasTotalRecord",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 4138
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить, установлена ли итоговая запись\n*\n* @Свойство естьИтоговаяЗапись@\n*\n* @return 1.0, если установлена итоговая запись, и 0.0 иначе\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "номерСтраницы": {
          "name": "GetPageNumber",
          "internalName": "GetPageNumber",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3637
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить и установить номер страницы (отсчет от 1)\n*\n* @Свойство номерСтраницы@\n*\n* @return номер страницы\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "корень": {
          "name": "GetRoot",
          "internalName": "GetRoot",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3462
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить номер корневой записи\n*\n* @Свойство корень@\n*\n* @return номер корневой записи\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "всегоЗаписей": {
          "name": "GetSizeOverPage",
          "internalName": "GetSizeOverPage",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3097
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить кол-во записей в таблице без учета пагинации\n*\n* @Свойство всегоЗаписей@\n*\n* @return кол-во записей в таблице без учета пагинации\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "загруженоЗаписей": {
          "name": "GetSize",
          "internalName": "GetSize",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3083
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить кол-во записей в выборке\n*\n* @Свойство загруженоЗаписей@\n*\n* @return кол-во записей в выборке\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "имяВыборки": {
          "name": "GetSelectionName",
          "internalName": "GetSelectionName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3054
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить имя выборки\n*\n* @Свойство имяВыборки@\n*\n* @return имя выборки\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "смещениеСтраницы": {
          "name": "GetPageOffset",
          "internalName": "GetPageOffset",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3618
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить и установить смещение страницы (отсчет от 0)\n*\n* @Свойство смещениеСтраницы@\n*\n* @return номер страницы\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "связь": {
          "name": "GetLink",
          "internalName": "GetLink",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3384
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить номер главной записи\n*\n* @Свойство cвязь@\n*\n* @return номер связанной записи\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "имяТаблицы": {
          "name": "GetTableName",
          "internalName": "GetTableName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3069
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить имя таблицы\n*\n* @Свойство имяТаблицы@\n*\n* @return имя таблицы\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "полеИерархии": {
          "name": "GetHierarchyFieldName",
          "internalName": "GetHierarchyFieldName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3414
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "* @brief Позволяет получить имя поля иерархии\n*\n* @Свойство полеИерархии@\n*\n* @return имя поля иерархии или пустая строка, если иерархии не установлена\n*",
            "isMarkdown": true
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "запись": {
          "name": "SetRecord",
          "internalName": "SetRecord",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3037
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "размерСтраницы": {
          "name": "SetPageSize",
          "internalName": "SetPageSize",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3661
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "смещениеСтраницы": {
          "name": "SetPageOffset",
          "internalName": "SetPageOffset",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3623
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "номерСтраницы": {
          "name": "SetPageNumber",
          "internalName": "SetPageNumber",
          "sourceLocation": {
            "file": "MuzzleJ/Source/SelectionObject.cpp",
            "line": 3642
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "constructors": [],
      "name": "SelectionEntity",
      "internalName": "SelectionObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4146
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "подсчитать": [
          {
            "name": "Count",
            "internalName": "Count",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 405
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "инфо": [
          {
            "name": "Info",
            "internalName": "Info",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 282
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "log": [
          {
            "name": "Log",
            "internalName": "Log",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 287
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ошибка": [
          {
            "name": "_Error",
            "internalName": "_Error",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 303
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "открыть": [
          {
            "name": "Open",
            "internalName": "Open",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 370
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "error": [
          {
            "name": "_Error",
            "internalName": "_Error",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 303
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "группаСтоп": [
          {
            "name": "GroupEnd",
            "internalName": "GroupEnd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 391
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "trace": [
          {
            "name": "Trace",
            "internalName": "Trace",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 341
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "file": [
          {
            "name": "File",
            "internalName": "File",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 462
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "assert": [
          {
            "name": "Assert",
            "internalName": "Assert",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 297
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "группа": [
          {
            "name": "Group",
            "internalName": "Group",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 398
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "таймерСтоп": [
          {
            "name": "TimeEnd",
            "internalName": "TimeEnd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 430
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ФайлСтоп": [
          {
            "name": "FileEnd",
            "internalName": "FileEnd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 467
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Файл": [
          {
            "name": "File",
            "internalName": "File",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 462
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "close": [
          {
            "name": "Close",
            "internalName": "Close",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 377
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "group": [
          {
            "name": "Group",
            "internalName": "Group",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 398
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "info": [
          {
            "name": "Info",
            "internalName": "Info",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 282
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "timeEnd": [
          {
            "name": "TimeEnd",
            "internalName": "TimeEnd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 430
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "лог": [
          {
            "name": "Log",
            "internalName": "Log",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 287
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "трейс": [
          {
            "name": "Trace",
            "internalName": "Trace",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 341
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "предупреждение": [
          {
            "name": "Warn",
            "internalName": "Warn",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 292
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "count": [
          {
            "name": "Count",
            "internalName": "Count",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 405
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "clear": [
          {
            "name": "Clear",
            "internalName": "Clear",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 384
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "закрыть": [
          {
            "name": "Close",
            "internalName": "Close",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 377
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "warn": [
          {
            "name": "Warn",
            "internalName": "Warn",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 292
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "groupEnd": [
          {
            "name": "GroupEnd",
            "internalName": "GroupEnd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 391
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "очистить": [
          {
            "name": "Clear",
            "internalName": "Clear",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 384
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "fileEnd": [
          {
            "name": "FileEnd",
            "internalName": "FileEnd",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 467
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "time": [
          {
            "name": "Time",
            "internalName": "Time",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 423
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Запускает таймер с именем name, который можно остановить вызвав метод timeEnd(имяТаймера).\n\n`Параметры:`\n\n- *имяТаймера* (строка) - имя, присвоенное таймеру; то же самое имя нужно передавать в `timeEnd`\n\n`Результат:` всегда возвращает число 0",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "проверить": [
          {
            "name": "Assert",
            "internalName": "Assert",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 297
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "таймер": [
          {
            "name": "Time",
            "internalName": "Time",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 423
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Запускает таймер с именем name, который можно остановить вызвав метод timeEnd(имяТаймера).\n\n`Параметры:`\n\n- *имяТаймера* (строка) - имя, присвоенное таймеру; то же самое имя нужно передавать в `timeEnd`\n\n`Результат:` всегда возвращает число 0",
              "isMarkdown": true
            },
            "revision": "trunk"
          }
        ],
        "open": [
          {
            "name": "Open",
            "internalName": "Open",
            "sourceLocation": {
              "file": "MuzzleJ/Source/StackConsole.cpp",
              "line": 370
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "StackConsoleEntity",
      "internalName": "StackConsoleVarColFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/StackConsole.cpp",
        "line": 485
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "*Стек-Консоль* - инструмент для разработчиков наподобие консоли в веб-браузерах. \n\nПри отладке избавляет от необходимости вставлять в код вызовы методов Сообщить и Отладить. В Стек-Консоли удобнее, чем в \nКалькуляторе, выполнять функции и вычислять выражения. Стек-Консоль есть в Стеке версии 201704 и выше. Она работает как в \n`Muzzle` так и в `JavaScript`.",
        "isMarkdown": true
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Завершить": [
          {
            "name": "CommandFlush",
            "internalName": "CommandFlush",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 771
            },
            "briefDescription": "Метод Объект.Завершить()",
            "detailedDescription": {
              "text": "Передает все наборы параметров, находящиеся в буфере, на сервер и заставляет выполнить запрос для каждого набора Возвращает 1 при успешном завершении, 0 - при ошибке",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Очистить": [
          {
            "name": "ClearSQLSelect",
            "internalName": "ClearSQLSelect",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 592
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВремяОжидания": [
          {
            "name": "SetTimeOut",
            "internalName": "SetTimeOut",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 802
            },
            "briefDescription": "метод объект.ВремяОжидания( Timeout )",
            "detailedDescription": {
              "text": "устанавливает Timeout запроса объекту Command в секундах",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекстОшибки": [
          {
            "name": "CommandErrorMessage",
            "internalName": "CommandErrorMessage",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 822
            },
            "briefDescription": "Метод Объект.ТекстОшибки()",
            "detailedDescription": {
              "text": "Возвращает текст ошибки если есть, или \"\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "toString": [
          {
            "name": "SQLObjectToString",
            "internalName": "SQLObjectToString",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 587
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПараметры": [
          {
            "name": "NoFuncSetParam",
            "internalName": "NoFuncSetParam",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 807
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РежимТранзакции": [
          {
            "name": "SetTransactionMode",
            "internalName": "SetTransactionMode",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 831
            },
            "briefDescription": "Метод Объект.РежимТранзакции( режим )",
            "detailedDescription": {
              "text": "Устанавливает режим работы с транзакциями ( 1 - включить, 0 - отключить, оптимизировать запросы с таблицами в памяти )",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПроверятьПараметры": [
          {
            "name": "CommandCheckParams",
            "internalName": "CommandCheckParams",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 815
            },
            "briefDescription": "Метод Объект.ПроверятьПараметры( 0 | 1 )",
            "detailedDescription": {
              "text": "Устанавливает режим проверки параметров",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТихийРежим": [
          {
            "name": "SetSilentMode",
            "internalName": "SetSilentMode",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 795
            },
            "briefDescription": "метод объект.ТихийРежим( режим )",
            "detailedDescription": {
              "text": "устанавливает \"тихий режим\" объекту Command, если mode\u003d1, и восстанавливает нормальную работу в противном случае",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выполнить": [
          {
            "name": "AssignParams",
            "internalName": "AssignParams",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 418
            },
            "briefDescription": "Метод Объект.УстановитьПараметры(...)",
            "detailedDescription": {
              "text": "Может принять либо массив со значениями (в этом случае значения передаются элементам массива параметров в алфавитном порядке имен переменных), либо просто список значений через запятую (в порядке списка они и присваиваются элементам массива параметров) Возвращает 1 в случае успеха, 0 - при неудаче.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "SQLCommandEntity",
      "internalName": "SQLCommandFuncs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 839
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Следующий": [
          {
            "name": "FetchNext",
            "internalName": "FetchNext",
            "sourceLocation": {
              "file": "Kvplata/source/FUNC_SQL.CPP",
              "line": 1719
            },
            "briefDescription": "Метод Объект.Следующий()",
            "detailedDescription": {
              "text": "Загружает в объект следующую запись из результатов запроса Возвращает 1 в случае успеха, 0 - при неудаче (больше нет записей)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПараметры": [
          {
            "name": "AssignParams",
            "internalName": "AssignParams",
            "sourceLocation": {
              "file": "Kvplata/source/FUNC_SQL.CPP",
              "line": 1693
            },
            "briefDescription": "Метод Объект.УстановитьПараметры(...)",
            "detailedDescription": {
              "text": "Пока выполняет только запрос",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "SQLOdbcSelectEntity",
      "internalName": "SQLOdbcSelectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/FUNC_SQL.CPP",
        "line": 1729
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "КоличествоНаборов": [
          {
            "name": "GetCountRowset",
            "internalName": "GetCountRowset",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 480
            },
            "briefDescription": "Метод Объект.КоличествоНаборов()",
            "detailedDescription": {
              "text": "Возвращает количество наборов",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПереместитьсяВНабор": [
          {
            "name": "BufRedGotoRowset",
            "internalName": "BufRedGotoRowset",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 498
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекстОшибки": [
          {
            "name": "SelectErrorMessage",
            "internalName": "SelectErrorMessage",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 605
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДвоичноеПолеВФайл": [
          {
            "name": "BinaryFieldToFile",
            "internalName": "BinaryFieldToFile",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 506
            },
            "briefDescription": "Метод Объект.ДвоичноеПолеВФайл( имя поля, имя файла )",
            "detailedDescription": {
              "text": "Позволяет сохранить извлеченное запросом двоичное поле в файл с указанным именем",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьПараметры": [
          {
            "name": "AssignParams",
            "internalName": "AssignParams",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 418
            },
            "briefDescription": "Метод Объект.УстановитьПараметры(...)",
            "detailedDescription": {
              "text": "Может принять либо массив со значениями (в этом случае значения передаются элементам массива параметров в алфавитном порядке имен переменных), либо просто список значений через запятую (в порядке списка они и присваиваются элементам массива параметров) Возвращает 1 в случае успеха, 0 - при неудаче.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПроверятьПараметры": [
          {
            "name": "SelectCheckParams",
            "internalName": "SelectCheckParams",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 582
            },
            "briefDescription": "Метод Объект.ПроверятьПараметры( 0 | 1 )",
            "detailedDescription": {
              "text": "Устанавливает режим проверки параметров",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Очистить": [
          {
            "name": "ClearSQLSelect",
            "internalName": "ClearSQLSelect",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 592
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущийНабор": [
          {
            "name": "CurrentRowset",
            "internalName": "CurrentRowset",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 447
            },
            "briefDescription": "Метод Объект.ТекущийНабор()",
            "detailedDescription": {
              "text": "Возвращает номер текущего набора",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПроверитьОшибки": [
          {
            "name": "SelectIsError",
            "internalName": "SelectIsError",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 600
            },
            "briefDescription": "Метод Объект.ПроверитьОшибки( )",
            "detailedDescription": {
              "text": "Проверяет были ли ошибки в запросах",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолеВТекст": [
          {
            "name": "FieldToFile",
            "internalName": "FieldToFile",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 527
            },
            "briefDescription": "Метод Объект.ПолеВТекст( имя поля )",
            "detailedDescription": {
              "text": "Позволяет сохранить извлеченное запросом двоичное поле в текст",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "FetchNext",
            "internalName": "FetchNext",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 455
            },
            "briefDescription": "Метод Объект.Следующий()",
            "detailedDescription": {
              "text": "Загружает в объект следующую запись из результатов запроса Возвращает 1 в случае успеха, 0 - при неудаче (больше нет записей)",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "toString": [
          {
            "name": "SQLObjectToString",
            "internalName": "SQLObjectToString",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 587
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "РаспаковатьДвоичноеПоле": [
          {
            "name": "BinaryFieldDecompress",
            "internalName": "BinaryFieldDecompress",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 543
            },
            "briefDescription": "Метод Объект.РаспаковатьДвоичноеПоле( имя поля )",
            "detailedDescription": {
              "text": "Извлекает содержимое указанного двоичного поля из очердной строки запроса в длинную строку",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТихийРежим": [
          {
            "name": "SetSilentModeO",
            "internalName": "SetSilentModeO",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 620
            },
            "briefDescription": "метод объект.ТихийРежим( режим )",
            "detailedDescription": {
              "text": "устанавливает \"тихий режим\" объекту Command, если mode\u003d1, и восстанавливает нормальную работу в противном случае",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выполнить": [
          {
            "name": "NoFuncExecute",
            "internalName": "NoFuncExecute",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 574
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Переместиться": [
          {
            "name": "BufRedGoto",
            "internalName": "BufRedGoto",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
              "line": 489
            },
            "briefDescription": "Метод Объект.Переместиться( позиция )",
            "detailedDescription": {
              "text": "Перемещается в буфере на указанную позицию и загружает эту запись в объект (работает только в BufferedReader, в Query ничего не делает) Вернет 1 - есть такая запись, 0 - нет",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "SQLSelectEntity",
      "internalName": "SQLSelectFuncs",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Funcs/SQLFuncs.cpp",
        "line": 628
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "STD_Reset",
            "internalName": "STD_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hQuery.cpp",
              "line": 35
            },
            "briefDescription": "Функция ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "STD_Next",
            "internalName": "STD_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hQuery.cpp",
              "line": 42
            },
            "briefDescription": "Функция Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ТекущийЭлемент": [
          {
            "name": "STD_CurrentItem",
            "internalName": "STD_CurrentItem",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/hQuery.cpp",
              "line": 48
            },
            "briefDescription": "Функция ТекущийЭлемент()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "STDHEntity",
      "internalName": "STD_Funcs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/hQuery.cpp",
        "line": 56
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ПредыдущаяСтраница": [
          {
            "name": "TabControlPrevPage",
            "internalName": "TabControlPrevPage",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2443
            },
            "briefDescription": "функция ПредыдущаяСтраница()",
            "detailedDescription": {
              "text": "открывает предыдущую страницу в TabControl",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "СледующаяСтраница": [
          {
            "name": "TabControlNextPage",
            "internalName": "TabControlNextPage",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2436
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "TabControlObject \nфункция СледующаяСтраница() открывает следующую страницу в TabControl",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВысотаЗаголовка": [
          {
            "name": "TabControlSetTabHeight",
            "internalName": "TabControlSetTabHeight",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2465
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "устанавливает высоту заголовка закладок (в пикселях) 0 - скрыть заголовки -1 - установить значение по умолчанию",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОткрытьСтраницу": [
          {
            "name": "TabControlOpenPage",
            "internalName": "TabControlOpenPage",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2450
            },
            "briefDescription": "функция ОткрытьСтраницу( индекс )",
            "detailedDescription": {
              "text": "открывает страницу по ее индексу в TabControl",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "ИндексСтраницы": {
          "name": "GetTabControlPageIndex",
          "internalName": "GetTabControlPageIndex",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 2457
          },
          "briefDescription": "функция ИндексСтраницы()",
          "detailedDescription": {
            "text": "возвращает индекс текущей страницы в TabControl",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "GroupViewEntity",
      "constructors": [],
      "name": "TabControlEntity",
      "internalName": "TabControlObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2474
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "Помечен": {
          "name": "IsToolBarButtonChecked",
          "internalName": "IsToolBarButtonChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 3316
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Помечен": {
          "name": "SetToolBarButtonChecked",
          "internalName": "SetToolBarButtonChecked",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 3321
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ToolbarButtonEntity",
      "internalName": "ToolBarButtonObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3331
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {},
      "getters": {
        "КнопкиПоКоманде": {
          "name": "GetToolBarButtonsByCommand",
          "internalName": "GetToolBarButtonsByCommand",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 3293
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Кнопки": {
          "name": "GetToolBarButtons",
          "internalName": "GetToolBarButtons",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 3283
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "КнопкиПоИмени": {
          "name": "GetToolBarButtonsByName",
          "internalName": "GetToolBarButtonsByName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 3288
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "ToolBarEntity",
      "internalName": "ToolBarObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3302
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Раскрыть": [
          {
            "name": "TreeBrowserExExpandItem",
            "internalName": "TreeBrowserExExpandItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2033
            },
            "briefDescription": "\"Раскрыть\" элемент",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВыделенныйУзел": [
          {
            "name": "TreeBrowserExSelectedItem",
            "internalName": "TreeBrowserExSelectedItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2051
            },
            "briefDescription": "\"ВыделенныйУзел\" элемент без потомков",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОбновитьУзел": [
          {
            "name": "TreeBrowserExRefreshNode",
            "internalName": "TreeBrowserExRefreshNode",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2007
            },
            "briefDescription": "обновить ветку",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Элементы": [
          {
            "name": "TreeBrowserExItems",
            "internalName": "TreeBrowserExItems",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2020
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "чтение свойства \"Элементы\" заполняет массив элементами дерева item_id - код элемента, начиная с которого формировать массив, 0 - все дерево what - какую часть дерева возвращать 0 - только себя 1 - только детей 2 - себя и всех потомков only_checked - только отмеченые элементы",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Обновить": [
          {
            "name": "TreeBrowserExRefreshTree",
            "internalName": "TreeBrowserExRefreshTree",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2001
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "TreeBrowserExObject \nобновить дерево",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Пометить": [
          {
            "name": "TreeBrowserExCheckItem",
            "internalName": "TreeBrowserExCheckItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2045
            },
            "briefDescription": "\"Пометить\" элемент со всеми потомками",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Свернуть": [
          {
            "name": "TreeBrowserExCollapseItem",
            "internalName": "TreeBrowserExCollapseItem",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 2039
            },
            "briefDescription": "\"Свернуть\" элемент",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "parentEntity": "VisualEntity",
      "constructors": [],
      "name": "TreeBrowserExEntity",
      "internalName": "TreeBrowserExObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 2063
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ОсвободитьДрайвер": [
          {
            "name": "ReleaseTwain",
            "internalName": "ReleaseTwain",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 23
            },
            "briefDescription": "Функция Объект.ОсвободитьДрайвер()",
            "detailedDescription": {
              "text": "Освобождает Twain, ранее инициализированный функцией Объект.ИнициализироватьДрайвер()",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Сканировать": [
          {
            "name": "Acquire",
            "internalName": "Acquire",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 52
            },
            "briefDescription": "Функция Объект.Сканировать()",
            "detailedDescription": {
              "text": "Запускает диалог сканирования драйвера",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВыбратьСканерПоИмени": [
          {
            "name": "SelectSourceByName",
            "internalName": "SelectSourceByName",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 33
            },
            "briefDescription": "Функция Объект.ВыбратьСканер( имя_источника )",
            "detailedDescription": {
              "text": "Позволяет выбрать какое именно устройство будет использоваться при сканировании. Список имен устройств можно получить из переменной Объект.ДрайверИнфо.СписокСканеров, список будет представлен в виде \"\u003cId устройства\u003e\u003d\u003cНаименование\u003e;...\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьОбраз": [
          {
            "name": "SaveImageFile",
            "internalName": "SaveImageFile",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 163
            },
            "briefDescription": "Функция Объект.ЗаписатьОбраз( имя_файла )",
            "detailedDescription": {
              "text": "Возвращает 1, если запись образа в файл прошла успешно.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПолучитьДокумент": [
          {
            "name": "GetDocContent",
            "internalName": "GetDocContent",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 80
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Объект.ПолучитьДокумент( имя_документа [, сжимать (1|0)] ) Возвращает объект с информацией о документе:\nДанные - если имя_документа задано, то читает данные документа из файла, иначе возвращает результат последнего сканирования.Тип - тип файла, для сканированных данных - \"bmp\"Ошибка - ошибка, возникшая при получении данных документа. Пусто, если все Ок.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВыбратьСканер": [
          {
            "name": "SelectSourceById",
            "internalName": "SelectSourceById",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 44
            },
            "briefDescription": "Функция Объект.ВыбратьСканер( id_источника )",
            "detailedDescription": {
              "text": "Позволяет выбрать какое именно устройство будет использоваться при сканировании. Список Id устройств можно получить из переменной Объект.ДрайверИнфо.СписокСканеров, список будет представлен в виде \"\u003cId устройства\u003e\u003d\u003cНаименование\u003e;...\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОбразДоступен": [
          {
            "name": "IsValidDIB",
            "internalName": "IsValidDIB",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 155
            },
            "briefDescription": "Функция Объект.ОбразДоступен()",
            "detailedDescription": {
              "text": "Возвращает 1, если сканирование было произведено и результат успешен.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ОчиститьОбраз": [
          {
            "name": "DestroyDIB",
            "internalName": "DestroyDIB",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 147
            },
            "briefDescription": "Функция Объект.ОчиститьОбраз()",
            "detailedDescription": {
              "text": "Очищает результат последнего сканирования",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ИнициализироватьДрайвер": [
          {
            "name": "InitTwain",
            "internalName": "InitTwain",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 15
            },
            "briefDescription": "Функция Объект.ИнициализироватьДрайвер()",
            "detailedDescription": {
              "text": "Инициализирует Twain. Во избежание коллизий, освободить драйвер нужно тоже в этом же диалоге.",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ДрайверИнфо": [
          {
            "name": "GetTwainInfo",
            "internalName": "GetTwainInfo",
            "sourceLocation": {
              "file": "Kvplata/source/func_extdoc.cpp",
              "line": 62
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "Функция Объект.ДрайверИнфо() Возвращает объект с информацией о драйвере:\nСписокСканеров - \"\u003cId устройства\u003e\u003d\u003cНаименование\u003e;...\"ТекущийСканер - \"\u003cId устройства\u003e\u003d\u003cНаименование\u003e\"",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "TWAINEntity",
      "internalName": "TWAINFunctions",
      "sourceLocation": {
        "file": "Kvplata/source/func_extdoc.cpp",
        "line": 181
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВНачало": [
          {
            "name": "UQO_Reset",
            "internalName": "UQO_Reset",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/UserQuery.cpp",
              "line": 57
            },
            "briefDescription": "Функция ВНачало()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "UQO_Next",
            "internalName": "UQO_Next",
            "sourceLocation": {
              "file": "Kvplata/source/HierObjs/UserQuery.cpp",
              "line": 64
            },
            "briefDescription": "Функция Следующий()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "UserQueryEntity",
      "internalName": "UserQueryObjectsFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/HierObjs/UserQuery.cpp",
        "line": 72
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Сброс": [
          {
            "name": "ResetUserSource",
            "internalName": "ResetUserSource",
            "sourceLocation": {
              "file": "KvplataCalc/source/AddSourceObj.cpp",
              "line": 620
            },
            "briefDescription": "Функция ИмяИсточника.Сброс()",
            "detailedDescription": {
              "text": "Сбрасывает в начало пользовательский источник данных на текущем лицевом",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextRecordInUserSource",
            "internalName": "NextRecordInUserSource",
            "sourceLocation": {
              "file": "KvplataCalc/source/AddSourceObj.cpp",
              "line": 631
            },
            "briefDescription": "Функция ИмяИсточника.Следующий()",
            "detailedDescription": {
              "text": "Переходит к следующей записи пользовательского источника на текущем лицевом Вернет 0, если записи закончись",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "UserSourceEntity",
      "internalName": "UserSourceFuncs",
      "sourceLocation": {
        "file": "KvplataCalc/source/AddSourceObj.cpp",
        "line": 652
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Цвет": [
          {
            "name": "SetObjColor",
            "internalName": "SetObjColor",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 136
            },
            "briefDescription": "установка цвета",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ИзменитьКоординаты": [
          {
            "name": "SetObjIncBounds",
            "internalName": "SetObjIncBounds",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 155
            },
            "briefDescription": "изменение координат",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Выделить": [
          {
            "name": "SetObjSelection",
            "internalName": "SetObjSelection",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 167
            },
            "briefDescription": "установить выделение",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "УстановитьФокус": [
          {
            "name": "SetObjFocus",
            "internalName": "SetObjFocus",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 161
            },
            "briefDescription": "установить фокус на визуальный элемент",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "Имя": {
          "name": "GetObjName",
          "internalName": "GetObjName",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 149
          },
          "briefDescription": "чтение свойства \"Имя\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Заголовок": {
          "name": "GetObjTitle",
          "internalName": "GetObjTitle",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 112
          },
          "briefDescription": "чтение свойства \"Заголовок\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Класс": {
          "name": "GetObjClass",
          "internalName": "GetObjClass",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 179
          },
          "briefDescription": "чтение свойства \"Класс\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Группа": {
          "name": "GetObjParentGroup",
          "internalName": "GetObjParentGroup",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 187
          },
          "briefDescription": "чтение свойства \"Группа\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Изменен": {
          "name": "GetObjChanged",
          "internalName": "GetObjChanged",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 124
          },
          "briefDescription": "чтение свойства \"Изменен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Диалог": {
          "name": "GetObjParentWindow",
          "internalName": "GetObjParentWindow",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 193
          },
          "briefDescription": "чтение свойства \"Окно\" или \"Диалог\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Существует": {
          "name": "GetObjExists",
          "internalName": "GetObjExists",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 173
          },
          "briefDescription": "чтение свойства \"Существует\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Окно": {
          "name": "GetObjParentWindow",
          "internalName": "GetObjParentWindow",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 193
          },
          "briefDescription": "чтение свойства \"Окно\" или \"Диалог\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Скрытый": {
          "name": "GetObjHidden",
          "internalName": "GetObjHidden",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 88
          },
          "briefDescription": "чтение свойства \"Скрытый\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "ресурс": {
          "name": "GetResourceInfo",
          "internalName": "GetResourceInfo",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 211
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "Свойство ресурс\n\nПозволяет получить описание данного объекта из ресурса",
            "isMarkdown": true
          },
          "revision": "trunk"
        },
        "Размер": {
          "name": "GetObjSize",
          "internalName": "GetObjSize",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 142
          },
          "briefDescription": "чтение свойства \"Размер\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Права": {
          "name": "GetRightsObj",
          "internalName": "GetRightsObj",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 198
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Запрещен": {
          "name": "GetObjDisabled",
          "internalName": "GetObjDisabled",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 76
          },
          "briefDescription": "чтение свойства \"Запрещен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Текст": {
          "name": "GetObjText",
          "internalName": "GetObjText",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 100
          },
          "briefDescription": "чтение свойства \"Текст\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "Скрытый": {
          "name": "SetObjHidden",
          "internalName": "SetObjHidden",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 94
          },
          "briefDescription": "установка свойства \"Скрытый\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Заголовок": {
          "name": "SetObjTitle",
          "internalName": "SetObjTitle",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 118
          },
          "briefDescription": "установка свойства \"Заголовок\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Изменен": {
          "name": "SetObjChanged",
          "internalName": "SetObjChanged",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 130
          },
          "briefDescription": "установка свойства \"Изменен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Запрещен": {
          "name": "SetObjDisabled",
          "internalName": "SetObjDisabled",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 82
          },
          "briefDescription": "установка свойства \"Запрещен\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "Текст": {
          "name": "SetObjText",
          "internalName": "SetObjText",
          "sourceLocation": {
            "file": "MuzzleJ/Source/VisualObjects.cpp",
            "line": 106
          },
          "briefDescription": "установка свойства \"Текст\".",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "constructors": [],
      "name": "VisualEntity",
      "internalName": "ViewObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 229
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "FirstChild": [
          {
            "name": "XmlFirstChild",
            "internalName": "XmlFirstChild",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 356
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "NextSibling": [
          {
            "name": "XmlNextSibling",
            "internalName": "XmlNextSibling",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 370
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "FirstChildElement": [
          {
            "name": "XmlFirstChildElement",
            "internalName": "XmlFirstChildElement",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 413
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "RemoveChild": [
          {
            "name": "XmlRemoveChild",
            "internalName": "XmlRemoveChild",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 407
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "LastChild": [
          {
            "name": "XmlLastChild",
            "internalName": "XmlLastChild",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 363
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Attribute": [
          {
            "name": "XmlAttribute",
            "internalName": "XmlAttribute",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 441
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "RemoveAttribute": [
          {
            "name": "XmlRemoveAttribute",
            "internalName": "XmlRemoveAttribute",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 459
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "SetAttribute": [
          {
            "name": "XmlSetAttribute",
            "internalName": "XmlSetAttribute",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 451
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "PreviousSibling": [
          {
            "name": "XmlPreviousSibling",
            "internalName": "XmlPreviousSibling",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 377
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "NextSiblingElement": [
          {
            "name": "XmlNextSiblingElement",
            "internalName": "XmlNextSiblingElement",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 420
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "InsertEndChildElement": [
          {
            "name": "XmlInsertEndChildElement",
            "internalName": "XmlInsertEndChildElement",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 427
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "SaveFile": [
          {
            "name": "XmlSaveFile",
            "internalName": "XmlSaveFile",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 478
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "LoadFile": [
          {
            "name": "XmlLoadFile",
            "internalName": "XmlLoadFile",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 467
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "HasAttribute": [
          {
            "name": "XmlHasAttribute",
            "internalName": "XmlHasAttribute",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 434
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "InsertEndChild": [
          {
            "name": "XmlInsertEndChild",
            "internalName": "XmlInsertEndChild",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 384
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "InsertAfterChild": [
          {
            "name": "XmlInsertAfterChild",
            "internalName": "XmlInsertAfterChild",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 391
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "InsertBeforeChild": [
          {
            "name": "XmlInsertBeforeChild",
            "internalName": "XmlInsertBeforeChild",
            "sourceLocation": {
              "file": "Kvplata/source/func_file2.cpp",
              "line": 399
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {
        "parent": {
          "name": "XmlGetParent",
          "internalName": "XmlGetParent",
          "sourceLocation": {
            "file": "Kvplata/source/func_file2.cpp",
            "line": 351
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "type": {
          "name": "XmlGetType",
          "internalName": "XmlGetType",
          "sourceLocation": {
            "file": "Kvplata/source/func_file2.cpp",
            "line": 317
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        },
        "value": {
          "name": "XmlGetValue",
          "internalName": "XmlGetValue",
          "sourceLocation": {
            "file": "Kvplata/source/func_file2.cpp",
            "line": 341
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "setters": {
        "value": {
          "name": "XmlSetValue",
          "internalName": "XmlSetValue",
          "sourceLocation": {
            "file": "Kvplata/source/func_file2.cpp",
            "line": 346
          },
          "briefDescription": "",
          "detailedDescription": {
            "text": "",
            "isMarkdown": false
          },
          "revision": "trunk"
        }
      },
      "constructors": [],
      "name": "XmlObjectEntity",
      "internalName": "XmlObjectFuncs",
      "sourceLocation": {
        "file": "Kvplata/source/func_file2.cpp",
        "line": 492
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "СледующийКлюч": [
          {
            "name": "NextKey",
            "internalName": "NextKey",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 770
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Значение": [
          {
            "name": "ResolveEntry",
            "internalName": "ResolveEntry",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 712
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Удалить": [
          {
            "name": "Delete",
            "internalName": "Delete",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 704
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Очистить": [
          {
            "name": "Clear",
            "internalName": "Clear",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 698
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Сброс": [
          {
            "name": "Reset",
            "internalName": "Reset",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 775
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Заменить": [
          {
            "name": "ReplaceEntry",
            "internalName": "ReplaceEntry",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 682
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Вставить": [
          {
            "name": "InsertEntry",
            "internalName": "InsertEntry",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 668
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Следующий": [
          {
            "name": "NextValue",
            "internalName": "NextValue",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 765
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Размер": [
          {
            "name": "Size",
            "internalName": "Size",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 781
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "КлючИспользуется": [
          {
            "name": "HasKey",
            "internalName": "HasKey",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 726
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "Добавить": [
          {
            "name": "AddEntry",
            "internalName": "AddEntry",
            "sourceLocation": {
              "file": "MuzzleCommon/Source/Collection.cpp",
              "line": 630
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "CollectionPrototype",
      "internalName": "CollectionPrototype",
      "sourceLocation": {
        "file": "MuzzleCommon/Source/Collection.cpp",
        "line": 786
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "ВызватьСобытие": [
          {
            "name": "HandlerObjectCallEvent",
            "internalName": "HandlerObjectCallEvent",
            "sourceLocation": {
              "file": "MuzzleJ/Source/SelectionObject.cpp",
              "line": 4891
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "HandlerObjectFuncs",
      "internalName": "HandlerObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/SelectionObject.cpp",
        "line": 4938
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    },
    {
      "methods": {
        "Установлен": [
          {
            "name": "StackAssistantIsInstall",
            "internalName": "StackAssistantIsInstall",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3459
            },
            "briefDescription": "функция Установлен()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ВыполнитьФункцию": [
          {
            "name": "StackAssistantRunFunction",
            "internalName": "StackAssistantRunFunction",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3405
            },
            "briefDescription": "функция ВыполнитьФункцию( названиеФункции, параметрыJSON )",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПрочитатьОшибки": [
          {
            "name": "StackAssistantGetError",
            "internalName": "StackAssistantGetError",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3441
            },
            "briefDescription": "функция ПрочитатьОшибки()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПрочитатьПорт": [
          {
            "name": "StackAssistantGetPort",
            "internalName": "StackAssistantGetPort",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3447
            },
            "briefDescription": "свойство Порт",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ЗаписатьПорт": [
          {
            "name": "StackAssistantSetPort",
            "internalName": "StackAssistantSetPort",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3452
            },
            "briefDescription": "",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ],
        "ПодключениеУстановлено": [
          {
            "name": "StackAssistantIsConnect",
            "internalName": "StackAssistantIsConnect",
            "sourceLocation": {
              "file": "MuzzleJ/Source/VisualObjects.cpp",
              "line": 3435
            },
            "briefDescription": "функция ПодключениеУстановлено()",
            "detailedDescription": {
              "text": "",
              "isMarkdown": false
            },
            "revision": "trunk"
          }
        ]
      },
      "getters": {},
      "setters": {},
      "constructors": [],
      "name": "StackAssistantObjectFuncs",
      "internalName": "StackAssistantObjectFuncs",
      "sourceLocation": {
        "file": "MuzzleJ/Source/VisualObjects.cpp",
        "line": 3464
      },
      "briefDescription": "",
      "detailedDescription": {
        "text": "",
        "isMarkdown": false
      },
      "revision": "trunk"
    }
  ],
  "revision": "trunk"
}