functions:
  - name: Есть
    aliases: [exists]
    description: |
      **Макрос Есть(выражение)**

      Синоним `exists`. Возвращает `true` если

      - результат вычисления выражения не является Empty
      - в процессе вычисления не возникает исключений

      Примеры:

      ```
      var x
      var y = 1
      var z = @{ k: 1 }
      func f() { return 1 }
      func g() { return }
      func k() { throw "Error" }

      Есть(x)       # false
      Есть(y)       # true
      Есть(z.k)     # true
      Есть(z.k.m)   # false
      Есть(f())     # true
      Есть(g())     # false
      Есть(k())     # false
      Есть(m())     # false
      ```

  - name: Извлечь
    aliases: [getOrDefault]
    description: |
      **Макрос Извлечь(выражение, значениеПоУмолчанию)**

      Синоним `getOrDefault`. Если 

      - результат вычисления выражения не является Empty
      - в процессе вычисления не возникает исключений

      то возвращает результат вычисления выражения, иначе возвращает
      значениеПоУмолчанию.

      Примеры:

      ```
      var x
      var y = 1
      var z = @{ k: 1 }
      func f() { return 1 }
      func g() { return }
      func k() { throw "Error" }

      Извлечь(x, "default")       # "default"
      Извлечь(y, "default")       # 1
      Извлечь(z.k, "default")     # 1
      Извлечь(z.k.m, "default")   # "default"
      Извлечь(f(), "default")     # 1
      Извлечь(g(), "default")     # "default"
      Извлечь(k(), "default")     # "default"
      Извлечь(m(), "default")     # "default"
      ```

  - name: Элементов
    aliases: []
    description: |
      **Итератор Элементов(объект, переменная)**

      Создает итератор по всем ключам объекта в порядке возрастания. Может
      использоваться только в цикле `ДляВсех`.

      Пример:

      ```
      перем об = @{ x: 1, y: 2 }
      перем ключи = @[]
      перем значения = @[]

      ДляВсех( Элементов(об, ключ) )
      {
         ключи.Добавить( ключ )
         значения.Добавить( об[ключ] )
      }

      # массив ключи содержит все ключи объекта об в порядке возрастания: @[ "x", "y" ]
      # массив значения содержит все значения объекта об: @[ 1, 2 ]
      ```

  - name: Полей
    aliases: []
    description: |
      **Итератор Полей(объект, переменная)**

      Создает итератор по именам всех полей записи объекта. Если в объекте нет записи, создается 
      пустой итератор. Может использоваться только в цикле `ДляВсех`. 

      Пример:

      ```
      перем именаПолей = @[]
      перем значенияПолей = @[]

      ДляВсех( Полей(об, имяПоля) )
      {
         именаПолей.Добавить( имяПоля )
         значенияПолей.Добавить( об[имяПоля] )
      }

      # массив именаПолей содержит содержит имена всех полей записи объекта об
      # массив значенияПолей содержит значения всех полей записи объекта об
      ```

  - name: ПодОбъектов
    aliases: []
    description: |
      **Итератор ПодОбъектов(объект, переменная)**

      Создает итератор по ключам объекта, значениями которых являются объекты; все прочие 
      ключи объекта игнорируются. Выбранные ключи перечисляются в порядке возврастания.
      Может использоваться только в цикле `ДляВсех`.

      Пример:

      ```
      перем об = @{ x: 1, y: @{}, z: 2 }
      перем ключи = @[]

      ДляВсех( ПодОбъектов(об, ключ) )
      {
         ключи.Добавить( ключ )
      }

      # массив ключи содержит все ключи объекта об, значениями которых
      # являются объекты; в примере есть только одно такое поле - "y"
      ```